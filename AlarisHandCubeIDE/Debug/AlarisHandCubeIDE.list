
AlarisHandCubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002748  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002854  08002854  00012854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800287c  0800287c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800287c  0800287c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800287c  0800287c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800287c  0800287c  0001287c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08002890  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08002890  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adc8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b04  00000000  00000000  0002adfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002c908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  0002d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ba4  00000000  00000000  0002e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cba6  00000000  00000000  00046c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089251  00000000  00000000  0005382a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dca7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003398  00000000  00000000  000dcad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800283c 	.word	0x0800283c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800283c 	.word	0x0800283c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd3c 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80d 	bl	8000172 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fae6 	bl	8000728 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800015c:	f000 f874 	bl	8000248 <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 8000160:	f000 fab4 	bl	80006cc <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8000164:	f000 f8b8 	bl	80002d8 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000168:	f000 f980 	bl	800046c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800016c:	f000 fa16 	bl	800059c <_ZL12MX_TIM3_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000170:	e7fe      	b.n	8000170 <main+0x24>

08000172 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b094      	sub	sp, #80	; 0x50
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f002 fb53 	bl	800282c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	f107 0314 	add.w	r3, r7, #20
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ac:	2300      	movs	r3, #0
 80001ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 f9c9 	bl	8001560 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	bf14      	ite	ne
 80001d4:	2301      	movne	r3, #1
 80001d6:	2300      	moveq	r3, #0
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80001de:	f000 fadd 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2102      	movs	r1, #2
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fc2e 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	bf14      	ite	ne
 800020a:	2301      	movne	r3, #1
 800020c:	2300      	moveq	r3, #0
 800020e:	b2db      	uxtb	r3, r3
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000214:	f000 fac2 	bl	800079c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000218:	2302      	movs	r3, #2
 800021a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800021c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fdb5 	bl	8001d94 <HAL_RCCEx_PeriphCLKConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	bf14      	ite	ne
 8000230:	2301      	movne	r3, #1
 8000232:	2300      	moveq	r3, #0
 8000234:	b2db      	uxtb	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 800023a:	f000 faaf 	bl	800079c <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3750      	adds	r7, #80	; 0x50
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000258:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 800025a:	4a1e      	ldr	r2, [pc, #120]	; (80002d4 <_ZL12MX_ADC1_Initv+0x8c>)
 800025c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000266:	2200      	movs	r2, #0
 8000268:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 800026c:	2200      	movs	r2, #0
 800026e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000272:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000276:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 800027a:	2200      	movs	r2, #0
 800027c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000280:	2201      	movs	r2, #1
 8000282:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000284:	4812      	ldr	r0, [pc, #72]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 8000286:	f000 fd03 	bl	8000c90 <HAL_ADC_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	bf14      	ite	ne
 8000290:	2301      	movne	r3, #1
 8000292:	2300      	moveq	r3, #0
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 800029a:	f000 fa7f 	bl	800079c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800029e:	2302      	movs	r3, #2
 80002a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4808      	ldr	r0, [pc, #32]	; (80002d0 <_ZL12MX_ADC1_Initv+0x88>)
 80002b0:	f000 fdc6 	bl	8000e40 <HAL_ADC_ConfigChannel>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	bf14      	ite	ne
 80002ba:	2301      	movne	r3, #1
 80002bc:	2300      	moveq	r3, #0
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 80002c4:	f000 fa6a 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000028 	.word	0x20000028
 80002d4:	40012400 	.word	0x40012400

080002d8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b092      	sub	sp, #72	; 0x48
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]
 80002fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2220      	movs	r2, #32
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fa92 	bl	800282c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000308:	4b56      	ldr	r3, [pc, #344]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 800030a:	4a57      	ldr	r2, [pc, #348]	; (8000468 <_ZL12MX_TIM1_Initv+0x190>)
 800030c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800030e:	4b55      	ldr	r3, [pc, #340]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000314:	4b53      	ldr	r3, [pc, #332]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800031a:	4b52      	ldr	r3, [pc, #328]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 800031c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000320:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000322:	4b50      	ldr	r3, [pc, #320]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000328:	4b4e      	ldr	r3, [pc, #312]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b4d      	ldr	r3, [pc, #308]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 8000336:	f001 fde3 	bl	8001f00 <HAL_TIM_PWM_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	bf14      	ite	ne
 8000340:	2301      	movne	r3, #1
 8000342:	2300      	moveq	r3, #0
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800034a:	f000 fa27 	bl	800079c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034e:	2300      	movs	r3, #0
 8000350:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000352:	2300      	movs	r3, #0
 8000354:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800035a:	4619      	mov	r1, r3
 800035c:	4841      	ldr	r0, [pc, #260]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 800035e:	f002 f8bd 	bl	80024dc <HAL_TIMEx_MasterConfigSynchronization>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8000372:	f000 fa13 	bl	800079c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000376:	2360      	movs	r3, #96	; 0x60
 8000378:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800037e:	2300      	movs	r3, #0
 8000380:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000382:	2300      	movs	r3, #0
 8000384:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000386:	2300      	movs	r3, #0
 8000388:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800038a:	2300      	movs	r3, #0
 800038c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000396:	2200      	movs	r2, #0
 8000398:	4619      	mov	r1, r3
 800039a:	4832      	ldr	r0, [pc, #200]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 800039c:	f001 fe00 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	bf14      	ite	ne
 80003a6:	2301      	movne	r3, #1
 80003a8:	2300      	moveq	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80003b0:	f000 f9f4 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b8:	2204      	movs	r2, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4829      	ldr	r0, [pc, #164]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 80003be:	f001 fdef 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	bf14      	ite	ne
 80003c8:	2301      	movne	r3, #1
 80003ca:	2300      	moveq	r3, #0
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80003d2:	f000 f9e3 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003da:	2208      	movs	r2, #8
 80003dc:	4619      	mov	r1, r3
 80003de:	4821      	ldr	r0, [pc, #132]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 80003e0:	f001 fdde 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	bf14      	ite	ne
 80003ea:	2301      	movne	r3, #1
 80003ec:	2300      	moveq	r3, #0
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80003f4:	f000 f9d2 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fc:	220c      	movs	r2, #12
 80003fe:	4619      	mov	r1, r3
 8000400:	4818      	ldr	r0, [pc, #96]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 8000402:	f001 fdcd 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	bf14      	ite	ne
 800040c:	2301      	movne	r3, #1
 800040e:	2300      	moveq	r3, #0
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8000416:	f000 f9c1 	bl	800079c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800042e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000432:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 800043e:	f002 f8a5 	bl	800258c <HAL_TIMEx_ConfigBreakDeadTime>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf14      	ite	ne
 8000448:	2301      	movne	r3, #1
 800044a:	2300      	moveq	r3, #0
 800044c:	b2db      	uxtb	r3, r3
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <_ZL12MX_TIM1_Initv+0x17e>
  {
    Error_Handler();
 8000452:	f000 f9a3 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <_ZL12MX_TIM1_Initv+0x18c>)
 8000458:	f000 fa58 	bl	800090c <HAL_TIM_MspPostInit>

}
 800045c:	bf00      	nop
 800045e:	3748      	adds	r7, #72	; 0x48
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000058 	.word	0x20000058
 8000468:	40012c00 	.word	0x40012c00

0800046c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000472:	f107 0320 	add.w	r3, r7, #32
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800048e:	4b42      	ldr	r3, [pc, #264]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 8000490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000494:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000496:	4b40      	ldr	r3, [pc, #256]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049c:	4b3e      	ldr	r3, [pc, #248]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004a2:	4b3d      	ldr	r3, [pc, #244]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 80004a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004aa:	4b3b      	ldr	r3, [pc, #236]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b0:	4b39      	ldr	r3, [pc, #228]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004b6:	4838      	ldr	r0, [pc, #224]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 80004b8:	f001 fd22 	bl	8001f00 <HAL_TIM_PWM_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	bf14      	ite	ne
 80004c2:	2301      	movne	r3, #1
 80004c4:	2300      	moveq	r3, #0
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 80004cc:	f000 f966 	bl	800079c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d8:	f107 0320 	add.w	r3, r7, #32
 80004dc:	4619      	mov	r1, r3
 80004de:	482e      	ldr	r0, [pc, #184]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 80004e0:	f001 fffc 	bl	80024dc <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf14      	ite	ne
 80004ea:	2301      	movne	r3, #1
 80004ec:	2300      	moveq	r3, #0
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 80004f4:	f000 f952 	bl	800079c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f8:	2360      	movs	r3, #96	; 0x60
 80004fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	4619      	mov	r1, r3
 800050e:	4822      	ldr	r0, [pc, #136]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 8000510:	f001 fd46 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf14      	ite	ne
 800051a:	2301      	movne	r3, #1
 800051c:	2300      	moveq	r3, #0
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8000524:	f000 f93a 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2204      	movs	r2, #4
 800052c:	4619      	mov	r1, r3
 800052e:	481a      	ldr	r0, [pc, #104]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 8000530:	f001 fd36 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8000544:	f000 f92a 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2208      	movs	r2, #8
 800054c:	4619      	mov	r1, r3
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 8000550:	f001 fd26 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 8000564:	f000 f91a 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	220c      	movs	r2, #12
 800056c:	4619      	mov	r1, r3
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 8000570:	f001 fd16 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	bf14      	ite	ne
 800057a:	2301      	movne	r3, #1
 800057c:	2300      	moveq	r3, #0
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 8000584:	f000 f90a 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_ZL12MX_TIM2_Initv+0x12c>)
 800058a:	f000 f9bf 	bl	800090c <HAL_TIM_MspPostInit>

}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	; 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000a0 	.word	0x200000a0

0800059c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005be:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 80005c0:	4a41      	ldr	r2, [pc, #260]	; (80006c8 <_ZL12MX_TIM3_Initv+0x12c>)
 80005c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005c4:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005d0:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 80005d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d8:	4b3a      	ldr	r3, [pc, #232]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005de:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005e4:	4837      	ldr	r0, [pc, #220]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 80005e6:	f001 fc8b 	bl	8001f00 <HAL_TIM_PWM_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80005fa:	f000 f8cf 	bl	800079c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4619      	mov	r1, r3
 800060c:	482d      	ldr	r0, [pc, #180]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 800060e:	f001 ff65 	bl	80024dc <HAL_TIMEx_MasterConfigSynchronization>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8000622:	f000 f8bb 	bl	800079c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000626:	2360      	movs	r3, #96	; 0x60
 8000628:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	4821      	ldr	r0, [pc, #132]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 800063e:	f001 fcaf 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8000652:	f000 f8a3 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2204      	movs	r2, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4819      	ldr	r0, [pc, #100]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 800065e:	f001 fc9f 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf14      	ite	ne
 8000668:	2301      	movne	r3, #1
 800066a:	2300      	moveq	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8000672:	f000 f893 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2208      	movs	r2, #8
 800067a:	4619      	mov	r1, r3
 800067c:	4811      	ldr	r0, [pc, #68]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 800067e:	f001 fc8f 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	bf14      	ite	ne
 8000688:	2301      	movne	r3, #1
 800068a:	2300      	moveq	r3, #0
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8000692:	f000 f883 	bl	800079c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	220c      	movs	r2, #12
 800069a:	4619      	mov	r1, r3
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 800069e:	f001 fc7f 	bl	8001fa0 <HAL_TIM_PWM_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 80006b2:	f000 f873 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <_ZL12MX_TIM3_Initv+0x128>)
 80006b8:	f000 f928 	bl	800090c <HAL_TIM_MspPostInit>

}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000e8 	.word	0x200000e8
 80006c8:	40000400 	.word	0x40000400

080006cc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <_ZL19MX_USART1_UART_Initv+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000704:	f001 ff93 	bl	800262e <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000718:	f000 f840 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000130 	.word	0x20000130
 8000724:	40013800 	.word	0x40013800

08000728 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <_ZL12MX_GPIO_Initv+0x70>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_MspInit+0x5c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <HAL_MspInit+0x5c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_MspInit+0x5c>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x5c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_MspInit+0x5c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_MspInit+0x5c>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_MspInit+0x60>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_MspInit+0x60>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	40021000 	.word	0x40021000
 8000808:	40010000 	.word	0x40010000

0800080c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <HAL_ADC_MspInit+0x6c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d121      	bne.n	8000870 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_ADC_MspInit+0x70>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <HAL_ADC_MspInit+0x70>)
 8000832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <HAL_ADC_MspInit+0x70>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_ADC_MspInit+0x70>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_ADC_MspInit+0x70>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_ADC_MspInit+0x70>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = pot1_Pin|pot2_Pin|pot3_Pin|pot4_Pin
 800085c:	23fc      	movs	r3, #252	; 0xfc
 800085e:	613b      	str	r3, [r7, #16]
                          |pot5_Pin|pot6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000860:	2303      	movs	r3, #3
 8000862:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <HAL_ADC_MspInit+0x74>)
 800086c:	f000 fcfe 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	3720      	adds	r7, #32
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40012400 	.word	0x40012400
 800087c:	40021000 	.word	0x40021000
 8000880:	40010800 	.word	0x40010800

08000884 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <HAL_TIM_PWM_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d10c      	bne.n	80008b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a1a      	ldr	r2, [pc, #104]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 800089c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ae:	e022      	b.n	80008f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b8:	d10c      	bne.n	80008d4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a11      	ldr	r2, [pc, #68]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
}
 80008d2:	e010      	b.n	80008f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <HAL_TIM_PWM_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d10b      	bne.n	80008f6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_TIM_PWM_MspInit+0x80>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
}
 80008f6:	bf00      	nop
 80008f8:	371c      	adds	r7, #28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40012c00 	.word	0x40012c00
 8000904:	40021000 	.word	0x40021000
 8000908:	40000400 	.word	0x40000400

0800090c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a4c      	ldr	r2, [pc, #304]	; (8000a58 <HAL_TIM_MspPostInit+0x14c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d119      	bne.n	8000960 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b4b      	ldr	r3, [pc, #300]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a4a      	ldr	r2, [pc, #296]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b48      	ldr	r3, [pc, #288]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1A_Pin|M1B_Pin|M2A_Pin|M2B_Pin;
 8000944:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2302      	movs	r3, #2
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	4619      	mov	r1, r3
 8000958:	4841      	ldr	r0, [pc, #260]	; (8000a60 <HAL_TIM_MspPostInit+0x154>)
 800095a:	f000 fc87 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800095e:	e077      	b.n	8000a50 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000968:	d143      	bne.n	80009f2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a3b      	ldr	r2, [pc, #236]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a35      	ldr	r2, [pc, #212]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3A_Pin|M3B_Pin;
 800099a:	2303      	movs	r3, #3
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	4619      	mov	r1, r3
 80009ac:	482c      	ldr	r0, [pc, #176]	; (8000a60 <HAL_TIM_MspPostInit+0x154>)
 80009ae:	f000 fc5d 	bl	800126c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M4A_Pin|M4B_Pin;
 80009b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2302      	movs	r3, #2
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4827      	ldr	r0, [pc, #156]	; (8000a64 <HAL_TIM_MspPostInit+0x158>)
 80009c8:	f000 fc50 	bl	800126c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <HAL_TIM_MspPostInit+0x15c>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80009d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <HAL_TIM_MspPostInit+0x15c>)
 80009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ee:	6053      	str	r3, [r2, #4]
}
 80009f0:	e02e      	b.n	8000a50 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <HAL_TIM_MspPostInit+0x160>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d129      	bne.n	8000a50 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_TIM_MspPostInit+0x150>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M6A_Pin|M6B_Pin|M5A_Pin|M5B_Pin;
 8000a14:	2333      	movs	r3, #51	; 0x33
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0318 	add.w	r3, r7, #24
 8000a24:	4619      	mov	r1, r3
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <HAL_TIM_MspPostInit+0x158>)
 8000a28:	f000 fc20 	bl	800126c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_TIM_MspPostInit+0x15c>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_TIM_MspPostInit+0x15c>)
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	6053      	str	r3, [r2, #4]
}
 8000a50:	bf00      	nop
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40012c00 	.word	0x40012c00
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40010c00 	.word	0x40010c00
 8000a68:	40010000 	.word	0x40010000
 8000a6c:	40000400 	.word	0x40000400

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <HAL_UART_MspInit+0xa4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d13d      	bne.n	8000b0c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <HAL_UART_MspInit+0xa8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <HAL_UART_MspInit+0xa8>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <HAL_UART_MspInit+0xa8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <HAL_UART_MspInit+0xa8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <HAL_UART_MspInit+0xa8>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_UART_MspInit+0xa8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4812      	ldr	r0, [pc, #72]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ad4:	f000 fbca 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000aec:	f000 fbbe 	bl	800126c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_UART_MspInit+0xb0>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_UART_MspInit+0xb0>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40013800 	.word	0x40013800
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	40010000 	.word	0x40010000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 f875 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
	...

08000b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b82:	e003      	b.n	8000b8c <LoopCopyDataInit>

08000b84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b8a:	3104      	adds	r1, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b8c:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b94:	d3f6      	bcc.n	8000b84 <CopyDataInit>
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b98:	e002      	b.n	8000ba0 <LoopFillZerobss>

08000b9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b9c:	f842 3b04 	str.w	r3, [r2], #4

08000ba0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ba2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ba4:	d3f9      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ffe4 	bl	8000b72 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f001 fe1b 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff facd 	bl	800014c <main>
  bx lr
 8000bb2:	4770      	bx	lr
  ldr r3, =_sidata
 8000bb4:	08002884 	.word	0x08002884
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000bc4:	20000174 	.word	0x20000174

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x28>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x28>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 fb11 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fdde 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fb1b 	bl	8001252 <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c34:	f000 faf1 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <HAL_IncTick+0x20>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000170 	.word	0x20000170

08000c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <HAL_GetTick+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000170 	.word	0x20000170

08000c90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0be      	b.n	8000e30 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d109      	bne.n	8000cd4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fd9c 	bl	800080c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f9ab 	bl	8001030 <ADC_ConversionStop_Disable>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 8099 	bne.w	8000e1e <HAL_ADC_Init+0x18e>
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 8095 	bne.w	8000e1e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cfc:	f023 0302 	bic.w	r3, r3, #2
 8000d00:	f043 0202 	orr.w	r2, r3, #2
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7b1b      	ldrb	r3, [r3, #12]
 8000d16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d28:	d003      	beq.n	8000d32 <HAL_ADC_Init+0xa2>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d102      	bne.n	8000d38 <HAL_ADC_Init+0xa8>
 8000d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d36:	e000      	b.n	8000d3a <HAL_ADC_Init+0xaa>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7d1b      	ldrb	r3, [r3, #20]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d119      	bne.n	8000d7c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7b1b      	ldrb	r3, [r3, #12]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d109      	bne.n	8000d64 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	035a      	lsls	r2, r3, #13
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	e00b      	b.n	8000d7c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f043 0220 	orr.w	r2, r3, #32
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	f043 0201 	orr.w	r2, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <HAL_ADC_Init+0x1a8>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	430b      	orrs	r3, r1
 8000da2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dac:	d003      	beq.n	8000db6 <HAL_ADC_Init+0x126>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d104      	bne.n	8000dc0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	051b      	lsls	r3, r3, #20
 8000dbe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_ADC_Init+0x1ac>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d10b      	bne.n	8000dfc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f023 0303 	bic.w	r3, r3, #3
 8000df2:	f043 0201 	orr.w	r2, r3, #1
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dfa:	e018      	b.n	8000e2e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e00:	f023 0312 	bic.w	r3, r3, #18
 8000e04:	f043 0210 	orr.w	r2, r3, #16
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	f043 0201 	orr.w	r2, r3, #1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e1c:	e007      	b.n	8000e2e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	f043 0210 	orr.w	r2, r3, #16
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	ffe1f7fd 	.word	0xffe1f7fd
 8000e3c:	ff1f0efe 	.word	0xff1f0efe

08000e40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_ADC_ConfigChannel+0x20>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e0dc      	b.n	800101a <HAL_ADC_ConfigChannel+0x1da>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b06      	cmp	r3, #6
 8000e6e:	d81c      	bhi.n	8000eaa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	3b05      	subs	r3, #5
 8000e82:	221f      	movs	r2, #31
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	3b05      	subs	r3, #5
 8000e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea8:	e03c      	b.n	8000f24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b0c      	cmp	r3, #12
 8000eb0:	d81c      	bhi.n	8000eec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3b23      	subs	r3, #35	; 0x23
 8000ec4:	221f      	movs	r2, #31
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4019      	ands	r1, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	3b23      	subs	r3, #35	; 0x23
 8000ede:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eea:	e01b      	b.n	8000f24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	3b41      	subs	r3, #65	; 0x41
 8000efe:	221f      	movs	r2, #31
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4019      	ands	r1, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	3b41      	subs	r3, #65	; 0x41
 8000f18:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b09      	cmp	r3, #9
 8000f2a:	d91c      	bls.n	8000f66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68d9      	ldr	r1, [r3, #12]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b1e      	subs	r3, #30
 8000f3e:	2207      	movs	r2, #7
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4019      	ands	r1, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	6898      	ldr	r0, [r3, #8]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	3b1e      	subs	r3, #30
 8000f58:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	e019      	b.n	8000f9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6919      	ldr	r1, [r3, #16]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	2207      	movs	r2, #7
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4019      	ands	r1, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b10      	cmp	r3, #16
 8000fa0:	d003      	beq.n	8000faa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fa6:	2b11      	cmp	r3, #17
 8000fa8:	d132      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d125      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d126      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fd0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d11a      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <HAL_ADC_ConfigChannel+0x1ec>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	0c9a      	lsrs	r2, r3, #18
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff0:	e002      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f9      	bne.n	8000ff2 <HAL_ADC_ConfigChannel+0x1b2>
 8000ffe:	e007      	b.n	8001010 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	f043 0220 	orr.w	r2, r3, #32
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40012400 	.word	0x40012400
 8001028:	20000000 	.word	0x20000000
 800102c:	431bde83 	.word	0x431bde83

08001030 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d127      	bne.n	800109a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800105a:	f7ff fe0f 	bl	8000c7c <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001060:	e014      	b.n	800108c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001062:	f7ff fe0b 	bl	8000c7c <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d90d      	bls.n	800108c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	f043 0210 	orr.w	r2, r3, #16
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	f043 0201 	orr.w	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e007      	b.n	800109c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b01      	cmp	r3, #1
 8001098:	d0e3      	beq.n	8001062 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e4:	f7ff ff90 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff49 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff5e 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff90 	bl	800115c <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5f 	bl	8001108 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffb0 	bl	80011c0 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b08b      	sub	sp, #44	; 0x2c
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	e148      	b.n	8001512 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001280:	2201      	movs	r2, #1
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	69fa      	ldr	r2, [r7, #28]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8137 	bne.w	800150c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4aa3      	ldr	r2, [pc, #652]	; (8001530 <HAL_GPIO_Init+0x2c4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d05e      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012a8:	4aa1      	ldr	r2, [pc, #644]	; (8001530 <HAL_GPIO_Init+0x2c4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d875      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012ae:	4aa1      	ldr	r2, [pc, #644]	; (8001534 <HAL_GPIO_Init+0x2c8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d058      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012b4:	4a9f      	ldr	r2, [pc, #636]	; (8001534 <HAL_GPIO_Init+0x2c8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d86f      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012ba:	4a9f      	ldr	r2, [pc, #636]	; (8001538 <HAL_GPIO_Init+0x2cc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d052      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012c0:	4a9d      	ldr	r2, [pc, #628]	; (8001538 <HAL_GPIO_Init+0x2cc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d869      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012c6:	4a9d      	ldr	r2, [pc, #628]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d04c      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012cc:	4a9b      	ldr	r2, [pc, #620]	; (800153c <HAL_GPIO_Init+0x2d0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d863      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012d2:	4a9b      	ldr	r2, [pc, #620]	; (8001540 <HAL_GPIO_Init+0x2d4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d046      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
 80012d8:	4a99      	ldr	r2, [pc, #612]	; (8001540 <HAL_GPIO_Init+0x2d4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d85d      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d82a      	bhi.n	8001338 <HAL_GPIO_Init+0xcc>
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d859      	bhi.n	800139a <HAL_GPIO_Init+0x12e>
 80012e6:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <HAL_GPIO_Init+0x80>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	08001367 	.word	0x08001367
 80012f0:	08001341 	.word	0x08001341
 80012f4:	08001353 	.word	0x08001353
 80012f8:	08001395 	.word	0x08001395
 80012fc:	0800139b 	.word	0x0800139b
 8001300:	0800139b 	.word	0x0800139b
 8001304:	0800139b 	.word	0x0800139b
 8001308:	0800139b 	.word	0x0800139b
 800130c:	0800139b 	.word	0x0800139b
 8001310:	0800139b 	.word	0x0800139b
 8001314:	0800139b 	.word	0x0800139b
 8001318:	0800139b 	.word	0x0800139b
 800131c:	0800139b 	.word	0x0800139b
 8001320:	0800139b 	.word	0x0800139b
 8001324:	0800139b 	.word	0x0800139b
 8001328:	0800139b 	.word	0x0800139b
 800132c:	0800139b 	.word	0x0800139b
 8001330:	08001349 	.word	0x08001349
 8001334:	0800135d 	.word	0x0800135d
 8001338:	4a82      	ldr	r2, [pc, #520]	; (8001544 <HAL_GPIO_Init+0x2d8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800133e:	e02c      	b.n	800139a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e029      	b.n	800139c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	3304      	adds	r3, #4
 800134e:	623b      	str	r3, [r7, #32]
          break;
 8001350:	e024      	b.n	800139c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	3308      	adds	r3, #8
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e01f      	b.n	800139c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	330c      	adds	r3, #12
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e01a      	b.n	800139c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800136e:	2304      	movs	r3, #4
 8001370:	623b      	str	r3, [r7, #32]
          break;
 8001372:	e013      	b.n	800139c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800137c:	2308      	movs	r3, #8
 800137e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	611a      	str	r2, [r3, #16]
          break;
 8001386:	e009      	b.n	800139c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	615a      	str	r2, [r3, #20]
          break;
 8001392:	e003      	b.n	800139c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
          break;
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x130>
          break;
 800139a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2bff      	cmp	r3, #255	; 0xff
 80013a0:	d801      	bhi.n	80013a6 <HAL_GPIO_Init+0x13a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	e001      	b.n	80013aa <HAL_GPIO_Init+0x13e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3304      	adds	r3, #4
 80013aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2bff      	cmp	r3, #255	; 0xff
 80013b0:	d802      	bhi.n	80013b8 <HAL_GPIO_Init+0x14c>
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0x152>
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	3b08      	subs	r3, #8
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	210f      	movs	r1, #15
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	fa01 f303 	lsl.w	r3, r1, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	6a39      	ldr	r1, [r7, #32]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8090 	beq.w	800150c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ec:	4b56      	ldr	r3, [pc, #344]	; (8001548 <HAL_GPIO_Init+0x2dc>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a55      	ldr	r2, [pc, #340]	; (8001548 <HAL_GPIO_Init+0x2dc>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b53      	ldr	r3, [pc, #332]	; (8001548 <HAL_GPIO_Init+0x2dc>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001404:	4a51      	ldr	r2, [pc, #324]	; (800154c <HAL_GPIO_Init+0x2e0>)
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a49      	ldr	r2, [pc, #292]	; (8001550 <HAL_GPIO_Init+0x2e4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d00d      	beq.n	800144c <HAL_GPIO_Init+0x1e0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a48      	ldr	r2, [pc, #288]	; (8001554 <HAL_GPIO_Init+0x2e8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d007      	beq.n	8001448 <HAL_GPIO_Init+0x1dc>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a47      	ldr	r2, [pc, #284]	; (8001558 <HAL_GPIO_Init+0x2ec>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_GPIO_Init+0x1d8>
 8001440:	2302      	movs	r3, #2
 8001442:	e004      	b.n	800144e <HAL_GPIO_Init+0x1e2>
 8001444:	2303      	movs	r3, #3
 8001446:	e002      	b.n	800144e <HAL_GPIO_Init+0x1e2>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <HAL_GPIO_Init+0x1e2>
 800144c:	2300      	movs	r3, #0
 800144e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001450:	f002 0203 	and.w	r2, r2, #3
 8001454:	0092      	lsls	r2, r2, #2
 8001456:	4093      	lsls	r3, r2
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800145e:	493b      	ldr	r1, [pc, #236]	; (800154c <HAL_GPIO_Init+0x2e0>)
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_GPIO_Init+0x2f0>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_GPIO_Init+0x2f0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_GPIO_Init+0x2f0>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	43db      	mvns	r3, r3
 800148e:	4933      	ldr	r1, [pc, #204]	; (800155c <HAL_GPIO_Init+0x2f0>)
 8001490:	4013      	ands	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	492d      	ldr	r1, [pc, #180]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4929      	ldr	r1, [pc, #164]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4923      	ldr	r1, [pc, #140]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	608b      	str	r3, [r1, #8]
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	43db      	mvns	r3, r3
 80014de:	491f      	ldr	r1, [pc, #124]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	4919      	ldr	r1, [pc, #100]	; (800155c <HAL_GPIO_Init+0x2f0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	60cb      	str	r3, [r1, #12]
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_GPIO_Init+0x2f0>)
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	43db      	mvns	r3, r3
 8001506:	4915      	ldr	r1, [pc, #84]	; (800155c <HAL_GPIO_Init+0x2f0>)
 8001508:	4013      	ands	r3, r2
 800150a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3301      	adds	r3, #1
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f aeaf 	bne.w	8001280 <HAL_GPIO_Init+0x14>
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	372c      	adds	r7, #44	; 0x2c
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	10320000 	.word	0x10320000
 8001534:	10310000 	.word	0x10310000
 8001538:	10220000 	.word	0x10220000
 800153c:	10210000 	.word	0x10210000
 8001540:	10120000 	.word	0x10120000
 8001544:	10110000 	.word	0x10110000
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000
 8001550:	40010800 	.word	0x40010800
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40011000 	.word	0x40011000
 800155c:	40010400 	.word	0x40010400

08001560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e26c      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8087 	beq.w	800168e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	d00c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800158c:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d112      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
 8001598:	4b8c      	ldr	r3, [pc, #560]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d10b      	bne.n	80015be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b89      	ldr	r3, [pc, #548]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d06c      	beq.n	800168c <HAL_RCC_OscConfig+0x12c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d168      	bne.n	800168c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e246      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x76>
 80015c8:	4b80      	ldr	r3, [pc, #512]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a7f      	ldr	r2, [pc, #508]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e02e      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x98>
 80015de:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7a      	ldr	r2, [pc, #488]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b78      	ldr	r3, [pc, #480]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a77      	ldr	r2, [pc, #476]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0xbc>
 8001602:	4b72      	ldr	r3, [pc, #456]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a71      	ldr	r2, [pc, #452]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xd4>
 800161c:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6a      	ldr	r2, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a67      	ldr	r2, [pc, #412]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fb1e 	bl	8000c7c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fb1a 	bl	8000c7c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1fa      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xe4>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb0a 	bl	8000c7c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fb06 	bl	8000c7c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1e6      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x10c>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1ba      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4939      	ldr	r1, [pc, #228]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fabf 	bl	8000c7c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fabb 	bl	8000c7c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e19b      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4927      	ldr	r1, [pc, #156]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fa9e 	bl	8000c7c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fa9a 	bl	8000c7c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e17a      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d03a      	beq.n	80017e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff fa7e 	bl	8000c7c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fa7a 	bl	8000c7c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e15a      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_RCC_OscConfig+0x26c>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 fad8 	bl	8001d58 <RCC_Delay>
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff fa64 	bl	8000c7c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b6:	e00f      	b.n	80017d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fa60 	bl	8000c7c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d908      	bls.n	80017d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e140      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	42420000 	.word	0x42420000
 80017d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	4b9e      	ldr	r3, [pc, #632]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e9      	bne.n	80017b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a6 	beq.w	800193e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f6:	4b97      	ldr	r3, [pc, #604]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10d      	bne.n	800181e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b94      	ldr	r3, [pc, #592]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a93      	ldr	r2, [pc, #588]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b91      	ldr	r3, [pc, #580]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	4b8e      	ldr	r3, [pc, #568]	; (8001a58 <HAL_RCC_OscConfig+0x4f8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182a:	4b8b      	ldr	r3, [pc, #556]	; (8001a58 <HAL_RCC_OscConfig+0x4f8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a8a      	ldr	r2, [pc, #552]	; (8001a58 <HAL_RCC_OscConfig+0x4f8>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001836:	f7ff fa21 	bl	8000c7c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183e:	f7ff fa1d 	bl	8000c7c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	; 0x64
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0fd      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	4b81      	ldr	r3, [pc, #516]	; (8001a58 <HAL_RCC_OscConfig+0x4f8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x312>
 8001864:	4b7b      	ldr	r3, [pc, #492]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a7a      	ldr	r2, [pc, #488]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	e02d      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x334>
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a75      	ldr	r2, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a72      	ldr	r2, [pc, #456]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f023 0304 	bic.w	r3, r3, #4
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	e01c      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d10c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x356>
 800189c:	4b6d      	ldr	r3, [pc, #436]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a6c      	ldr	r2, [pc, #432]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a69      	ldr	r2, [pc, #420]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	e00b      	b.n	80018ce <HAL_RCC_OscConfig+0x36e>
 80018b6:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a66      	ldr	r2, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6213      	str	r3, [r2, #32]
 80018c2:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a63      	ldr	r2, [pc, #396]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d015      	beq.n	8001902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f9d1 	bl	8000c7c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff f9cd 	bl	8000c7c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0ab      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ee      	beq.n	80018de <HAL_RCC_OscConfig+0x37e>
 8001900:	e014      	b.n	800192c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff f9bb 	bl	8000c7c <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f9b7 	bl	8000c7c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e095      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ee      	bne.n	800190a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a47      	ldr	r2, [pc, #284]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8081 	beq.w	8001a4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001948:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d061      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d146      	bne.n	80019ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x4fc>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff f98b 	bl	8000c7c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff f987 	bl	8000c7c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e067      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d108      	bne.n	80019a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001992:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	492d      	ldr	r1, [pc, #180]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a19      	ldr	r1, [r3, #32]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	430b      	orrs	r3, r1
 80019b6:	4927      	ldr	r1, [pc, #156]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x4fc>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff f95b 	bl	8000c7c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff f957 	bl	8000c7c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e037      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x46a>
 80019e8:	e02f      	b.n	8001a4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_RCC_OscConfig+0x4fc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f944 	bl	8000c7c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff f940 	bl	8000c7c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e020      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x498>
 8001a16:	e018      	b.n	8001a4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e013      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	42420060 	.word	0x42420060

08001a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0d0      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b6a      	ldr	r3, [pc, #424]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d910      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	4965      	ldr	r1, [pc, #404]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0b8      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	494d      	ldr	r1, [pc, #308]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d040      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d115      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e07f      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e073      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e06b      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4936      	ldr	r1, [pc, #216]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b50:	f7ff f894 	bl	8000c7c <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7ff f890 	bl	8000c7c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e053      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d210      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4922      	ldr	r1, [pc, #136]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e032      	b.n	8001c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4916      	ldr	r1, [pc, #88]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bee:	f000 f821 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	490a      	ldr	r1, [pc, #40]	; (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001c00:	5ccb      	ldrb	r3, [r1, r3]
 8001c02:	fa22 f303 	lsr.w	r3, r2, r3
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_RCC_ClockConfig+0x1cc>)
 8001c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1d0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fff2 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	08002864 	.word	0x08002864
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	b490      	push	{r4, r7}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c3c:	1d3c      	adds	r4, r7, #4
 8001c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c44:	f240 2301 	movw	r3, #513	; 0x201
 8001c48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d002      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x40>
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x46>
 8001c72:	e02d      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c76:	623b      	str	r3, [r7, #32]
      break;
 8001c78:	e02d      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	0c9b      	lsrs	r3, r3, #18
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c86:	4413      	add	r3, r2
 8001c88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	0c5b      	lsrs	r3, r3, #17
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb2:	fb02 f203 	mul.w	r2, r2, r3
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	e004      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	623b      	str	r3, [r7, #32]
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd2:	623b      	str	r3, [r7, #32]
      break;
 8001cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc90      	pop	{r4, r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	08002854 	.word	0x08002854
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	007a1200 	.word	0x007a1200
 8001cf0:	003d0900 	.word	0x003d0900

08001cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	20000000 	.word	0x20000000

08001d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d0c:	f7ff fff2 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08002874 	.word	0x08002874

08001d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d34:	f7ff ffde 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	0adb      	lsrs	r3, r3, #11
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4903      	ldr	r1, [pc, #12]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08002874 	.word	0x08002874

08001d58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <RCC_Delay+0x34>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <RCC_Delay+0x38>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0a5b      	lsrs	r3, r3, #9
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d74:	bf00      	nop
  }
  while (Delay --);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f9      	bne.n	8001d74 <RCC_Delay+0x1c>
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	10624dd3 	.word	0x10624dd3

08001d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d07d      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db4:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10d      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dca:	61d3      	str	r3, [r2, #28]
 8001dcc:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d118      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de8:	4b43      	ldr	r3, [pc, #268]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a42      	ldr	r2, [pc, #264]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df4:	f7fe ff42 	bl	8000c7c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	e008      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfc:	f7fe ff3e 	bl	8000c7c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e06d      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d02e      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d027      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e38:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e48:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e4e:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d014      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe ff0d 	bl	8000c7c <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7fe ff09 	bl	8000c7c <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e036      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4917      	ldr	r1, [pc, #92]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	490b      	ldr	r1, [pc, #44]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4904      	ldr	r1, [pc, #16]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	42420440 	.word	0x42420440

08001f00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e041      	b.n	8001f96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fcac 	bl	8000884 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f000 f8ec 	bl	800211c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e0ac      	b.n	8002114 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	f200 809f 	bhi.w	8002108 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08002005 	.word	0x08002005
 8001fd4:	08002109 	.word	0x08002109
 8001fd8:	08002109 	.word	0x08002109
 8001fdc:	08002109 	.word	0x08002109
 8001fe0:	08002045 	.word	0x08002045
 8001fe4:	08002109 	.word	0x08002109
 8001fe8:	08002109 	.word	0x08002109
 8001fec:	08002109 	.word	0x08002109
 8001ff0:	08002087 	.word	0x08002087
 8001ff4:	08002109 	.word	0x08002109
 8001ff8:	08002109 	.word	0x08002109
 8001ffc:	08002109 	.word	0x08002109
 8002000:	080020c7 	.word	0x080020c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f8de 	bl	80021cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0208 	orr.w	r2, r2, #8
 800201e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6999      	ldr	r1, [r3, #24]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	619a      	str	r2, [r3, #24]
      break;
 8002042:	e062      	b.n	800210a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f924 	bl	8002298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800205e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800206e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6999      	ldr	r1, [r3, #24]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	021a      	lsls	r2, r3, #8
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	619a      	str	r2, [r3, #24]
      break;
 8002084:	e041      	b.n	800210a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f96d 	bl	800236c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0208 	orr.w	r2, r2, #8
 80020a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0204 	bic.w	r2, r2, #4
 80020b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	69d9      	ldr	r1, [r3, #28]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	61da      	str	r2, [r3, #28]
      break;
 80020c4:	e021      	b.n	800210a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f9b7 	bl	8002440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69d9      	ldr	r1, [r3, #28]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	021a      	lsls	r2, r3, #8
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	61da      	str	r2, [r3, #28]
      break;
 8002106:	e000      	b.n	800210a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002108:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <TIM_Base_SetConfig+0xa8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d007      	beq.n	8002144 <TIM_Base_SetConfig+0x28>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213a:	d003      	beq.n	8002144 <TIM_Base_SetConfig+0x28>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <TIM_Base_SetConfig+0xac>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d108      	bne.n	8002156 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <TIM_Base_SetConfig+0xa8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <TIM_Base_SetConfig+0x52>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d003      	beq.n	800216e <TIM_Base_SetConfig+0x52>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <TIM_Base_SetConfig+0xac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <TIM_Base_SetConfig+0xa8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d103      	bne.n	80021b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	615a      	str	r2, [r3, #20]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	40012c00 	.word	0x40012c00
 80021c8:	40000400 	.word	0x40000400

080021cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f023 0201 	bic.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f023 0302 	bic.w	r3, r3, #2
 8002214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <TIM_OC1_SetConfig+0xc8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d10c      	bne.n	8002242 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f023 0308 	bic.w	r3, r3, #8
 800222e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <TIM_OC1_SetConfig+0xc8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d111      	bne.n	800226e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	621a      	str	r2, [r3, #32]
}
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40012c00 	.word	0x40012c00

08002298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	f023 0210 	bic.w	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f023 0320 	bic.w	r3, r3, #32
 80022e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <TIM_OC2_SetConfig+0xd0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d10d      	bne.n	8002314 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002312:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <TIM_OC2_SetConfig+0xd0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d113      	bne.n	8002344 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800232a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	621a      	str	r2, [r3, #32]
}
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40012c00 	.word	0x40012c00

0800236c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a1d      	ldr	r2, [pc, #116]	; (800243c <TIM_OC3_SetConfig+0xd0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10d      	bne.n	80023e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <TIM_OC3_SetConfig+0xd0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d113      	bne.n	8002416 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	621a      	str	r2, [r3, #32]
}
 8002430:	bf00      	nop
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40012c00 	.word	0x40012c00

08002440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800248a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	031b      	lsls	r3, r3, #12
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <TIM_OC4_SetConfig+0x98>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d109      	bne.n	80024b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	019b      	lsls	r3, r3, #6
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	621a      	str	r2, [r3, #32]
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40012c00 	.word	0x40012c00

080024dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e041      	b.n	8002578 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d004      	beq.n	800254c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10c      	bne.n	8002566 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002552:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	4313      	orrs	r3, r2
 800255c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40000400 	.word	0x40000400

0800258c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e03d      	b.n	8002624 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e03f      	b.n	80026c0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe fa0b 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2224      	movs	r2, #36	; 0x24
 800265e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002670:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f828 	bl	80026c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002686:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002696:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002702:	f023 030c 	bic.w	r3, r3, #12
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	430b      	orrs	r3, r1
 800270e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2c      	ldr	r2, [pc, #176]	; (80027dc <UART_SetConfig+0x114>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d103      	bne.n	8002738 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002730:	f7ff fafe 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	e002      	b.n	800273e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002738:	f7ff fae6 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 800273c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009a      	lsls	r2, r3, #2
 8002748:	441a      	add	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <UART_SetConfig+0x118>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	0119      	lsls	r1, r3, #4
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009a      	lsls	r2, r3, #2
 8002768:	441a      	add	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fbb2 f2f3 	udiv	r2, r2, r3
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <UART_SetConfig+0x118>)
 8002776:	fba3 0302 	umull	r0, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2064      	movs	r0, #100	; 0x64
 800277e:	fb00 f303 	mul.w	r3, r0, r3
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	3332      	adds	r3, #50	; 0x32
 8002788:	4a15      	ldr	r2, [pc, #84]	; (80027e0 <UART_SetConfig+0x118>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002794:	4419      	add	r1, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	009a      	lsls	r2, r3, #2
 80027a0:	441a      	add	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <UART_SetConfig+0x118>)
 80027ae:	fba3 0302 	umull	r0, r3, r3, r2
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	2064      	movs	r0, #100	; 0x64
 80027b6:	fb00 f303 	mul.w	r3, r0, r3
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	3332      	adds	r3, #50	; 0x32
 80027c0:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <UART_SetConfig+0x118>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	440a      	add	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40013800 	.word	0x40013800
 80027e0:	51eb851f 	.word	0x51eb851f

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	2600      	movs	r6, #0
 80027e8:	4d0c      	ldr	r5, [pc, #48]	; (800281c <__libc_init_array+0x38>)
 80027ea:	4c0d      	ldr	r4, [pc, #52]	; (8002820 <__libc_init_array+0x3c>)
 80027ec:	1b64      	subs	r4, r4, r5
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	42a6      	cmp	r6, r4
 80027f2:	d109      	bne.n	8002808 <__libc_init_array+0x24>
 80027f4:	f000 f822 	bl	800283c <_init>
 80027f8:	2600      	movs	r6, #0
 80027fa:	4d0a      	ldr	r5, [pc, #40]	; (8002824 <__libc_init_array+0x40>)
 80027fc:	4c0a      	ldr	r4, [pc, #40]	; (8002828 <__libc_init_array+0x44>)
 80027fe:	1b64      	subs	r4, r4, r5
 8002800:	10a4      	asrs	r4, r4, #2
 8002802:	42a6      	cmp	r6, r4
 8002804:	d105      	bne.n	8002812 <__libc_init_array+0x2e>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	f855 3b04 	ldr.w	r3, [r5], #4
 800280c:	4798      	blx	r3
 800280e:	3601      	adds	r6, #1
 8002810:	e7ee      	b.n	80027f0 <__libc_init_array+0xc>
 8002812:	f855 3b04 	ldr.w	r3, [r5], #4
 8002816:	4798      	blx	r3
 8002818:	3601      	adds	r6, #1
 800281a:	e7f2      	b.n	8002802 <__libc_init_array+0x1e>
 800281c:	0800287c 	.word	0x0800287c
 8002820:	0800287c 	.word	0x0800287c
 8002824:	0800287c 	.word	0x0800287c
 8002828:	08002880 	.word	0x08002880

0800282c <memset>:
 800282c:	4603      	mov	r3, r0
 800282e:	4402      	add	r2, r0
 8002830:	4293      	cmp	r3, r2
 8002832:	d100      	bne.n	8002836 <memset+0xa>
 8002834:	4770      	bx	lr
 8002836:	f803 1b01 	strb.w	r1, [r3], #1
 800283a:	e7f9      	b.n	8002830 <memset+0x4>

0800283c <_init>:
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	bf00      	nop
 8002840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002842:	bc08      	pop	{r3}
 8002844:	469e      	mov	lr, r3
 8002846:	4770      	bx	lr

08002848 <_fini>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	bf00      	nop
 800284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	469e      	mov	lr, r3
 8002852:	4770      	bx	lr
