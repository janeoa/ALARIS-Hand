
AlarisHandCubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004668  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004800  08004800  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004800  08004800  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08004878  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004878  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcd9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000246c  00000000  00000000  0002fd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000321e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00032f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b06d  00000000  00000000  00033b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef53  00000000  00000000  0004ec05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b34  00000000  00000000  0005db58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef68c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  000ef6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800475c 	.word	0x0800475c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800475c 	.word	0x0800475c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN5Motor8getStepsEv>:

    int getGoalPosCents(){return goalPosCents;}
    int getCurrentPosCents(uint32_t raw);

    int  getState(){return state;}
    int* getSteps(){return steps;}
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	33b0      	adds	r3, #176	; 0xb0
 8000168:	4618      	mov	r0, r3
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
	...

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000178:	f6ad 3de8 	subw	sp, sp, #3048	; 0xbe8
 800017c:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017e:	f001 fa6f 	bl	8001660 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000182:	f000 fa51 	bl	8000628 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000186:	f000 fda5 	bl	8000cd4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800018a:	f000 fd85 	bl	8000c98 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 800018e:	f000 fab5 	bl	80006fc <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 8000192:	f000 fd53 	bl	8000c3c <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8000196:	f000 fb59 	bl	800084c <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800019a:	f000 fc21 	bl	80009e0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800019e:	f000 fcb5 	bl	8000b0c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  //Motor order 1->6: pinky (1), ring (2), middle (3), index (4), thumb1 (5), thumb2 (6)
  Motor m1(htim1, TIM_CHANNEL_1, htim1, TIM_CHANNEL_2, 200, 900);
 80001a2:	4ec9      	ldr	r6, [pc, #804]	; (80004c8 <main+0x354>)
 80001a4:	f607 1814 	addw	r8, r7, #2324	; 0x914
 80001a8:	f44f 7361 	mov.w	r3, #900	; 0x384
 80001ac:	9324      	str	r3, [sp, #144]	; 0x90
 80001ae:	23c8      	movs	r3, #200	; 0xc8
 80001b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80001b2:	2304      	movs	r3, #4
 80001b4:	9322      	str	r3, [sp, #136]	; 0x88
 80001b6:	4ac4      	ldr	r2, [pc, #784]	; (80004c8 <main+0x354>)
 80001b8:	ab10      	add	r3, sp, #64	; 0x40
 80001ba:	4611      	mov	r1, r2
 80001bc:	2248      	movs	r2, #72	; 0x48
 80001be:	4618      	mov	r0, r3
 80001c0:	f003 fe8a 	bl	8003ed8 <memcpy>
 80001c4:	2300      	movs	r3, #0
 80001c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80001c8:	466d      	mov	r5, sp
 80001ca:	f106 040c 	add.w	r4, r6, #12
 80001ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001da:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80001de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80001e2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80001e6:	4640      	mov	r0, r8
 80001e8:	f000 fdd1 	bl	8000d8e <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m2(htim1, TIM_CHANNEL_3, htim1, TIM_CHANNEL_4, 200, 900);
 80001ec:	4eb6      	ldr	r6, [pc, #728]	; (80004c8 <main+0x354>)
 80001ee:	f207 7874 	addw	r8, r7, #1908	; 0x774
 80001f2:	f44f 7361 	mov.w	r3, #900	; 0x384
 80001f6:	9324      	str	r3, [sp, #144]	; 0x90
 80001f8:	23c8      	movs	r3, #200	; 0xc8
 80001fa:	9323      	str	r3, [sp, #140]	; 0x8c
 80001fc:	230c      	movs	r3, #12
 80001fe:	9322      	str	r3, [sp, #136]	; 0x88
 8000200:	4ab1      	ldr	r2, [pc, #708]	; (80004c8 <main+0x354>)
 8000202:	ab10      	add	r3, sp, #64	; 0x40
 8000204:	4611      	mov	r1, r2
 8000206:	2248      	movs	r2, #72	; 0x48
 8000208:	4618      	mov	r0, r3
 800020a:	f003 fe65 	bl	8003ed8 <memcpy>
 800020e:	2308      	movs	r3, #8
 8000210:	930f      	str	r3, [sp, #60]	; 0x3c
 8000212:	466d      	mov	r5, sp
 8000214:	f106 040c 	add.w	r4, r6, #12
 8000218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800021a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800021c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800021e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000224:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000228:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800022c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000230:	4640      	mov	r0, r8
 8000232:	f000 fdac 	bl	8000d8e <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m3(htim2, TIM_CHANNEL_1, htim2, TIM_CHANNEL_2, 200, 900);
 8000236:	4ea5      	ldr	r6, [pc, #660]	; (80004cc <main+0x358>)
 8000238:	f207 58d4 	addw	r8, r7, #1492	; 0x5d4
 800023c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000240:	9324      	str	r3, [sp, #144]	; 0x90
 8000242:	23c8      	movs	r3, #200	; 0xc8
 8000244:	9323      	str	r3, [sp, #140]	; 0x8c
 8000246:	2304      	movs	r3, #4
 8000248:	9322      	str	r3, [sp, #136]	; 0x88
 800024a:	4aa0      	ldr	r2, [pc, #640]	; (80004cc <main+0x358>)
 800024c:	ab10      	add	r3, sp, #64	; 0x40
 800024e:	4611      	mov	r1, r2
 8000250:	2248      	movs	r2, #72	; 0x48
 8000252:	4618      	mov	r0, r3
 8000254:	f003 fe40 	bl	8003ed8 <memcpy>
 8000258:	2300      	movs	r3, #0
 800025a:	930f      	str	r3, [sp, #60]	; 0x3c
 800025c:	466d      	mov	r5, sp
 800025e:	f106 040c 	add.w	r4, r6, #12
 8000262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800026a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800026c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800026e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000272:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000276:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800027a:	4640      	mov	r0, r8
 800027c:	f000 fd87 	bl	8000d8e <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m4(htim2, TIM_CHANNEL_3, htim2, TIM_CHANNEL_4, 200, 250);
 8000280:	4e92      	ldr	r6, [pc, #584]	; (80004cc <main+0x358>)
 8000282:	f207 4834 	addw	r8, r7, #1076	; 0x434
 8000286:	23fa      	movs	r3, #250	; 0xfa
 8000288:	9324      	str	r3, [sp, #144]	; 0x90
 800028a:	23c8      	movs	r3, #200	; 0xc8
 800028c:	9323      	str	r3, [sp, #140]	; 0x8c
 800028e:	230c      	movs	r3, #12
 8000290:	9322      	str	r3, [sp, #136]	; 0x88
 8000292:	4a8e      	ldr	r2, [pc, #568]	; (80004cc <main+0x358>)
 8000294:	ab10      	add	r3, sp, #64	; 0x40
 8000296:	4611      	mov	r1, r2
 8000298:	2248      	movs	r2, #72	; 0x48
 800029a:	4618      	mov	r0, r3
 800029c:	f003 fe1c 	bl	8003ed8 <memcpy>
 80002a0:	2308      	movs	r3, #8
 80002a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80002a4:	466d      	mov	r5, sp
 80002a6:	f106 040c 	add.w	r4, r6, #12
 80002aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80002ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80002be:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80002c2:	4640      	mov	r0, r8
 80002c4:	f000 fd63 	bl	8000d8e <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m5(htim3, TIM_CHANNEL_1, htim3, TIM_CHANNEL_2, 200, 250);
 80002c8:	4e81      	ldr	r6, [pc, #516]	; (80004d0 <main+0x35c>)
 80002ca:	f507 7825 	add.w	r8, r7, #660	; 0x294
 80002ce:	23fa      	movs	r3, #250	; 0xfa
 80002d0:	9324      	str	r3, [sp, #144]	; 0x90
 80002d2:	23c8      	movs	r3, #200	; 0xc8
 80002d4:	9323      	str	r3, [sp, #140]	; 0x8c
 80002d6:	2304      	movs	r3, #4
 80002d8:	9322      	str	r3, [sp, #136]	; 0x88
 80002da:	4a7d      	ldr	r2, [pc, #500]	; (80004d0 <main+0x35c>)
 80002dc:	ab10      	add	r3, sp, #64	; 0x40
 80002de:	4611      	mov	r1, r2
 80002e0:	2248      	movs	r2, #72	; 0x48
 80002e2:	4618      	mov	r0, r3
 80002e4:	f003 fdf8 	bl	8003ed8 <memcpy>
 80002e8:	2300      	movs	r3, #0
 80002ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80002ec:	466d      	mov	r5, sp
 80002ee:	f106 040c 	add.w	r4, r6, #12
 80002f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000302:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000306:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800030a:	4640      	mov	r0, r8
 800030c:	f000 fd3f 	bl	8000d8e <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m6(htim3, TIM_CHANNEL_3, htim3, TIM_CHANNEL_4, 200, 250);
 8000310:	4e6f      	ldr	r6, [pc, #444]	; (80004d0 <main+0x35c>)
 8000312:	f107 08f4 	add.w	r8, r7, #244	; 0xf4
 8000316:	23fa      	movs	r3, #250	; 0xfa
 8000318:	9324      	str	r3, [sp, #144]	; 0x90
 800031a:	23c8      	movs	r3, #200	; 0xc8
 800031c:	9323      	str	r3, [sp, #140]	; 0x8c
 800031e:	230c      	movs	r3, #12
 8000320:	9322      	str	r3, [sp, #136]	; 0x88
 8000322:	4a6b      	ldr	r2, [pc, #428]	; (80004d0 <main+0x35c>)
 8000324:	ab10      	add	r3, sp, #64	; 0x40
 8000326:	4611      	mov	r1, r2
 8000328:	2248      	movs	r2, #72	; 0x48
 800032a:	4618      	mov	r0, r3
 800032c:	f003 fdd4 	bl	8003ed8 <memcpy>
 8000330:	2308      	movs	r3, #8
 8000332:	930f      	str	r3, [sp, #60]	; 0x3c
 8000334:	466d      	mov	r5, sp
 8000336:	f106 040c 	add.w	r4, r6, #12
 800033a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800033c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000346:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800034a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800034e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000352:	4640      	mov	r0, r8
 8000354:	f000 fd1b 	bl	8000d8e <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  /**
   * Starts ADC for all 6 joints and stores most current
   * values of joints in the given array (rawadc)
   * independently from the main loop.
   */
  HAL_ADC_Start_DMA(&hadc1, rawadc, 6);
 8000358:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800035c:	2206      	movs	r2, #6
 800035e:	4619      	mov	r1, r3
 8000360:	485c      	ldr	r0, [pc, #368]	; (80004d4 <main+0x360>)
 8000362:	f001 fadb 	bl	800191c <HAL_ADC_Start_DMA>

  HAL_Delay(20);
 8000366:	2014      	movs	r0, #20
 8000368:	f001 f9dc 	bl	8001724 <HAL_Delay>
  m1.init(rawadc[0]);
 800036c:	f8d7 2ab4 	ldr.w	r2, [r7, #2740]	; 0xab4
 8000370:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8000374:	4611      	mov	r1, r2
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fd75 	bl	8000e66 <_ZN5Motor4initEm>
  m2.init(rawadc[1]);
 800037c:	f8d7 2ab8 	ldr.w	r2, [r7, #2744]	; 0xab8
 8000380:	f207 7374 	addw	r3, r7, #1908	; 0x774
 8000384:	4611      	mov	r1, r2
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fd6d 	bl	8000e66 <_ZN5Motor4initEm>
  m3.init(rawadc[2]);
 800038c:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 8000390:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8000394:	4611      	mov	r1, r2
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fd65 	bl	8000e66 <_ZN5Motor4initEm>
  m4.init(rawadc[3]);
 800039c:	f8d7 2ac0 	ldr.w	r2, [r7, #2752]	; 0xac0
 80003a0:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80003a4:	4611      	mov	r1, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fd5d 	bl	8000e66 <_ZN5Motor4initEm>
  m5.init(rawadc[4]);
 80003ac:	f8d7 2ac4 	ldr.w	r2, [r7, #2756]	; 0xac4
 80003b0:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80003b4:	4611      	mov	r1, r2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fd55 	bl	8000e66 <_ZN5Motor4initEm>
  m6.init(rawadc[5]);
 80003bc:	f8d7 2ac8 	ldr.w	r2, [r7, #2760]	; 0xac8
 80003c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80003c4:	4611      	mov	r1, r2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 fd4d 	bl	8000e66 <_ZN5Motor4initEm>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003cc:	2100      	movs	r1, #0
 80003ce:	483e      	ldr	r0, [pc, #248]	; (80004c8 <main+0x354>)
 80003d0:	f002 ff36 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003d4:	2104      	movs	r1, #4
 80003d6:	483c      	ldr	r0, [pc, #240]	; (80004c8 <main+0x354>)
 80003d8:	f002 ff32 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80003dc:	2108      	movs	r1, #8
 80003de:	483a      	ldr	r0, [pc, #232]	; (80004c8 <main+0x354>)
 80003e0:	f002 ff2e 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80003e4:	210c      	movs	r1, #12
 80003e6:	4838      	ldr	r0, [pc, #224]	; (80004c8 <main+0x354>)
 80003e8:	f002 ff2a 	bl	8003240 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003ec:	2100      	movs	r1, #0
 80003ee:	4837      	ldr	r0, [pc, #220]	; (80004cc <main+0x358>)
 80003f0:	f002 ff26 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003f4:	2104      	movs	r1, #4
 80003f6:	4835      	ldr	r0, [pc, #212]	; (80004cc <main+0x358>)
 80003f8:	f002 ff22 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80003fc:	2108      	movs	r1, #8
 80003fe:	4833      	ldr	r0, [pc, #204]	; (80004cc <main+0x358>)
 8000400:	f002 ff1e 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000404:	210c      	movs	r1, #12
 8000406:	4831      	ldr	r0, [pc, #196]	; (80004cc <main+0x358>)
 8000408:	f002 ff1a 	bl	8003240 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800040c:	2100      	movs	r1, #0
 800040e:	4830      	ldr	r0, [pc, #192]	; (80004d0 <main+0x35c>)
 8000410:	f002 ff16 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000414:	2104      	movs	r1, #4
 8000416:	482e      	ldr	r0, [pc, #184]	; (80004d0 <main+0x35c>)
 8000418:	f002 ff12 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800041c:	2108      	movs	r1, #8
 800041e:	482c      	ldr	r0, [pc, #176]	; (80004d0 <main+0x35c>)
 8000420:	f002 ff0e 	bl	8003240 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000424:	210c      	movs	r1, #12
 8000426:	482a      	ldr	r0, [pc, #168]	; (80004d0 <main+0x35c>)
 8000428:	f002 ff0a 	bl	8003240 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_ConfigChannel(htim, sConfig, Channel)
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int goal = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
//	  m1.tick(rawadc[0]);

//	  m2.setGoalPosCents(100);
//	  m2.tick(rawadc[1]);

	  m3.setGoalPosCents(goal);
 8000432:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8000436:	f8d7 1b4c 	ldr.w	r1, [r7, #2892]	; 0xb4c
 800043a:	4618      	mov	r0, r3
 800043c:	f000 fd05 	bl	8000e4a <_ZN5Motor15setGoalPosCentsEi>
	  m3.tick(rawadc[2]);
 8000440:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 8000444:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8000448:	4611      	mov	r1, r2
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fd5d 	bl	8000f0a <_ZN5Motor4tickEm>




	  uint32_t millis = HAL_GetTick();
 8000450:	f001 f95e 	bl	8001710 <HAL_GetTick>
 8000454:	f8c7 0b38 	str.w	r0, [r7, #2872]	; 0xb38

	  sprintf(msg, "%d\t%4" PRIu32 "\t%4" PRIu32 "\t%d\r\n", goal, millis,rawadc[2], m3.getCurrentPosCents(rawadc[2]));
 8000458:	f8d7 4abc 	ldr.w	r4, [r7, #2748]	; 0xabc
 800045c:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 8000460:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8000464:	4611      	mov	r1, r2
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fcd2 	bl	8000e10 <_ZN5Motor18getCurrentPosCentsEm>
 800046c:	4603      	mov	r3, r0
 800046e:	f607 20cc 	addw	r0, r7, #2764	; 0xacc
 8000472:	9301      	str	r3, [sp, #4]
 8000474:	9400      	str	r4, [sp, #0]
 8000476:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 800047a:	f8d7 2b4c 	ldr.w	r2, [r7, #2892]	; 0xb4c
 800047e:	4916      	ldr	r1, [pc, #88]	; (80004d8 <main+0x364>)
 8000480:	f003 fd40 	bl	8003f04 <siprintf>
//	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	  int *getstepsa = m3.getSteps();
 8000484:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fe67 	bl	800015c <_ZN5Motor8getStepsEv>
 800048e:	f8c7 0b48 	str.w	r0, [r7, #2888]	; 0xb48
	  int getsteps[number_of_steps];
	  for (int i=0; i<number_of_steps; i++){
 8000492:	2300      	movs	r3, #0
 8000494:	f8c7 3b44 	str.w	r3, [r7, #2884]	; 0xb44
 8000498:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800049c:	2b3b      	cmp	r3, #59	; 0x3b
 800049e:	dc1d      	bgt.n	80004dc <main+0x368>
		  getsteps[i] = *getstepsa;
 80004a0:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80004a4:	6819      	ldr	r1, [r3, #0]
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	f8d7 2b44 	ldr.w	r2, [r7, #2884]	; 0xb44
 80004ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  getstepsa = getstepsa+1;
 80004b0:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 80004b4:	3304      	adds	r3, #4
 80004b6:	f8c7 3b48 	str.w	r3, [r7, #2888]	; 0xb48
	  for (int i=0; i<number_of_steps; i++){
 80004ba:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 80004be:	3301      	adds	r3, #1
 80004c0:	f8c7 3b44 	str.w	r3, [r7, #2884]	; 0xb44
 80004c4:	e7e8      	b.n	8000498 <main+0x324>
 80004c6:	bf00      	nop
 80004c8:	20000100 	.word	0x20000100
 80004cc:	20000148 	.word	0x20000148
 80004d0:	20000190 	.word	0x20000190
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	08004774 	.word	0x08004774
	  }

	  if(m3.getCurrentPosCents(rawadc[2]) > 98 && m3.getCurrentPosCents(rawadc[2]) < 102){
 80004dc:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 80004e0:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 80004e4:	4611      	mov	r1, r2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fc92 	bl	8000e10 <_ZN5Motor18getCurrentPosCentsEm>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b62      	cmp	r3, #98	; 0x62
 80004f0:	dd0c      	ble.n	800050c <main+0x398>
 80004f2:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 80004f6:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 80004fa:	4611      	mov	r1, r2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fc87 	bl	8000e10 <_ZN5Motor18getCurrentPosCentsEm>
 8000502:	4603      	mov	r3, r0
 8000504:	2b65      	cmp	r3, #101	; 0x65
 8000506:	dc01      	bgt.n	800050c <main+0x398>
 8000508:	2301      	movs	r3, #1
 800050a:	e000      	b.n	800050e <main+0x39a>
 800050c:	2300      	movs	r3, #0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d007      	beq.n	8000522 <main+0x3ae>
		  goal = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
		  getsteps[number_of_steps-1] = 1000;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	  }

	  if(m3.getCurrentPosCents(rawadc[2]) > -2 && m3.getCurrentPosCents(rawadc[2]) < 2){
 8000522:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 8000526:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 800052a:	4611      	mov	r1, r2
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fc6f 	bl	8000e10 <_ZN5Motor18getCurrentPosCentsEm>
 8000532:	4603      	mov	r3, r0
 8000534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000538:	db0c      	blt.n	8000554 <main+0x3e0>
 800053a:	f8d7 2abc 	ldr.w	r2, [r7, #2748]	; 0xabc
 800053e:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8000542:	4611      	mov	r1, r2
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fc63 	bl	8000e10 <_ZN5Motor18getCurrentPosCentsEm>
 800054a:	4603      	mov	r3, r0
 800054c:	2b01      	cmp	r3, #1
 800054e:	dc01      	bgt.n	8000554 <main+0x3e0>
 8000550:	2301      	movs	r3, #1
 8000552:	e000      	b.n	8000556 <main+0x3e2>
 8000554:	2300      	movs	r3, #0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d007      	beq.n	800056a <main+0x3f6>
		  goal = 100;
 800055a:	2364      	movs	r3, #100	; 0x64
 800055c:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
		  getsteps[number_of_steps-1] = 1000;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000566:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	  }

	  bool same = true;
 800056a:	2301      	movs	r3, #1
 800056c:	f887 3b43 	strb.w	r3, [r7, #2883]	; 0xb43
	  int reference = getsteps[0];
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
	  int tolerance = 10;
 8000578:	230a      	movs	r3, #10
 800057a:	f8c7 3b30 	str.w	r3, [r7, #2864]	; 0xb30
	  for (int i=1; i<number_of_steps; i++){
 800057e:	2301      	movs	r3, #1
 8000580:	f8c7 3b3c 	str.w	r3, [r7, #2876]	; 0xb3c
 8000584:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8000588:	2b3b      	cmp	r3, #59	; 0x3b
 800058a:	dc20      	bgt.n	80005ce <main+0x45a>
		  if(getsteps[i] < reference - tolerance || getsteps[i] > reference + tolerance) same = false;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	f8d7 2b3c 	ldr.w	r2, [r7, #2876]	; 0xb3c
 8000592:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000596:	f8d7 1b34 	ldr.w	r1, [r7, #2868]	; 0xb34
 800059a:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800059e:	1acb      	subs	r3, r1, r3
 80005a0:	429a      	cmp	r2, r3
 80005a2:	db0b      	blt.n	80005bc <main+0x448>
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	f8d7 2b3c 	ldr.w	r2, [r7, #2876]	; 0xb3c
 80005aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005ae:	f8d7 1b34 	ldr.w	r1, [r7, #2868]	; 0xb34
 80005b2:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80005b6:	440b      	add	r3, r1
 80005b8:	429a      	cmp	r2, r3
 80005ba:	dd02      	ble.n	80005c2 <main+0x44e>
 80005bc:	2300      	movs	r3, #0
 80005be:	f887 3b43 	strb.w	r3, [r7, #2883]	; 0xb43
	  for (int i=1; i<number_of_steps; i++){
 80005c2:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 80005c6:	3301      	adds	r3, #1
 80005c8:	f8c7 3b3c 	str.w	r3, [r7, #2876]	; 0xb3c
 80005cc:	e7da      	b.n	8000584 <main+0x410>

//	  if(same){
//		  m3.setState(STALLED);
//	  }

	  sprintf(msg,"%8" PRIu32 "\t%d\t%d\t%d\t%d\t%d\t%d\r\n", millis, getsteps[0], getsteps[1], getsteps[2], getsteps[3],getsteps[4], same);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	681e      	ldr	r6, [r3, #0]
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	1d3a      	adds	r2, r7, #4
 80005d8:	6892      	ldr	r2, [r2, #8]
 80005da:	1d39      	adds	r1, r7, #4
 80005dc:	68c9      	ldr	r1, [r1, #12]
 80005de:	1d38      	adds	r0, r7, #4
 80005e0:	6900      	ldr	r0, [r0, #16]
 80005e2:	f897 4b43 	ldrb.w	r4, [r7, #2883]	; 0xb43
 80005e6:	f607 25cc 	addw	r5, r7, #2764	; 0xacc
 80005ea:	9404      	str	r4, [sp, #16]
 80005ec:	9003      	str	r0, [sp, #12]
 80005ee:	9102      	str	r1, [sp, #8]
 80005f0:	9201      	str	r2, [sp, #4]
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	4633      	mov	r3, r6
 80005f6:	f8d7 2b38 	ldr.w	r2, [r7, #2872]	; 0xb38
 80005fa:	4909      	ldr	r1, [pc, #36]	; (8000620 <main+0x4ac>)
 80005fc:	4628      	mov	r0, r5
 80005fe:	f003 fc81 	bl	8003f04 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000602:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fda0 	bl	800014c <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	f607 21cc 	addw	r1, r7, #2764	; 0xacc
 8000614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <main+0x4b0>)
 800061a:	f003 fac9 	bl	8003bb0 <HAL_UART_Transmit>
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
//	  HAL_Delay(200);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800061e:	e708      	b.n	8000432 <main+0x2be>
 8000620:	08004788 	.word	0x08004788
 8000624:	200001d8 	.word	0x200001d8

08000628 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000632:	2228      	movs	r2, #40	; 0x28
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fc5c 	bl	8003ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000674:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f8be 	bl	8002800 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000694:	f000 fb76 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2102      	movs	r1, #2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fb23 	bl	8002d00 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80006ca:	f000 fb5b 	bl	8000d84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ce:	2302      	movs	r3, #2
 80006d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fcaa 	bl	8003034 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf14      	ite	ne
 80006e6:	2301      	movne	r3, #1
 80006e8:	2300      	moveq	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80006f0:	f000 fb48 	bl	8000d84 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	; 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800070c:	4b4d      	ldr	r3, [pc, #308]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 800070e:	4a4e      	ldr	r2, [pc, #312]	; (8000848 <_ZL12MX_ADC1_Initv+0x14c>)
 8000710:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000712:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 8000714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000718:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800071a:	4b4a      	ldr	r3, [pc, #296]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 800071c:	2201      	movs	r2, #1
 800071e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b48      	ldr	r3, [pc, #288]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 8000722:	2200      	movs	r2, #0
 8000724:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b47      	ldr	r3, [pc, #284]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 8000728:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800072c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072e:	4b45      	ldr	r3, [pc, #276]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000734:	4b43      	ldr	r3, [pc, #268]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 8000736:	2206      	movs	r2, #6
 8000738:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073a:	4842      	ldr	r0, [pc, #264]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 800073c:	f001 f816 	bl	800176c <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8000750:	f000 fb18 	bl	8000d84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000754:	2302      	movs	r3, #2
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000758:	2301      	movs	r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4837      	ldr	r0, [pc, #220]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 8000766:	f001 f9d3 	bl	8001b10 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	bf14      	ite	ne
 8000770:	2301      	movne	r3, #1
 8000772:	2300      	moveq	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 800077a:	f000 fb03 	bl	8000d84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800077e:	2303      	movs	r3, #3
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000782:	2302      	movs	r3, #2
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	482e      	ldr	r0, [pc, #184]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 800078c:	f001 f9c0 	bl	8001b10 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 80007a0:	f000 faf0 	bl	8000d84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007a8:	2303      	movs	r3, #3
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4824      	ldr	r0, [pc, #144]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 80007b2:	f001 f9ad 	bl	8001b10 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf14      	ite	ne
 80007bc:	2301      	movne	r3, #1
 80007be:	2300      	moveq	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 80007c6:	f000 fadd 	bl	8000d84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007ca:	2305      	movs	r3, #5
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80007ce:	2304      	movs	r3, #4
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	481b      	ldr	r0, [pc, #108]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 80007d8:	f001 f99a 	bl	8001b10 <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <_ZL12MX_ADC1_Initv+0xf4>
  {
    Error_Handler();
 80007ec:	f000 faca 	bl	8000d84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007f0:	2306      	movs	r3, #6
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80007f4:	2305      	movs	r3, #5
 80007f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4811      	ldr	r0, [pc, #68]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 80007fe:	f001 f987 	bl	8001b10 <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf14      	ite	ne
 8000808:	2301      	movne	r3, #1
 800080a:	2300      	moveq	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <_ZL12MX_ADC1_Initv+0x11a>
  {
    Error_Handler();
 8000812:	f000 fab7 	bl	8000d84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000816:	2307      	movs	r3, #7
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800081a:	2306      	movs	r3, #6
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4808      	ldr	r0, [pc, #32]	; (8000844 <_ZL12MX_ADC1_Initv+0x148>)
 8000824:	f001 f974 	bl	8001b10 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <_ZL12MX_ADC1_Initv+0x140>
  {
    Error_Handler();
 8000838:	f000 faa4 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000008c 	.word	0x2000008c
 8000848:	40012400 	.word	0x40012400

0800084c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b092      	sub	sp, #72	; 0x48
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
 800086e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2220      	movs	r2, #32
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 fb3c 	bl	8003ef4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800087c:	4b56      	ldr	r3, [pc, #344]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 800087e:	4a57      	ldr	r2, [pc, #348]	; (80009dc <_ZL12MX_TIM1_Initv+0x190>)
 8000880:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000882:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 8000884:	2240      	movs	r2, #64	; 0x40
 8000886:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b53      	ldr	r3, [pc, #332]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800088e:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 8000890:	22ff      	movs	r2, #255	; 0xff
 8000892:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a6:	484c      	ldr	r0, [pc, #304]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 80008a8:	f002 fc7a 	bl	80031a0 <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	bf14      	ite	ne
 80008b2:	2301      	movne	r3, #1
 80008b4:	2300      	moveq	r3, #0
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 80008bc:	f000 fa62 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008cc:	4619      	mov	r1, r3
 80008ce:	4842      	ldr	r0, [pc, #264]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 80008d0:	f003 f878 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 80008e4:	f000 fa4e 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e8:	2360      	movs	r3, #96	; 0x60
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	2200      	movs	r2, #0
 800090a:	4619      	mov	r1, r3
 800090c:	4832      	ldr	r0, [pc, #200]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 800090e:	f002 fd97 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8000922:	f000 fa2f 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	2204      	movs	r2, #4
 800092c:	4619      	mov	r1, r3
 800092e:	482a      	ldr	r0, [pc, #168]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 8000930:	f002 fd86 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <_ZL12MX_TIM1_Initv+0xfc>
  {
    Error_Handler();
 8000944:	f000 fa1e 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	2208      	movs	r2, #8
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 8000952:	f002 fd75 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf14      	ite	ne
 800095c:	2301      	movne	r3, #1
 800095e:	2300      	moveq	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <_ZL12MX_TIM1_Initv+0x11e>
  {
    Error_Handler();
 8000966:	f000 fa0d 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	220c      	movs	r2, #12
 8000970:	4619      	mov	r1, r3
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 8000974:	f002 fd64 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf14      	ite	ne
 800097e:	2301      	movne	r3, #1
 8000980:	2300      	moveq	r3, #0
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <_ZL12MX_TIM1_Initv+0x140>
  {
    Error_Handler();
 8000988:	f000 f9fc 	bl	8000d84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	480a      	ldr	r0, [pc, #40]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 80009b0:	f003 f860 	bl	8003a74 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf14      	ite	ne
 80009ba:	2301      	movne	r3, #1
 80009bc:	2300      	moveq	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <_ZL12MX_TIM1_Initv+0x17c>
  {
    Error_Handler();
 80009c4:	f000 f9de 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <_ZL12MX_TIM1_Initv+0x18c>)
 80009ca:	f000 fca9 	bl	8001320 <HAL_TIM_MspPostInit>

}
 80009ce:	bf00      	nop
 80009d0:	3748      	adds	r7, #72	; 0x48
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000100 	.word	0x20000100
 80009dc:	40012c00 	.word	0x40012c00

080009e0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
 80009fe:	615a      	str	r2, [r3, #20]
 8000a00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a02:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000a16:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a18:	22ff      	movs	r2, #255	; 0xff
 8000a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a28:	4837      	ldr	r0, [pc, #220]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a2a:	f002 fbb9 	bl	80031a0 <HAL_TIM_PWM_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf14      	ite	ne
 8000a34:	2301      	movne	r3, #1
 8000a36:	2300      	moveq	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000a3e:	f000 f9a1 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	4619      	mov	r1, r3
 8000a50:	482d      	ldr	r0, [pc, #180]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a52:	f002 ffb7 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bf14      	ite	ne
 8000a5c:	2301      	movne	r3, #1
 8000a5e:	2300      	moveq	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8000a66:	f000 f98d 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6a:	2360      	movs	r3, #96	; 0x60
 8000a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4821      	ldr	r0, [pc, #132]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000a82:	f002 fcdd 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 8000a96:	f000 f975 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4819      	ldr	r0, [pc, #100]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000aa2:	f002 fccd 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf14      	ite	ne
 8000aac:	2301      	movne	r3, #1
 8000aae:	2300      	moveq	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000ab6:	f000 f965 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2208      	movs	r2, #8
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000ac2:	f002 fcbd 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 8000ad6:	f000 f955 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	220c      	movs	r2, #12
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000ae2:	f002 fcad 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf14      	ite	ne
 8000aec:	2301      	movne	r3, #1
 8000aee:	2300      	moveq	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <_ZL12MX_TIM2_Initv+0x11a>
  {
    Error_Handler();
 8000af6:	f000 f945 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <_ZL12MX_TIM2_Initv+0x128>)
 8000afc:	f000 fc10 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000148 	.word	0x20000148

08000b0c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000b30:	4a41      	ldr	r2, [pc, #260]	; (8000c38 <_ZL12MX_TIM3_Initv+0x12c>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000b34:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000b36:	2240      	movs	r2, #64	; 0x40
 8000b38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000b40:	4b3c      	ldr	r3, [pc, #240]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4c:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b52:	4838      	ldr	r0, [pc, #224]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000b54:	f002 fb24 	bl	80031a0 <HAL_TIM_PWM_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8000b68:	f000 f90c 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482e      	ldr	r0, [pc, #184]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000b7c:	f002 ff22 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8000b90:	f000 f8f8 	bl	8000d84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b94:	2360      	movs	r3, #96	; 0x60
 8000b96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4822      	ldr	r0, [pc, #136]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000bac:	f002 fc48 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 8000bc0:	f000 f8e0 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481a      	ldr	r0, [pc, #104]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000bcc:	f002 fc38 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf14      	ite	ne
 8000bd6:	2301      	movne	r3, #1
 8000bd8:	2300      	moveq	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000be0:	f000 f8d0 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2208      	movs	r2, #8
 8000be8:	4619      	mov	r1, r3
 8000bea:	4812      	ldr	r0, [pc, #72]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000bec:	f002 fc28 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 8000c00:	f000 f8c0 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	220c      	movs	r2, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000c0c:	f002 fc18 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf14      	ite	ne
 8000c16:	2301      	movne	r3, #1
 8000c18:	2300      	moveq	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <_ZL12MX_TIM3_Initv+0x118>
  {
    Error_Handler();
 8000c20:	f000 f8b0 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <_ZL12MX_TIM3_Initv+0x128>)
 8000c26:	f000 fb7b 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000190 	.word	0x20000190
 8000c38:	40000400 	.word	0x40000400

08000c3c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c42:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000c74:	f002 ff4f 	bl	8003b16 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf14      	ite	ne
 8000c7e:	2301      	movne	r3, #1
 8000c80:	2300      	moveq	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000c88:	f000 f87c 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200001d8 	.word	0x200001d8
 8000c94:	40013800 	.word	0x40013800

08000c98 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <_ZL11MX_DMA_Initv+0x38>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <_ZL11MX_DMA_Initv+0x38>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <_ZL11MX_DMA_Initv+0x38>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	200b      	movs	r0, #11
 8000cbc:	f001 f9e9 	bl	8002092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cc0:	200b      	movs	r0, #11
 8000cc2:	f001 fa02 	bl	80020ca <HAL_NVIC_EnableIRQ>

}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d06:	f043 0320 	orr.w	r3, r3, #32
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <_ZL12MX_GPIO_Initv+0xa8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <_ZL12MX_GPIO_Initv+0xac>)
 8000d50:	f001 fd3e 	bl	80027d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <_ZL12MX_GPIO_Initv+0xac>)
 8000d6e:	f001 fbb5 	bl	80024dc <HAL_GPIO_Init>

}
 8000d72:	bf00      	nop
 8000d74:	3720      	adds	r7, #32
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40011000 	.word	0x40011000

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>

08000d8e <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>:
#include "main.h"



// Date constructor
Motor::Motor(TIM_HandleTypeDef port_A, uint16_t pin_A, TIM_HandleTypeDef port_B, uint16_t pin_B, int min_pos, int max_pos)
 8000d8e:	b084      	sub	sp, #16
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	f107 0014 	add.w	r0, r7, #20
 8000d9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
{
	//Ports
    portA = port_A;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2248      	movs	r2, #72	; 0x48
 8000daa:	4619      	mov	r1, r3
 8000dac:	f003 f894 	bl	8003ed8 <memcpy>
    pinA  = pin_A;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8000db6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    portB = port_B;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	334c      	adds	r3, #76	; 0x4c
 8000dbe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000dc2:	2248      	movs	r2, #72	; 0x48
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 f887 	bl	8003ed8 <memcpy>
    pinB  = pin_B;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8000dd0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

    //Constrains
    minp  = min_pos;
 8000dd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    maxp  = max_pos;
 8000dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    //Math
    deltaRaw = int(max_pos) - int(min_pos);
 8000de8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000df0:	1ad2      	subs	r2, r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    //Auto-stop
    state = READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e0c:	b004      	add	sp, #16
 8000e0e:	4770      	bx	lr

08000e10 <_ZN5Motor18getCurrentPosCentsEm>:

/**
 * ALL THE SETS AND GETS HERE
 * */

int Motor::getCurrentPosCents(uint32_t raw_adc_val){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
//    currentPosCents = map(this->getCurrentPos(), minp, maxp, 0, 100);
	currentPosCents = 100 * (int(raw_adc_val) - int(minp)) / deltaRaw;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	2264      	movs	r2, #100	; 0x64
 8000e26:	fb02 f203 	mul.w	r2, r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000e30:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return currentPosCents;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <_ZN5Motor15setGoalPosCentsEi>:

void Motor::setGoalPosCents(int goal){
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	goalPosCents = goal;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <_ZN5Motor4initEm>:

void Motor::init(uint32_t init){
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
	int current = this->getCurrentPosCents(init);
 8000e70:	6839      	ldr	r1, [r7, #0]
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffcc 	bl	8000e10 <_ZN5Motor18getCurrentPosCentsEm>
 8000e78:	60b8      	str	r0, [r7, #8]
	for (int i=0; i<number_of_steps;i++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b3b      	cmp	r3, #59	; 0x3b
 8000e82:	dc09      	bgt.n	8000e98 <_ZN5Motor4initEm+0x32>
		steps[i]=current;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	322c      	adds	r2, #44	; 0x2c
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i=0; i<number_of_steps;i++){
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3301      	adds	r3, #1
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	e7f2      	b.n	8000e7e <_ZN5Motor4initEm+0x18>
	}
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b088      	sub	sp, #32
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000eac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm TIM_OC_InitTypeDef sConfigOC;
 8000eb0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000eb2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000eb6:	f002 fa5f 	bl	8003378 <HAL_TIM_PWM_Stop>
timer.Init.Period = period; // set the period duration HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8000eba:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000ebe:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed2:	2360      	movs	r3, #96	; 0x60
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = pulse;              // set the pulse duration
 8000ed6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000eda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000eee:	f002 faa7 	bl	8003440 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&timer, channel);   // start pwm generation
 8000ef2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000ef4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000ef8:	f002 f9a2 	bl	8003240 <HAL_TIM_PWM_Start>
}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f06:	b004      	add	sp, #16
 8000f08:	4770      	bx	lr

08000f0a <_ZN5Motor4tickEm>:

void Motor::tick(uint32_t curr){
 8000f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0c:	b097      	sub	sp, #92	; 0x5c
 8000f0e:	af12      	add	r7, sp, #72	; 0x48
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
	if(state == READY){
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 80e1 	bne.w	80010e2 <_ZN5Motor4tickEm+0x1d8>
		int given = 100 * (int(curr) - int(minp)) / deltaRaw;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	2264      	movs	r2, #100	; 0x64
 8000f2c:	fb02 f203 	mul.w	r2, r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f3a:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i<number_of_steps-1; i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b3a      	cmp	r3, #58	; 0x3a
 8000f44:	dc0e      	bgt.n	8000f64 <_ZN5Motor4tickEm+0x5a>
			steps[i]=steps[i+1];
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	322c      	adds	r2, #44	; 0x2c
 8000f4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	322c      	adds	r2, #44	; 0x2c
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 0; i<number_of_steps-1; i++){
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e7ed      	b.n	8000f40 <_ZN5Motor4tickEm+0x36>
		}
		steps[number_of_steps-1]=curr;
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		// TOD PID
		//	int local_delta = given - goalPosCents;

		if(given > goalPosCents - 2 && given < goalPosCents + 2){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f72:	3b01      	subs	r3, #1
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	db3e      	blt.n	8000ff8 <_ZN5Motor4tickEm+0xee>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000f80:	3301      	adds	r3, #1
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dc37      	bgt.n	8000ff8 <_ZN5Motor4tickEm+0xee>
			setPWM(portA, pinA, 255, 0);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000f8e:	461a      	mov	r2, r3
 8000f90:	687e      	ldr	r6, [r7, #4]
 8000f92:	2300      	movs	r3, #0
 8000f94:	9310      	str	r3, [sp, #64]	; 0x40
 8000f96:	23ff      	movs	r3, #255	; 0xff
 8000f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f9a:	920e      	str	r2, [sp, #56]	; 0x38
 8000f9c:	466d      	mov	r5, sp
 8000f9e:	f106 0410 	add.w	r4, r6, #16
 8000fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fba:	f7ff ff71 	bl	8000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>
			setPWM(portB, pinB, 255, 0);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687e      	ldr	r6, [r7, #4]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9310      	str	r3, [sp, #64]	; 0x40
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8000fd0:	920e      	str	r2, [sp, #56]	; 0x38
 8000fd2:	466d      	mov	r5, sp
 8000fd4:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8000fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fec:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8000ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff2:	f7ff ff55 	bl	8000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>
 8000ff6:	e074      	b.n	80010e2 <_ZN5Motor4tickEm+0x1d8>
		}else	if(given > goalPosCents){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	429a      	cmp	r2, r3
 8001002:	dd37      	ble.n	8001074 <_ZN5Motor4tickEm+0x16a>
			setPWM(portA, pinA, 255, 255);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800100a:	461a      	mov	r2, r3
 800100c:	687e      	ldr	r6, [r7, #4]
 800100e:	23ff      	movs	r3, #255	; 0xff
 8001010:	9310      	str	r3, [sp, #64]	; 0x40
 8001012:	23ff      	movs	r3, #255	; 0xff
 8001014:	930f      	str	r3, [sp, #60]	; 0x3c
 8001016:	920e      	str	r2, [sp, #56]	; 0x38
 8001018:	466d      	mov	r5, sp
 800101a:	f106 0410 	add.w	r4, r6, #16
 800101e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800102e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001032:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001036:	f7ff ff33 	bl	8000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>
			setPWM(portB, pinB, 255, 0);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001040:	461a      	mov	r2, r3
 8001042:	687e      	ldr	r6, [r7, #4]
 8001044:	2300      	movs	r3, #0
 8001046:	9310      	str	r3, [sp, #64]	; 0x40
 8001048:	23ff      	movs	r3, #255	; 0xff
 800104a:	930f      	str	r3, [sp, #60]	; 0x3c
 800104c:	920e      	str	r2, [sp, #56]	; 0x38
 800104e:	466d      	mov	r5, sp
 8001050:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8001054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001064:	e885 0003 	stmia.w	r5, {r0, r1}
 8001068:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 800106c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106e:	f7ff ff17 	bl	8000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>
 8001072:	e036      	b.n	80010e2 <_ZN5Motor4tickEm+0x1d8>
		}else{
			setPWM(portA, pinA, 255, 0);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800107a:	461a      	mov	r2, r3
 800107c:	687e      	ldr	r6, [r7, #4]
 800107e:	2300      	movs	r3, #0
 8001080:	9310      	str	r3, [sp, #64]	; 0x40
 8001082:	23ff      	movs	r3, #255	; 0xff
 8001084:	930f      	str	r3, [sp, #60]	; 0x3c
 8001086:	920e      	str	r2, [sp, #56]	; 0x38
 8001088:	466d      	mov	r5, sp
 800108a:	f106 0410 	add.w	r4, r6, #16
 800108e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800109e:	e885 0003 	stmia.w	r5, {r0, r1}
 80010a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010a6:	f7ff fefb 	bl	8000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>
			setPWM(portB, pinB, 255, 255);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80010b0:	461a      	mov	r2, r3
 80010b2:	687e      	ldr	r6, [r7, #4]
 80010b4:	23ff      	movs	r3, #255	; 0xff
 80010b6:	9310      	str	r3, [sp, #64]	; 0x40
 80010b8:	23ff      	movs	r3, #255	; 0xff
 80010ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80010bc:	920e      	str	r2, [sp, #56]	; 0x38
 80010be:	466d      	mov	r5, sp
 80010c0:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d8:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 80010dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010de:	f7ff fedf 	bl	8000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>
		}
	}

	if (state == STALLED){
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d136      	bne.n	800115a <_ZN5Motor4tickEm+0x250>
		setPWM(portA, pinA, 255, 0);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80010f2:	461a      	mov	r2, r3
 80010f4:	687e      	ldr	r6, [r7, #4]
 80010f6:	2300      	movs	r3, #0
 80010f8:	9310      	str	r3, [sp, #64]	; 0x40
 80010fa:	23ff      	movs	r3, #255	; 0xff
 80010fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80010fe:	920e      	str	r2, [sp, #56]	; 0x38
 8001100:	466d      	mov	r5, sp
 8001102:	f106 0410 	add.w	r4, r6, #16
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001112:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001116:	e885 0003 	stmia.w	r5, {r0, r1}
 800111a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800111e:	f7ff febf 	bl	8000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>
		setPWM(portB, pinB, 255, 0);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8001128:	461a      	mov	r2, r3
 800112a:	687e      	ldr	r6, [r7, #4]
 800112c:	2300      	movs	r3, #0
 800112e:	9310      	str	r3, [sp, #64]	; 0x40
 8001130:	23ff      	movs	r3, #255	; 0xff
 8001132:	930f      	str	r3, [sp, #60]	; 0x3c
 8001134:	920e      	str	r2, [sp, #56]	; 0x38
 8001136:	466d      	mov	r5, sp
 8001138:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 800113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800114c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001150:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8001154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001156:	f7ff fea3 	bl	8000ea0 <_Z6setPWM17TIM_HandleTypeDefmtt>
	}
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_MspInit+0x5c>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <HAL_MspInit+0x5c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x5c>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x5c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_MspInit+0x60>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_MspInit+0x60>)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000

080011c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a28      	ldr	r2, [pc, #160]	; (8001284 <HAL_ADC_MspInit+0xbc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d149      	bne.n	800127c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_ADC_MspInit+0xc0>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a26      	ldr	r2, [pc, #152]	; (8001288 <HAL_ADC_MspInit+0xc0>)
 80011ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_ADC_MspInit+0xc0>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <HAL_ADC_MspInit+0xc0>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a20      	ldr	r2, [pc, #128]	; (8001288 <HAL_ADC_MspInit+0xc0>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <HAL_ADC_MspInit+0xc0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = pot1_Pin|pot2_Pin|pot3_Pin|pot4_Pin
 8001218:	23fc      	movs	r3, #252	; 0xfc
 800121a:	613b      	str	r3, [r7, #16]
                          |pot5_Pin|pot6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121c:	2303      	movs	r3, #3
 800121e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	4819      	ldr	r0, [pc, #100]	; (800128c <HAL_ADC_MspInit+0xc4>)
 8001228:	f001 f958 	bl	80024dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 800122e:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_ADC_MspInit+0xcc>)
 8001230:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 8001246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 800124e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001252:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 8001256:	2220      	movs	r2, #32
 8001258:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 8001262:	f000 ff4d 	bl	8002100 <HAL_DMA_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800126c:	f7ff fd8a 	bl	8000d84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 8001274:	621a      	str	r2, [r3, #32]
 8001276:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_ADC_MspInit+0xc8>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40012400 	.word	0x40012400
 8001288:	40021000 	.word	0x40021000
 800128c:	40010800 	.word	0x40010800
 8001290:	200000bc 	.word	0x200000bc
 8001294:	40020008 	.word	0x40020008

08001298 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_TIM_PWM_MspInit+0x7c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10c      	bne.n	80012c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 80012b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012c2:	e022      	b.n	800130a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012cc:	d10c      	bne.n	80012e8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
}
 80012e6:	e010      	b.n	800130a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_TIM_PWM_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10b      	bne.n	800130a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_TIM_PWM_MspInit+0x80>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40012c00 	.word	0x40012c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40000400 	.word	0x40000400

08001320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a4c      	ldr	r2, [pc, #304]	; (800146c <HAL_TIM_MspPostInit+0x14c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d119      	bne.n	8001374 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b4b      	ldr	r3, [pc, #300]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b48      	ldr	r3, [pc, #288]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1A_Pin|M1B_Pin|M2A_Pin|M2B_Pin;
 8001358:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4619      	mov	r1, r3
 800136c:	4841      	ldr	r0, [pc, #260]	; (8001474 <HAL_TIM_MspPostInit+0x154>)
 800136e:	f001 f8b5 	bl	80024dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001372:	e077      	b.n	8001464 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137c:	d143      	bne.n	8001406 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	4a3b      	ldr	r2, [pc, #236]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6193      	str	r3, [r2, #24]
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	4a35      	ldr	r2, [pc, #212]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6193      	str	r3, [r2, #24]
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3A_Pin|M3B_Pin;
 80013ae:	2303      	movs	r3, #3
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2302      	movs	r3, #2
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4619      	mov	r1, r3
 80013c0:	482c      	ldr	r0, [pc, #176]	; (8001474 <HAL_TIM_MspPostInit+0x154>)
 80013c2:	f001 f88b 	bl	80024dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M4A_Pin|M4B_Pin;
 80013c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2302      	movs	r3, #2
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4619      	mov	r1, r3
 80013da:	4827      	ldr	r0, [pc, #156]	; (8001478 <HAL_TIM_MspPostInit+0x158>)
 80013dc:	f001 f87e 	bl	80024dc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_TIM_MspPostInit+0x15c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80013fe:	4a1f      	ldr	r2, [pc, #124]	; (800147c <HAL_TIM_MspPostInit+0x15c>)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	6053      	str	r3, [r2, #4]
}
 8001404:	e02e      	b.n	8001464 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_TIM_MspPostInit+0x160>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d129      	bne.n	8001464 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a16      	ldr	r2, [pc, #88]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M6A_Pin|M6B_Pin|M5A_Pin|M5B_Pin;
 8001428:	2333      	movs	r3, #51	; 0x33
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2302      	movs	r3, #2
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	4619      	mov	r1, r3
 800143a:	480f      	ldr	r0, [pc, #60]	; (8001478 <HAL_TIM_MspPostInit+0x158>)
 800143c:	f001 f84e 	bl	80024dc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_MspPostInit+0x15c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001450:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_TIM_MspPostInit+0x15c>)
 8001460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001462:	6053      	str	r3, [r2, #4]
}
 8001464:	bf00      	nop
 8001466:	3730      	adds	r7, #48	; 0x30
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40012c00 	.word	0x40012c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40010800 	.word	0x40010800
 8001478:	40010c00 	.word	0x40010c00
 800147c:	40010000 	.word	0x40010000
 8001480:	40000400 	.word	0x40000400

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a22      	ldr	r2, [pc, #136]	; (8001528 <HAL_UART_MspInit+0xa4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d13d      	bne.n	8001520 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a20      	ldr	r2, [pc, #128]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0xa8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4812      	ldr	r0, [pc, #72]	; (8001530 <HAL_UART_MspInit+0xac>)
 80014e8:	f000 fff8 	bl	80024dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <HAL_UART_MspInit+0xac>)
 8001500:	f000 ffec 	bl	80024dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_UART_MspInit+0xb0>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_UART_MspInit+0xb0>)
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40013800 	.word	0x40013800
 800152c:	40021000 	.word	0x40021000
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40010000 	.word	0x40010000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157e:	f000 f8b5 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA1_Channel1_IRQHandler+0x10>)
 800158e:	f000 fe71 	bl	8002274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000bc 	.word	0x200000bc

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f002 fc5a 	bl	8003e84 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20002800 	.word	0x20002800
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000218 	.word	0x20000218
 8001604:	20000238 	.word	0x20000238

08001608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001614:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001616:	e003      	b.n	8001620 <LoopCopyDataInit>

08001618 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800161a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800161c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800161e:	3104      	adds	r1, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001620:	480a      	ldr	r0, [pc, #40]	; (800164c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001624:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001626:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001628:	d3f6      	bcc.n	8001618 <CopyDataInit>
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800162c:	e002      	b.n	8001634 <LoopFillZerobss>

0800162e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001630:	f842 3b04 	str.w	r3, [r2], #4

08001634 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001636:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001638:	d3f9      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800163a:	f7ff ffe5 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f002 fc27 	bl	8003e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7fe fd97 	bl	8000174 <main>
  bx lr
 8001646:	4770      	bx	lr
  ldr r3, =_sidata
 8001648:	08004808 	.word	0x08004808
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001650:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001654:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001658:	20000238 	.word	0x20000238

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x28>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x28>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 fd03 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fd72 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fd1b 	bl	80020e6 <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c8:	f000 fce3 	bl	8002092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x1c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_IncTick+0x20>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_IncTick+0x20>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000008 	.word	0x20000008
 800170c:	20000224 	.word	0x20000224

08001710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <HAL_GetTick+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000224 	.word	0x20000224

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff fff0 	bl	8001710 <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffe0 	bl	8001710 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008

0800176c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0be      	b.n	800190c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fd0c 	bl	80011c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 faf7 	bl	8001da4 <ADC_ConversionStop_Disable>
 80017b6:	4603      	mov	r3, r0
 80017b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 8099 	bne.w	80018fa <HAL_ADC_Init+0x18e>
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 8095 	bne.w	80018fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017d8:	f023 0302 	bic.w	r3, r3, #2
 80017dc:	f043 0202 	orr.w	r2, r3, #2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7b1b      	ldrb	r3, [r3, #12]
 80017f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001804:	d003      	beq.n	800180e <HAL_ADC_Init+0xa2>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d102      	bne.n	8001814 <HAL_ADC_Init+0xa8>
 800180e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001812:	e000      	b.n	8001816 <HAL_ADC_Init+0xaa>
 8001814:	2300      	movs	r3, #0
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7d1b      	ldrb	r3, [r3, #20]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d119      	bne.n	8001858 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7b1b      	ldrb	r3, [r3, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	3b01      	subs	r3, #1
 8001832:	035a      	lsls	r2, r3, #13
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	e00b      	b.n	8001858 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	4b28      	ldr	r3, [pc, #160]	; (8001914 <HAL_ADC_Init+0x1a8>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	430b      	orrs	r3, r1
 800187e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001888:	d003      	beq.n	8001892 <HAL_ADC_Init+0x126>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d104      	bne.n	800189c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	3b01      	subs	r3, #1
 8001898:	051b      	lsls	r3, r3, #20
 800189a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_ADC_Init+0x1ac>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d10b      	bne.n	80018d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	f023 0303 	bic.w	r3, r3, #3
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018d6:	e018      	b.n	800190a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	f023 0312 	bic.w	r3, r3, #18
 80018e0:	f043 0210 	orr.w	r2, r3, #16
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018f8:	e007      	b.n	800190a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800190a:	7dfb      	ldrb	r3, [r7, #23]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	ffe1f7fd 	.word	0xffe1f7fd
 8001918:	ff1f0efe 	.word	0xff1f0efe

0800191c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a64      	ldr	r2, [pc, #400]	; (8001ac4 <HAL_ADC_Start_DMA+0x1a8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d004      	beq.n	8001940 <HAL_ADC_Start_DMA+0x24>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a63      	ldr	r2, [pc, #396]	; (8001ac8 <HAL_ADC_Start_DMA+0x1ac>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d106      	bne.n	800194e <HAL_ADC_Start_DMA+0x32>
 8001940:	4b60      	ldr	r3, [pc, #384]	; (8001ac4 <HAL_ADC_Start_DMA+0x1a8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 80b3 	bne.w	8001ab4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_Start_DMA+0x40>
 8001958:	2302      	movs	r3, #2
 800195a:	e0ae      	b.n	8001aba <HAL_ADC_Start_DMA+0x19e>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f9cb 	bl	8001d00 <ADC_Enable>
 800196a:	4603      	mov	r3, r0
 800196c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f040 809a 	bne.w	8001aaa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <HAL_ADC_Start_DMA+0x1ac>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d105      	bne.n	80019a0 <HAL_ADC_Start_DMA+0x84>
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <HAL_ADC_Start_DMA+0x1a8>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d115      	bne.n	80019cc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d026      	beq.n	8001a08 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ca:	e01d      	b.n	8001a08 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a39      	ldr	r2, [pc, #228]	; (8001ac4 <HAL_ADC_Start_DMA+0x1a8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_ADC_Start_DMA+0xd0>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a38      	ldr	r2, [pc, #224]	; (8001ac8 <HAL_ADC_Start_DMA+0x1ac>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d10d      	bne.n	8001a08 <HAL_ADC_Start_DMA+0xec>
 80019ec:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <HAL_ADC_Start_DMA+0x1a8>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d007      	beq.n	8001a08 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	f023 0206 	bic.w	r2, r3, #6
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_ADC_Start_DMA+0x1b0>)
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_ADC_Start_DMA+0x1b4>)
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <HAL_ADC_Start_DMA+0x1b8>)
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f06f 0202 	mvn.w	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a60:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a18      	ldr	r0, [r3, #32]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	334c      	adds	r3, #76	; 0x4c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f000 fb9f 	bl	80021b4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a84:	d108      	bne.n	8001a98 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a94:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a96:	e00f      	b.n	8001ab8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001aa6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001aa8:	e006      	b.n	8001ab8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001ab2:	e001      	b.n	8001ab8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40012400 	.word	0x40012400
 8001ac8:	40012800 	.word	0x40012800
 8001acc:	08001e19 	.word	0x08001e19
 8001ad0:	08001e95 	.word	0x08001e95
 8001ad4:	08001eb1 	.word	0x08001eb1

08001ad8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x20>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e0dc      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1da>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d81c      	bhi.n	8001b7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b05      	subs	r3, #5
 8001b52:	221f      	movs	r2, #31
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4019      	ands	r1, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3b05      	subs	r3, #5
 8001b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34
 8001b78:	e03c      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d81c      	bhi.n	8001bbc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b23      	subs	r3, #35	; 0x23
 8001b94:	221f      	movs	r2, #31
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4019      	ands	r1, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b23      	subs	r3, #35	; 0x23
 8001bae:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bba:	e01b      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b41      	subs	r3, #65	; 0x41
 8001bce:	221f      	movs	r2, #31
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4019      	ands	r1, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	3b41      	subs	r3, #65	; 0x41
 8001be8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d91c      	bls.n	8001c36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b1e      	subs	r3, #30
 8001c0e:	2207      	movs	r2, #7
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4019      	ands	r1, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6898      	ldr	r0, [r3, #8]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	3b1e      	subs	r3, #30
 8001c28:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	e019      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6919      	ldr	r1, [r3, #16]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	2207      	movs	r2, #7
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6898      	ldr	r0, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d003      	beq.n	8001c7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c76:	2b11      	cmp	r3, #17
 8001c78:	d132      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d125      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d126      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ca0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_ADC_ConfigChannel+0x1ec>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	0c9a      	lsrs	r2, r3, #18
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cc0:	e002      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x1b2>
 8001cce:	e007      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40012400 	.word	0x40012400
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	431bde83 	.word	0x431bde83

08001d00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d039      	beq.n	8001d92 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0201 	orr.w	r2, r2, #1
 8001d2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <ADC_Enable+0x9c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <ADC_Enable+0xa0>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	0c9b      	lsrs	r3, r3, #18
 8001d3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d3c:	e002      	b.n	8001d44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f9      	bne.n	8001d3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d4a:	f7ff fce1 	bl	8001710 <HAL_GetTick>
 8001d4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d50:	e018      	b.n	8001d84 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d52:	f7ff fcdd 	bl	8001710 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d911      	bls.n	8001d84 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	f043 0210 	orr.w	r2, r3, #16
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	f043 0201 	orr.w	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e007      	b.n	8001d94 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d1df      	bne.n	8001d52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d127      	bne.n	8001e0e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dce:	f7ff fc9f 	bl	8001710 <HAL_GetTick>
 8001dd2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dd4:	e014      	b.n	8001e00 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dd6:	f7ff fc9b 	bl	8001710 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d90d      	bls.n	8001e00 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	f043 0210 	orr.w	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e007      	b.n	8001e10 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d0e3      	beq.n	8001dd6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d127      	bne.n	8001e82 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e48:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e4c:	d115      	bne.n	8001e7a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d111      	bne.n	8001e7a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d105      	bne.n	8001e7a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff fe2c 	bl	8001ad8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e80:	e004      	b.n	8001e8c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff fe21 	bl	8001aea <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	f043 0204 	orr.w	r2, r3, #4
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff fe10 	bl	8001afc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4906      	ldr	r1, [pc, #24]	; (8001f7c <__NVIC_EnableIRQ+0x34>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	e000e100 	.word	0xe000e100

08001f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	db0a      	blt.n	8001faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	490c      	ldr	r1, [pc, #48]	; (8001fcc <__NVIC_SetPriority+0x4c>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	0112      	lsls	r2, r2, #4
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa8:	e00a      	b.n	8001fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4908      	ldr	r1, [pc, #32]	; (8001fd0 <__NVIC_SetPriority+0x50>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	3b04      	subs	r3, #4
 8001fb8:	0112      	lsls	r2, r2, #4
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	761a      	strb	r2, [r3, #24]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f1c3 0307 	rsb	r3, r3, #7
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	bf28      	it	cs
 8001ff2:	2304      	movcs	r3, #4
 8001ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d902      	bls.n	8002004 <NVIC_EncodePriority+0x30>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3b03      	subs	r3, #3
 8002002:	e000      	b.n	8002006 <NVIC_EncodePriority+0x32>
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	401a      	ands	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43d9      	mvns	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	4313      	orrs	r3, r2
         );
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800205c:	f7ff ff90 	bl	8001f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff2d 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a4:	f7ff ff42 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff ff90 	bl	8001fd4 <NVIC_EncodePriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff5f 	bl	8001f80 <__NVIC_SetPriority>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff35 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffa2 	bl	8002038 <SysTick_Config>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e043      	b.n	800219e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_DMA_Init+0xa8>)
 800211e:	4413      	add	r3, r2
 8002120:	4a22      	ldr	r2, [pc, #136]	; (80021ac <HAL_DMA_Init+0xac>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	009a      	lsls	r2, r3, #2
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_DMA_Init+0xb0>)
 8002132:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800214a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800214e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	bffdfff8 	.word	0xbffdfff8
 80021ac:	cccccccd 	.word	0xcccccccd
 80021b0:	40020000 	.word	0x40020000

080021b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_DMA_Start_IT+0x20>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e04a      	b.n	800226a <HAL_DMA_Start_IT+0xb6>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d13a      	bne.n	800225c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2202      	movs	r2, #2
 80021ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f938 	bl	8002480 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 020e 	orr.w	r2, r2, #14
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e00f      	b.n	800224a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0204 	bic.w	r2, r2, #4
 8002238:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 020a 	orr.w	r2, r2, #10
 8002248:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e005      	b.n	8002268 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002264:	2302      	movs	r3, #2
 8002266:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002268:	7dfb      	ldrb	r3, [r7, #23]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	2204      	movs	r2, #4
 8002292:	409a      	lsls	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d04f      	beq.n	800233c <HAL_DMA_IRQHandler+0xc8>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d04a      	beq.n	800233c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0204 	bic.w	r2, r2, #4
 80022c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a66      	ldr	r2, [pc, #408]	; (8002464 <HAL_DMA_IRQHandler+0x1f0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d029      	beq.n	8002322 <HAL_DMA_IRQHandler+0xae>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_DMA_IRQHandler+0x1f4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d022      	beq.n	800231e <HAL_DMA_IRQHandler+0xaa>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a63      	ldr	r2, [pc, #396]	; (800246c <HAL_DMA_IRQHandler+0x1f8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01a      	beq.n	8002318 <HAL_DMA_IRQHandler+0xa4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a62      	ldr	r2, [pc, #392]	; (8002470 <HAL_DMA_IRQHandler+0x1fc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d012      	beq.n	8002312 <HAL_DMA_IRQHandler+0x9e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a60      	ldr	r2, [pc, #384]	; (8002474 <HAL_DMA_IRQHandler+0x200>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00a      	beq.n	800230c <HAL_DMA_IRQHandler+0x98>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <HAL_DMA_IRQHandler+0x204>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d102      	bne.n	8002306 <HAL_DMA_IRQHandler+0x92>
 8002300:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002304:	e00e      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 8002306:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800230a:	e00b      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 800230c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002310:	e008      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 8002312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002316:	e005      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 8002318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231c:	e002      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	e000      	b.n	8002324 <HAL_DMA_IRQHandler+0xb0>
 8002322:	2304      	movs	r3, #4
 8002324:	4a55      	ldr	r2, [pc, #340]	; (800247c <HAL_DMA_IRQHandler+0x208>)
 8002326:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8094 	beq.w	800245a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800233a:	e08e      	b.n	800245a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	2202      	movs	r2, #2
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d056      	beq.n	80023fa <HAL_DMA_IRQHandler+0x186>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d051      	beq.n	80023fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 020a 	bic.w	r2, r2, #10
 8002372:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a38      	ldr	r2, [pc, #224]	; (8002464 <HAL_DMA_IRQHandler+0x1f0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d029      	beq.n	80023da <HAL_DMA_IRQHandler+0x166>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a37      	ldr	r2, [pc, #220]	; (8002468 <HAL_DMA_IRQHandler+0x1f4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d022      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x162>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a35      	ldr	r2, [pc, #212]	; (800246c <HAL_DMA_IRQHandler+0x1f8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01a      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x15c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a34      	ldr	r2, [pc, #208]	; (8002470 <HAL_DMA_IRQHandler+0x1fc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d012      	beq.n	80023ca <HAL_DMA_IRQHandler+0x156>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a32      	ldr	r2, [pc, #200]	; (8002474 <HAL_DMA_IRQHandler+0x200>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x150>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_DMA_IRQHandler+0x204>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d102      	bne.n	80023be <HAL_DMA_IRQHandler+0x14a>
 80023b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023bc:	e00e      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	e00b      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c8:	e008      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ce:	e005      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d4:	e002      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023d6:	2320      	movs	r3, #32
 80023d8:	e000      	b.n	80023dc <HAL_DMA_IRQHandler+0x168>
 80023da:	2302      	movs	r3, #2
 80023dc:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_DMA_IRQHandler+0x208>)
 80023de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d034      	beq.n	800245a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023f8:	e02f      	b.n	800245a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2208      	movs	r2, #8
 8002400:	409a      	lsls	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d028      	beq.n	800245c <HAL_DMA_IRQHandler+0x1e8>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 020e 	bic.w	r2, r2, #14
 8002422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	2101      	movs	r1, #1
 800242e:	fa01 f202 	lsl.w	r2, r1, r2
 8002432:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
    }
  }
  return;
 800245a:	bf00      	nop
 800245c:	bf00      	nop
}
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40020008 	.word	0x40020008
 8002468:	4002001c 	.word	0x4002001c
 800246c:	40020030 	.word	0x40020030
 8002470:	40020044 	.word	0x40020044
 8002474:	40020058 	.word	0x40020058
 8002478:	4002006c 	.word	0x4002006c
 800247c:	40020000 	.word	0x40020000

08002480 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f202 	lsl.w	r2, r1, r2
 800249c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d108      	bne.n	80024c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024be:	e007      	b.n	80024d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b08b      	sub	sp, #44	; 0x2c
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ee:	e148      	b.n	8002782 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024f0:	2201      	movs	r2, #1
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	f040 8137 	bne.w	800277c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4aa3      	ldr	r2, [pc, #652]	; (80027a0 <HAL_GPIO_Init+0x2c4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d05e      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 8002518:	4aa1      	ldr	r2, [pc, #644]	; (80027a0 <HAL_GPIO_Init+0x2c4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d875      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 800251e:	4aa1      	ldr	r2, [pc, #644]	; (80027a4 <HAL_GPIO_Init+0x2c8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d058      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 8002524:	4a9f      	ldr	r2, [pc, #636]	; (80027a4 <HAL_GPIO_Init+0x2c8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d86f      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 800252a:	4a9f      	ldr	r2, [pc, #636]	; (80027a8 <HAL_GPIO_Init+0x2cc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d052      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 8002530:	4a9d      	ldr	r2, [pc, #628]	; (80027a8 <HAL_GPIO_Init+0x2cc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d869      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 8002536:	4a9d      	ldr	r2, [pc, #628]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d04c      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 800253c:	4a9b      	ldr	r2, [pc, #620]	; (80027ac <HAL_GPIO_Init+0x2d0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d863      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 8002542:	4a9b      	ldr	r2, [pc, #620]	; (80027b0 <HAL_GPIO_Init+0x2d4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d046      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
 8002548:	4a99      	ldr	r2, [pc, #612]	; (80027b0 <HAL_GPIO_Init+0x2d4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d85d      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 800254e:	2b12      	cmp	r3, #18
 8002550:	d82a      	bhi.n	80025a8 <HAL_GPIO_Init+0xcc>
 8002552:	2b12      	cmp	r3, #18
 8002554:	d859      	bhi.n	800260a <HAL_GPIO_Init+0x12e>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <HAL_GPIO_Init+0x80>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	080025d7 	.word	0x080025d7
 8002560:	080025b1 	.word	0x080025b1
 8002564:	080025c3 	.word	0x080025c3
 8002568:	08002605 	.word	0x08002605
 800256c:	0800260b 	.word	0x0800260b
 8002570:	0800260b 	.word	0x0800260b
 8002574:	0800260b 	.word	0x0800260b
 8002578:	0800260b 	.word	0x0800260b
 800257c:	0800260b 	.word	0x0800260b
 8002580:	0800260b 	.word	0x0800260b
 8002584:	0800260b 	.word	0x0800260b
 8002588:	0800260b 	.word	0x0800260b
 800258c:	0800260b 	.word	0x0800260b
 8002590:	0800260b 	.word	0x0800260b
 8002594:	0800260b 	.word	0x0800260b
 8002598:	0800260b 	.word	0x0800260b
 800259c:	0800260b 	.word	0x0800260b
 80025a0:	080025b9 	.word	0x080025b9
 80025a4:	080025cd 	.word	0x080025cd
 80025a8:	4a82      	ldr	r2, [pc, #520]	; (80027b4 <HAL_GPIO_Init+0x2d8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ae:	e02c      	b.n	800260a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	623b      	str	r3, [r7, #32]
          break;
 80025b6:	e029      	b.n	800260c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	3304      	adds	r3, #4
 80025be:	623b      	str	r3, [r7, #32]
          break;
 80025c0:	e024      	b.n	800260c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	3308      	adds	r3, #8
 80025c8:	623b      	str	r3, [r7, #32]
          break;
 80025ca:	e01f      	b.n	800260c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	330c      	adds	r3, #12
 80025d2:	623b      	str	r3, [r7, #32]
          break;
 80025d4:	e01a      	b.n	800260c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025de:	2304      	movs	r3, #4
 80025e0:	623b      	str	r3, [r7, #32]
          break;
 80025e2:	e013      	b.n	800260c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025ec:	2308      	movs	r3, #8
 80025ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	611a      	str	r2, [r3, #16]
          break;
 80025f6:	e009      	b.n	800260c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f8:	2308      	movs	r3, #8
 80025fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	615a      	str	r2, [r3, #20]
          break;
 8002602:	e003      	b.n	800260c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
          break;
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x130>
          break;
 800260a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2bff      	cmp	r3, #255	; 0xff
 8002610:	d801      	bhi.n	8002616 <HAL_GPIO_Init+0x13a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	e001      	b.n	800261a <HAL_GPIO_Init+0x13e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3304      	adds	r3, #4
 800261a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2bff      	cmp	r3, #255	; 0xff
 8002620:	d802      	bhi.n	8002628 <HAL_GPIO_Init+0x14c>
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	e002      	b.n	800262e <HAL_GPIO_Init+0x152>
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	3b08      	subs	r3, #8
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	210f      	movs	r1, #15
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	401a      	ands	r2, r3
 8002640:	6a39      	ldr	r1, [r7, #32]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	431a      	orrs	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8090 	beq.w	800277c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800265c:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <HAL_GPIO_Init+0x2dc>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4a55      	ldr	r2, [pc, #340]	; (80027b8 <HAL_GPIO_Init+0x2dc>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6193      	str	r3, [r2, #24]
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_GPIO_Init+0x2dc>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002674:	4a51      	ldr	r2, [pc, #324]	; (80027bc <HAL_GPIO_Init+0x2e0>)
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a49      	ldr	r2, [pc, #292]	; (80027c0 <HAL_GPIO_Init+0x2e4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00d      	beq.n	80026bc <HAL_GPIO_Init+0x1e0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <HAL_GPIO_Init+0x2e8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <HAL_GPIO_Init+0x1dc>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a47      	ldr	r2, [pc, #284]	; (80027c8 <HAL_GPIO_Init+0x2ec>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d101      	bne.n	80026b4 <HAL_GPIO_Init+0x1d8>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e004      	b.n	80026be <HAL_GPIO_Init+0x1e2>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e002      	b.n	80026be <HAL_GPIO_Init+0x1e2>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_GPIO_Init+0x1e2>
 80026bc:	2300      	movs	r3, #0
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	f002 0203 	and.w	r2, r2, #3
 80026c4:	0092      	lsls	r2, r2, #2
 80026c6:	4093      	lsls	r3, r2
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ce:	493b      	ldr	r1, [pc, #236]	; (80027bc <HAL_GPIO_Init+0x2e0>)
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026e8:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026f6:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	4933      	ldr	r1, [pc, #204]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002700:	4013      	ands	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002710:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	492d      	ldr	r1, [pc, #180]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	43db      	mvns	r3, r3
 8002726:	4929      	ldr	r1, [pc, #164]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002728:	4013      	ands	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002738:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4923      	ldr	r1, [pc, #140]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	43db      	mvns	r3, r3
 800274e:	491f      	ldr	r1, [pc, #124]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002750:	4013      	ands	r3, r2
 8002752:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	4919      	ldr	r1, [pc, #100]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4915      	ldr	r1, [pc, #84]	; (80027cc <HAL_GPIO_Init+0x2f0>)
 8002778:	4013      	ands	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	3301      	adds	r3, #1
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	f47f aeaf 	bne.w	80024f0 <HAL_GPIO_Init+0x14>
  }
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	372c      	adds	r7, #44	; 0x2c
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	10320000 	.word	0x10320000
 80027a4:	10310000 	.word	0x10310000
 80027a8:	10220000 	.word	0x10220000
 80027ac:	10210000 	.word	0x10210000
 80027b0:	10120000 	.word	0x10120000
 80027b4:	10110000 	.word	0x10110000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40010800 	.word	0x40010800
 80027c4:	40010c00 	.word	0x40010c00
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40010400 	.word	0x40010400

080027d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e26c      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8087 	beq.w	800292e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b04      	cmp	r3, #4
 800282a:	d00c      	beq.n	8002846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800282c:	4b8f      	ldr	r3, [pc, #572]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d112      	bne.n	800285e <HAL_RCC_OscConfig+0x5e>
 8002838:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d10b      	bne.n	800285e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002846:	4b89      	ldr	r3, [pc, #548]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d06c      	beq.n	800292c <HAL_RCC_OscConfig+0x12c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d168      	bne.n	800292c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e246      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x76>
 8002868:	4b80      	ldr	r3, [pc, #512]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7f      	ldr	r2, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e02e      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b7b      	ldr	r3, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7a      	ldr	r2, [pc, #488]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a77      	ldr	r2, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e01d      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0xbc>
 80028a2:	4b72      	ldr	r3, [pc, #456]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a71      	ldr	r2, [pc, #452]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6e      	ldr	r2, [pc, #440]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 80028bc:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6a      	ldr	r2, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a67      	ldr	r2, [pc, #412]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe ff18 	bl	8001710 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe ff14 	bl	8001710 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1fa      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe4>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe ff04 	bl	8001710 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe ff00 	bl	8001710 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1e6      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x10c>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d063      	beq.n	8002a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800293a:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002946:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x18c>
 8002952:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x176>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1ba      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4939      	ldr	r1, [pc, #228]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	e03a      	b.n	8002a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe feb9 	bl	8001710 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fe feb5 	bl	8001710 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e19b      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4927      	ldr	r1, [pc, #156]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fe fe98 	bl	8001710 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e4:	f7fe fe94 	bl	8001710 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e17a      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03a      	beq.n	8002a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d019      	beq.n	8002a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fe78 	bl	8001710 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a24:	f7fe fe74 	bl	8001710 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e15a      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f000 fad8 	bl	8002ff8 <RCC_Delay>
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe fe5e 	bl	8001710 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a56:	e00f      	b.n	8002a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fe5a 	bl	8001710 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d908      	bls.n	8002a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e140      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	42420000 	.word	0x42420000
 8002a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4b9e      	ldr	r3, [pc, #632]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e9      	bne.n	8002a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a6 	beq.w	8002bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b97      	ldr	r3, [pc, #604]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4b94      	ldr	r3, [pc, #592]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4a93      	ldr	r2, [pc, #588]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	61d3      	str	r3, [r2, #28]
 8002aae:	4b91      	ldr	r3, [pc, #580]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b8e      	ldr	r3, [pc, #568]	; (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a8a      	ldr	r2, [pc, #552]	; (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fe1b 	bl	8001710 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe fe17 	bl	8001710 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b64      	cmp	r3, #100	; 0x64
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0fd      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x312>
 8002b04:	4b7b      	ldr	r3, [pc, #492]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a7a      	ldr	r2, [pc, #488]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e02d      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b1a:	4b76      	ldr	r3, [pc, #472]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4a75      	ldr	r2, [pc, #468]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6213      	str	r3, [r2, #32]
 8002b26:	4b73      	ldr	r3, [pc, #460]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a72      	ldr	r2, [pc, #456]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6213      	str	r3, [r2, #32]
 8002b32:	e01c      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x356>
 8002b3c:	4b6d      	ldr	r3, [pc, #436]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a6c      	ldr	r2, [pc, #432]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b56:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a66      	ldr	r2, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b64      	ldr	r3, [pc, #400]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a63      	ldr	r2, [pc, #396]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d015      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7fe fdcb 	bl	8001710 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe fdc7 	bl	8001710 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0ab      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	4b57      	ldr	r3, [pc, #348]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCC_OscConfig+0x37e>
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fdb5 	bl	8001710 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fdb1 	bl	8001710 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e095      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ee      	bne.n	8002baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a47      	ldr	r2, [pc, #284]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8081 	beq.w	8002cea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d061      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d146      	bne.n	8002c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfc:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_RCC_OscConfig+0x4fc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe fd85 	bl	8001710 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fe fd81 	bl	8001710 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e067      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1c:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c32:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	492d      	ldr	r1, [pc, #180]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a19      	ldr	r1, [r3, #32]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	430b      	orrs	r3, r1
 8002c56:	4927      	ldr	r1, [pc, #156]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_RCC_OscConfig+0x4fc>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fd55 	bl	8001710 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe fd51 	bl	8001710 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e037      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x46a>
 8002c88:	e02f      	b.n	8002cea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_RCC_OscConfig+0x4fc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fd3e 	bl	8001710 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fd3a 	bl	8001710 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e020      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x498>
 8002cb6:	e018      	b.n	8002cea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e013      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	42420060 	.word	0x42420060

08002d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0d0      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d910      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 0207 	bic.w	r2, r3, #7
 8002d2a:	4965      	ldr	r1, [pc, #404]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	494d      	ldr	r1, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d040      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d115      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbe:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e073      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e06b      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f023 0203 	bic.w	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4936      	ldr	r1, [pc, #216]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df0:	f7fe fc8e 	bl	8001710 <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df8:	f7fe fc8a 	bl	8001710 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e053      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 020c 	and.w	r2, r3, #12
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d1eb      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d210      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 0207 	bic.w	r2, r3, #7
 8002e36:	4922      	ldr	r1, [pc, #136]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e032      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8e:	f000 f821 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	490a      	ldr	r1, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea0:	5ccb      	ldrb	r3, [r1, r3]
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1cc>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fbec 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	080047b4 	.word	0x080047b4
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	b490      	push	{r4, r7}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002edc:	1d3c      	adds	r4, r7, #4
 8002ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ee4:	f240 2301 	movw	r3, #513	; 0x201
 8002ee8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002efe:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x40>
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x46>
 8002f12:	e02d      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f16:	623b      	str	r3, [r7, #32]
      break;
 8002f18:	e02d      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	0c9b      	lsrs	r3, r3, #18
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f26:	4413      	add	r3, r2
 8002f28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c5b      	lsrs	r3, r3, #17
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f46:	4413      	add	r3, r2
 8002f48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f52:	fb02 f203 	mul.w	r2, r2, r3
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5e:	e004      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f64:	fb02 f303 	mul.w	r3, r2, r3
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	623b      	str	r3, [r7, #32]
      break;
 8002f6e:	e002      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f72:	623b      	str	r3, [r7, #32]
      break;
 8002f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3728      	adds	r7, #40	; 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc90      	pop	{r4, r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	080047a4 	.word	0x080047a4
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	007a1200 	.word	0x007a1200
 8002f90:	003d0900 	.word	0x003d0900

08002f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f98:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	20000000 	.word	0x20000000

08002fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fac:	f7ff fff2 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	080047c4 	.word	0x080047c4

08002fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd4:	f7ff ffde 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	0adb      	lsrs	r3, r3, #11
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4903      	ldr	r1, [pc, #12]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	080047c4 	.word	0x080047c4

08002ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <RCC_Delay+0x34>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <RCC_Delay+0x38>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0a5b      	lsrs	r3, r3, #9
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003014:	bf00      	nop
  }
  while (Delay --);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	60fa      	str	r2, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f9      	bne.n	8003014 <RCC_Delay+0x1c>
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	20000000 	.word	0x20000000
 8003030:	10624dd3 	.word	0x10624dd3

08003034 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d07d      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003050:	2300      	movs	r3, #0
 8003052:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003054:	4b4f      	ldr	r3, [pc, #316]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10d      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	61d3      	str	r3, [r2, #28]
 800306c:	4b49      	ldr	r3, [pc, #292]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	4b46      	ldr	r3, [pc, #280]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d118      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a42      	ldr	r2, [pc, #264]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003094:	f7fe fb3c 	bl	8001710 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	e008      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309c:	f7fe fb38 	bl	8001710 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e06d      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02e      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d027      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030d8:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e2:	4b2e      	ldr	r3, [pc, #184]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030e8:	4b2c      	ldr	r3, [pc, #176]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030ee:	4a29      	ldr	r2, [pc, #164]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d014      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fb07 	bl	8001710 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe fb03 	bl	8001710 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e036      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ee      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4917      	ldr	r1, [pc, #92]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	4313      	orrs	r3, r2
 8003138:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4a13      	ldr	r2, [pc, #76]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	490b      	ldr	r1, [pc, #44]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	4313      	orrs	r3, r2
 8003168:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4904      	ldr	r1, [pc, #16]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
 800319c:	42420440 	.word	0x42420440

080031a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e041      	b.n	8003236 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe f866 	bl	8001298 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f000 f9ec 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <HAL_TIM_PWM_Start+0x24>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e022      	b.n	80032aa <HAL_TIM_PWM_Start+0x6a>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d109      	bne.n	800327e <HAL_TIM_PWM_Start+0x3e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	e015      	b.n	80032aa <HAL_TIM_PWM_Start+0x6a>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b08      	cmp	r3, #8
 8003282:	d109      	bne.n	8003298 <HAL_TIM_PWM_Start+0x58>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e008      	b.n	80032aa <HAL_TIM_PWM_Start+0x6a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e059      	b.n	8003366 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_PWM_Start+0x82>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c0:	e013      	b.n	80032ea <HAL_TIM_PWM_Start+0xaa>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x92>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d0:	e00b      	b.n	80032ea <HAL_TIM_PWM_Start+0xaa>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d104      	bne.n	80032e2 <HAL_TIM_PWM_Start+0xa2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e0:	e003      	b.n	80032ea <HAL_TIM_PWM_Start+0xaa>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	6839      	ldr	r1, [r7, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fb42 	bl	800397c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_TIM_PWM_Start+0x130>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d107      	bne.n	8003312 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a16      	ldr	r2, [pc, #88]	; (8003370 <HAL_TIM_PWM_Start+0x130>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_TIM_PWM_Start+0xf0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003324:	d004      	beq.n	8003330 <HAL_TIM_PWM_Start+0xf0>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <HAL_TIM_PWM_Start+0x134>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d111      	bne.n	8003354 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b06      	cmp	r3, #6
 8003340:	d010      	beq.n	8003364 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	e007      	b.n	8003364 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40012c00 	.word	0x40012c00
 8003374:	40000400 	.word	0x40000400

08003378 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2200      	movs	r2, #0
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 faf6 	bl	800397c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_TIM_PWM_Stop+0xc4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d117      	bne.n	80033ca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a1a      	ldr	r2, [r3, #32]
 80033a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_TIM_PWM_Stop+0x52>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	f240 4344 	movw	r3, #1092	; 0x444
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <HAL_TIM_PWM_Stop+0x52>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <HAL_TIM_PWM_Stop+0x82>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a1a      	ldr	r2, [r3, #32]
 80033e0:	f240 4344 	movw	r3, #1092	; 0x444
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_TIM_PWM_Stop+0x82>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <HAL_TIM_PWM_Stop+0x92>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003408:	e013      	b.n	8003432 <HAL_TIM_PWM_Stop+0xba>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d104      	bne.n	800341a <HAL_TIM_PWM_Stop+0xa2>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003418:	e00b      	b.n	8003432 <HAL_TIM_PWM_Stop+0xba>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d104      	bne.n	800342a <HAL_TIM_PWM_Stop+0xb2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003428:	e003      	b.n	8003432 <HAL_TIM_PWM_Stop+0xba>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40012c00 	.word	0x40012c00

08003440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003456:	2302      	movs	r3, #2
 8003458:	e0ac      	b.n	80035b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	f200 809f 	bhi.w	80035a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	080034a5 	.word	0x080034a5
 8003474:	080035a9 	.word	0x080035a9
 8003478:	080035a9 	.word	0x080035a9
 800347c:	080035a9 	.word	0x080035a9
 8003480:	080034e5 	.word	0x080034e5
 8003484:	080035a9 	.word	0x080035a9
 8003488:	080035a9 	.word	0x080035a9
 800348c:	080035a9 	.word	0x080035a9
 8003490:	08003527 	.word	0x08003527
 8003494:	080035a9 	.word	0x080035a9
 8003498:	080035a9 	.word	0x080035a9
 800349c:	080035a9 	.word	0x080035a9
 80034a0:	08003567 	.word	0x08003567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f8de 	bl	800366c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	619a      	str	r2, [r3, #24]
      break;
 80034e2:	e062      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f924 	bl	8003738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6999      	ldr	r1, [r3, #24]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	619a      	str	r2, [r3, #24]
      break;
 8003524:	e041      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f96d 	bl	800380c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0208 	orr.w	r2, r2, #8
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0204 	bic.w	r2, r2, #4
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	61da      	str	r2, [r3, #28]
      break;
 8003564:	e021      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f9b7 	bl	80038e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	021a      	lsls	r2, r3, #8
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	61da      	str	r2, [r3, #28]
      break;
 80035a6:	e000      	b.n	80035aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80035a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a25      	ldr	r2, [pc, #148]	; (8003664 <TIM_Base_SetConfig+0xa8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d007      	beq.n	80035e4 <TIM_Base_SetConfig+0x28>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d003      	beq.n	80035e4 <TIM_Base_SetConfig+0x28>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a22      	ldr	r2, [pc, #136]	; (8003668 <TIM_Base_SetConfig+0xac>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d108      	bne.n	80035f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <TIM_Base_SetConfig+0xa8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_Base_SetConfig+0x52>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0x52>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a17      	ldr	r2, [pc, #92]	; (8003668 <TIM_Base_SetConfig+0xac>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a07      	ldr	r2, [pc, #28]	; (8003664 <TIM_Base_SetConfig+0xa8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d103      	bne.n	8003654 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	615a      	str	r2, [r3, #20]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400

0800366c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f023 0302 	bic.w	r3, r3, #2
 80036b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <TIM_OC1_SetConfig+0xc8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10c      	bne.n	80036e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0308 	bic.w	r3, r3, #8
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a13      	ldr	r2, [pc, #76]	; (8003734 <TIM_OC1_SetConfig+0xc8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	bf00      	nop
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40012c00 	.word	0x40012c00

08003738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f023 0210 	bic.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0320 	bic.w	r3, r3, #32
 8003782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <TIM_OC2_SetConfig+0xd0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10d      	bne.n	80037b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <TIM_OC2_SetConfig+0xd0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d113      	bne.n	80037e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00

0800380c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <TIM_OC3_SetConfig+0xd0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10d      	bne.n	8003886 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <TIM_OC3_SetConfig+0xd0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d113      	bne.n	80038b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800389c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	621a      	str	r2, [r3, #32]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40012c00 	.word	0x40012c00

080038e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800392a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <TIM_OC4_SetConfig+0x98>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d109      	bne.n	8003954 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00

0800397c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2201      	movs	r2, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d8:	2302      	movs	r3, #2
 80039da:	e041      	b.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d004      	beq.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a10      	ldr	r2, [pc, #64]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10c      	bne.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40000400 	.word	0x40000400

08003a74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e03d      	b.n	8003b0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e03f      	b.n	8003ba8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd fca1 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f904 	bl	8003d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d17c      	bne.n	8003cca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_UART_Transmit+0x2c>
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e075      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Transmit+0x3e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e06e      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2221      	movs	r2, #33	; 0x21
 8003c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c04:	f7fd fd84 	bl	8001710 <HAL_GetTick>
 8003c08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	88fa      	ldrh	r2, [r7, #6]
 8003c14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1e:	d108      	bne.n	8003c32 <HAL_UART_Transmit+0x82>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	e003      	b.n	8003c3a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003c42:	e02a      	b.n	8003c9a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f840 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e036      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	3302      	adds	r3, #2
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e007      	b.n	8003c8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1cf      	bne.n	8003c44 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f810 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e006      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce4:	e02c      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cec:	d028      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf4:	f7fd fd0c 	bl	8001710 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d21d      	bcs.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e00f      	b.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d0c3      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003da2:	f023 030c 	bic.w	r3, r3, #12
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <UART_SetConfig+0x114>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d103      	bne.n	8003dd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dd0:	f7ff f8fe 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	e002      	b.n	8003dde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dd8:	f7ff f8e6 	bl	8002fa8 <HAL_RCC_GetPCLK1Freq>
 8003ddc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009a      	lsls	r2, r3, #2
 8003de8:	441a      	add	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <UART_SetConfig+0x118>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	0119      	lsls	r1, r3, #4
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009a      	lsls	r2, r3, #2
 8003e08:	441a      	add	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e14:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <UART_SetConfig+0x118>)
 8003e16:	fba3 0302 	umull	r0, r3, r3, r2
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2064      	movs	r0, #100	; 0x64
 8003e1e:	fb00 f303 	mul.w	r3, r0, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	3332      	adds	r3, #50	; 0x32
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <UART_SetConfig+0x118>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e34:	4419      	add	r1, r3
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009a      	lsls	r2, r3, #2
 8003e40:	441a      	add	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <UART_SetConfig+0x118>)
 8003e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2064      	movs	r0, #100	; 0x64
 8003e56:	fb00 f303 	mul.w	r3, r0, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	3332      	adds	r3, #50	; 0x32
 8003e60:	4a07      	ldr	r2, [pc, #28]	; (8003e80 <UART_SetConfig+0x118>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	f003 020f 	and.w	r2, r3, #15
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	440a      	add	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	51eb851f 	.word	0x51eb851f

08003e84 <__errno>:
 8003e84:	4b01      	ldr	r3, [pc, #4]	; (8003e8c <__errno+0x8>)
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	2000000c 	.word	0x2000000c

08003e90 <__libc_init_array>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	2600      	movs	r6, #0
 8003e94:	4d0c      	ldr	r5, [pc, #48]	; (8003ec8 <__libc_init_array+0x38>)
 8003e96:	4c0d      	ldr	r4, [pc, #52]	; (8003ecc <__libc_init_array+0x3c>)
 8003e98:	1b64      	subs	r4, r4, r5
 8003e9a:	10a4      	asrs	r4, r4, #2
 8003e9c:	42a6      	cmp	r6, r4
 8003e9e:	d109      	bne.n	8003eb4 <__libc_init_array+0x24>
 8003ea0:	f000 fc5c 	bl	800475c <_init>
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	4d0a      	ldr	r5, [pc, #40]	; (8003ed0 <__libc_init_array+0x40>)
 8003ea8:	4c0a      	ldr	r4, [pc, #40]	; (8003ed4 <__libc_init_array+0x44>)
 8003eaa:	1b64      	subs	r4, r4, r5
 8003eac:	10a4      	asrs	r4, r4, #2
 8003eae:	42a6      	cmp	r6, r4
 8003eb0:	d105      	bne.n	8003ebe <__libc_init_array+0x2e>
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb8:	4798      	blx	r3
 8003eba:	3601      	adds	r6, #1
 8003ebc:	e7ee      	b.n	8003e9c <__libc_init_array+0xc>
 8003ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec2:	4798      	blx	r3
 8003ec4:	3601      	adds	r6, #1
 8003ec6:	e7f2      	b.n	8003eae <__libc_init_array+0x1e>
 8003ec8:	08004800 	.word	0x08004800
 8003ecc:	08004800 	.word	0x08004800
 8003ed0:	08004800 	.word	0x08004800
 8003ed4:	08004804 	.word	0x08004804

08003ed8 <memcpy>:
 8003ed8:	440a      	add	r2, r1
 8003eda:	4291      	cmp	r1, r2
 8003edc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ee0:	d100      	bne.n	8003ee4 <memcpy+0xc>
 8003ee2:	4770      	bx	lr
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eea:	4291      	cmp	r1, r2
 8003eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ef0:	d1f9      	bne.n	8003ee6 <memcpy+0xe>
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <memset>:
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4402      	add	r2, r0
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d100      	bne.n	8003efe <memset+0xa>
 8003efc:	4770      	bx	lr
 8003efe:	f803 1b01 	strb.w	r1, [r3], #1
 8003f02:	e7f9      	b.n	8003ef8 <memset+0x4>

08003f04 <siprintf>:
 8003f04:	b40e      	push	{r1, r2, r3}
 8003f06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f0a:	b500      	push	{lr}
 8003f0c:	b09c      	sub	sp, #112	; 0x70
 8003f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f10:	9002      	str	r0, [sp, #8]
 8003f12:	9006      	str	r0, [sp, #24]
 8003f14:	9107      	str	r1, [sp, #28]
 8003f16:	9104      	str	r1, [sp, #16]
 8003f18:	4808      	ldr	r0, [pc, #32]	; (8003f3c <siprintf+0x38>)
 8003f1a:	4909      	ldr	r1, [pc, #36]	; (8003f40 <siprintf+0x3c>)
 8003f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f20:	9105      	str	r1, [sp, #20]
 8003f22:	6800      	ldr	r0, [r0, #0]
 8003f24:	a902      	add	r1, sp, #8
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	f000 f868 	bl	8003ffc <_svfiprintf_r>
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	9b02      	ldr	r3, [sp, #8]
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	b01c      	add	sp, #112	; 0x70
 8003f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f38:	b003      	add	sp, #12
 8003f3a:	4770      	bx	lr
 8003f3c:	2000000c 	.word	0x2000000c
 8003f40:	ffff0208 	.word	0xffff0208

08003f44 <__ssputs_r>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	688e      	ldr	r6, [r1, #8]
 8003f4a:	4682      	mov	sl, r0
 8003f4c:	429e      	cmp	r6, r3
 8003f4e:	460c      	mov	r4, r1
 8003f50:	4690      	mov	r8, r2
 8003f52:	461f      	mov	r7, r3
 8003f54:	d838      	bhi.n	8003fc8 <__ssputs_r+0x84>
 8003f56:	898a      	ldrh	r2, [r1, #12]
 8003f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f5c:	d032      	beq.n	8003fc4 <__ssputs_r+0x80>
 8003f5e:	6825      	ldr	r5, [r4, #0]
 8003f60:	6909      	ldr	r1, [r1, #16]
 8003f62:	3301      	adds	r3, #1
 8003f64:	eba5 0901 	sub.w	r9, r5, r1
 8003f68:	6965      	ldr	r5, [r4, #20]
 8003f6a:	444b      	add	r3, r9
 8003f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f74:	106d      	asrs	r5, r5, #1
 8003f76:	429d      	cmp	r5, r3
 8003f78:	bf38      	it	cc
 8003f7a:	461d      	movcc	r5, r3
 8003f7c:	0553      	lsls	r3, r2, #21
 8003f7e:	d531      	bpl.n	8003fe4 <__ssputs_r+0xa0>
 8003f80:	4629      	mov	r1, r5
 8003f82:	f000 fb45 	bl	8004610 <_malloc_r>
 8003f86:	4606      	mov	r6, r0
 8003f88:	b950      	cbnz	r0, 8003fa0 <__ssputs_r+0x5c>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f90:	f8ca 3000 	str.w	r3, [sl]
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9a:	81a3      	strh	r3, [r4, #12]
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	464a      	mov	r2, r9
 8003fa2:	6921      	ldr	r1, [r4, #16]
 8003fa4:	f7ff ff98 	bl	8003ed8 <memcpy>
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	6126      	str	r6, [r4, #16]
 8003fb6:	444e      	add	r6, r9
 8003fb8:	6026      	str	r6, [r4, #0]
 8003fba:	463e      	mov	r6, r7
 8003fbc:	6165      	str	r5, [r4, #20]
 8003fbe:	eba5 0509 	sub.w	r5, r5, r9
 8003fc2:	60a5      	str	r5, [r4, #8]
 8003fc4:	42be      	cmp	r6, r7
 8003fc6:	d900      	bls.n	8003fca <__ssputs_r+0x86>
 8003fc8:	463e      	mov	r6, r7
 8003fca:	4632      	mov	r2, r6
 8003fcc:	4641      	mov	r1, r8
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	f000 fab8 	bl	8004544 <memmove>
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	1b9b      	subs	r3, r3, r6
 8003fda:	4432      	add	r2, r6
 8003fdc:	2000      	movs	r0, #0
 8003fde:	60a3      	str	r3, [r4, #8]
 8003fe0:	6022      	str	r2, [r4, #0]
 8003fe2:	e7db      	b.n	8003f9c <__ssputs_r+0x58>
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	f000 fb6d 	bl	80046c4 <_realloc_r>
 8003fea:	4606      	mov	r6, r0
 8003fec:	2800      	cmp	r0, #0
 8003fee:	d1e1      	bne.n	8003fb4 <__ssputs_r+0x70>
 8003ff0:	4650      	mov	r0, sl
 8003ff2:	6921      	ldr	r1, [r4, #16]
 8003ff4:	f000 fac0 	bl	8004578 <_free_r>
 8003ff8:	e7c7      	b.n	8003f8a <__ssputs_r+0x46>
	...

08003ffc <_svfiprintf_r>:
 8003ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004000:	4698      	mov	r8, r3
 8004002:	898b      	ldrh	r3, [r1, #12]
 8004004:	4607      	mov	r7, r0
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	460d      	mov	r5, r1
 800400a:	4614      	mov	r4, r2
 800400c:	b09d      	sub	sp, #116	; 0x74
 800400e:	d50e      	bpl.n	800402e <_svfiprintf_r+0x32>
 8004010:	690b      	ldr	r3, [r1, #16]
 8004012:	b963      	cbnz	r3, 800402e <_svfiprintf_r+0x32>
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	f000 fafb 	bl	8004610 <_malloc_r>
 800401a:	6028      	str	r0, [r5, #0]
 800401c:	6128      	str	r0, [r5, #16]
 800401e:	b920      	cbnz	r0, 800402a <_svfiprintf_r+0x2e>
 8004020:	230c      	movs	r3, #12
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004028:	e0d1      	b.n	80041ce <_svfiprintf_r+0x1d2>
 800402a:	2340      	movs	r3, #64	; 0x40
 800402c:	616b      	str	r3, [r5, #20]
 800402e:	2300      	movs	r3, #0
 8004030:	9309      	str	r3, [sp, #36]	; 0x24
 8004032:	2320      	movs	r3, #32
 8004034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004038:	2330      	movs	r3, #48	; 0x30
 800403a:	f04f 0901 	mov.w	r9, #1
 800403e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004042:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041e8 <_svfiprintf_r+0x1ec>
 8004046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800404a:	4623      	mov	r3, r4
 800404c:	469a      	mov	sl, r3
 800404e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004052:	b10a      	cbz	r2, 8004058 <_svfiprintf_r+0x5c>
 8004054:	2a25      	cmp	r2, #37	; 0x25
 8004056:	d1f9      	bne.n	800404c <_svfiprintf_r+0x50>
 8004058:	ebba 0b04 	subs.w	fp, sl, r4
 800405c:	d00b      	beq.n	8004076 <_svfiprintf_r+0x7a>
 800405e:	465b      	mov	r3, fp
 8004060:	4622      	mov	r2, r4
 8004062:	4629      	mov	r1, r5
 8004064:	4638      	mov	r0, r7
 8004066:	f7ff ff6d 	bl	8003f44 <__ssputs_r>
 800406a:	3001      	adds	r0, #1
 800406c:	f000 80aa 	beq.w	80041c4 <_svfiprintf_r+0x1c8>
 8004070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004072:	445a      	add	r2, fp
 8004074:	9209      	str	r2, [sp, #36]	; 0x24
 8004076:	f89a 3000 	ldrb.w	r3, [sl]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80a2 	beq.w	80041c4 <_svfiprintf_r+0x1c8>
 8004080:	2300      	movs	r3, #0
 8004082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800408a:	f10a 0a01 	add.w	sl, sl, #1
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	9307      	str	r3, [sp, #28]
 8004092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004096:	931a      	str	r3, [sp, #104]	; 0x68
 8004098:	4654      	mov	r4, sl
 800409a:	2205      	movs	r2, #5
 800409c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a0:	4851      	ldr	r0, [pc, #324]	; (80041e8 <_svfiprintf_r+0x1ec>)
 80040a2:	f000 fa41 	bl	8004528 <memchr>
 80040a6:	9a04      	ldr	r2, [sp, #16]
 80040a8:	b9d8      	cbnz	r0, 80040e2 <_svfiprintf_r+0xe6>
 80040aa:	06d0      	lsls	r0, r2, #27
 80040ac:	bf44      	itt	mi
 80040ae:	2320      	movmi	r3, #32
 80040b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b4:	0711      	lsls	r1, r2, #28
 80040b6:	bf44      	itt	mi
 80040b8:	232b      	movmi	r3, #43	; 0x2b
 80040ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040be:	f89a 3000 	ldrb.w	r3, [sl]
 80040c2:	2b2a      	cmp	r3, #42	; 0x2a
 80040c4:	d015      	beq.n	80040f2 <_svfiprintf_r+0xf6>
 80040c6:	4654      	mov	r4, sl
 80040c8:	2000      	movs	r0, #0
 80040ca:	f04f 0c0a 	mov.w	ip, #10
 80040ce:	9a07      	ldr	r2, [sp, #28]
 80040d0:	4621      	mov	r1, r4
 80040d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d6:	3b30      	subs	r3, #48	; 0x30
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d94e      	bls.n	800417a <_svfiprintf_r+0x17e>
 80040dc:	b1b0      	cbz	r0, 800410c <_svfiprintf_r+0x110>
 80040de:	9207      	str	r2, [sp, #28]
 80040e0:	e014      	b.n	800410c <_svfiprintf_r+0x110>
 80040e2:	eba0 0308 	sub.w	r3, r0, r8
 80040e6:	fa09 f303 	lsl.w	r3, r9, r3
 80040ea:	4313      	orrs	r3, r2
 80040ec:	46a2      	mov	sl, r4
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	e7d2      	b.n	8004098 <_svfiprintf_r+0x9c>
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	1d19      	adds	r1, r3, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	9103      	str	r1, [sp, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bfbb      	ittet	lt
 80040fe:	425b      	neglt	r3, r3
 8004100:	f042 0202 	orrlt.w	r2, r2, #2
 8004104:	9307      	strge	r3, [sp, #28]
 8004106:	9307      	strlt	r3, [sp, #28]
 8004108:	bfb8      	it	lt
 800410a:	9204      	strlt	r2, [sp, #16]
 800410c:	7823      	ldrb	r3, [r4, #0]
 800410e:	2b2e      	cmp	r3, #46	; 0x2e
 8004110:	d10c      	bne.n	800412c <_svfiprintf_r+0x130>
 8004112:	7863      	ldrb	r3, [r4, #1]
 8004114:	2b2a      	cmp	r3, #42	; 0x2a
 8004116:	d135      	bne.n	8004184 <_svfiprintf_r+0x188>
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	3402      	adds	r4, #2
 800411c:	1d1a      	adds	r2, r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	9203      	str	r2, [sp, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfb8      	it	lt
 8004126:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800412a:	9305      	str	r3, [sp, #20]
 800412c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041f8 <_svfiprintf_r+0x1fc>
 8004130:	2203      	movs	r2, #3
 8004132:	4650      	mov	r0, sl
 8004134:	7821      	ldrb	r1, [r4, #0]
 8004136:	f000 f9f7 	bl	8004528 <memchr>
 800413a:	b140      	cbz	r0, 800414e <_svfiprintf_r+0x152>
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	eba0 000a 	sub.w	r0, r0, sl
 8004142:	fa03 f000 	lsl.w	r0, r3, r0
 8004146:	9b04      	ldr	r3, [sp, #16]
 8004148:	3401      	adds	r4, #1
 800414a:	4303      	orrs	r3, r0
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004152:	2206      	movs	r2, #6
 8004154:	4825      	ldr	r0, [pc, #148]	; (80041ec <_svfiprintf_r+0x1f0>)
 8004156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800415a:	f000 f9e5 	bl	8004528 <memchr>
 800415e:	2800      	cmp	r0, #0
 8004160:	d038      	beq.n	80041d4 <_svfiprintf_r+0x1d8>
 8004162:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <_svfiprintf_r+0x1f4>)
 8004164:	bb1b      	cbnz	r3, 80041ae <_svfiprintf_r+0x1b2>
 8004166:	9b03      	ldr	r3, [sp, #12]
 8004168:	3307      	adds	r3, #7
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	3308      	adds	r3, #8
 8004170:	9303      	str	r3, [sp, #12]
 8004172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004174:	4433      	add	r3, r6
 8004176:	9309      	str	r3, [sp, #36]	; 0x24
 8004178:	e767      	b.n	800404a <_svfiprintf_r+0x4e>
 800417a:	460c      	mov	r4, r1
 800417c:	2001      	movs	r0, #1
 800417e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004182:	e7a5      	b.n	80040d0 <_svfiprintf_r+0xd4>
 8004184:	2300      	movs	r3, #0
 8004186:	f04f 0c0a 	mov.w	ip, #10
 800418a:	4619      	mov	r1, r3
 800418c:	3401      	adds	r4, #1
 800418e:	9305      	str	r3, [sp, #20]
 8004190:	4620      	mov	r0, r4
 8004192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004196:	3a30      	subs	r2, #48	; 0x30
 8004198:	2a09      	cmp	r2, #9
 800419a:	d903      	bls.n	80041a4 <_svfiprintf_r+0x1a8>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0c5      	beq.n	800412c <_svfiprintf_r+0x130>
 80041a0:	9105      	str	r1, [sp, #20]
 80041a2:	e7c3      	b.n	800412c <_svfiprintf_r+0x130>
 80041a4:	4604      	mov	r4, r0
 80041a6:	2301      	movs	r3, #1
 80041a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ac:	e7f0      	b.n	8004190 <_svfiprintf_r+0x194>
 80041ae:	ab03      	add	r3, sp, #12
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	462a      	mov	r2, r5
 80041b4:	4638      	mov	r0, r7
 80041b6:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <_svfiprintf_r+0x1f8>)
 80041b8:	a904      	add	r1, sp, #16
 80041ba:	f3af 8000 	nop.w
 80041be:	1c42      	adds	r2, r0, #1
 80041c0:	4606      	mov	r6, r0
 80041c2:	d1d6      	bne.n	8004172 <_svfiprintf_r+0x176>
 80041c4:	89ab      	ldrh	r3, [r5, #12]
 80041c6:	065b      	lsls	r3, r3, #25
 80041c8:	f53f af2c 	bmi.w	8004024 <_svfiprintf_r+0x28>
 80041cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ce:	b01d      	add	sp, #116	; 0x74
 80041d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d4:	ab03      	add	r3, sp, #12
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	462a      	mov	r2, r5
 80041da:	4638      	mov	r0, r7
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <_svfiprintf_r+0x1f8>)
 80041de:	a904      	add	r1, sp, #16
 80041e0:	f000 f87c 	bl	80042dc <_printf_i>
 80041e4:	e7eb      	b.n	80041be <_svfiprintf_r+0x1c2>
 80041e6:	bf00      	nop
 80041e8:	080047cc 	.word	0x080047cc
 80041ec:	080047d6 	.word	0x080047d6
 80041f0:	00000000 	.word	0x00000000
 80041f4:	08003f45 	.word	0x08003f45
 80041f8:	080047d2 	.word	0x080047d2

080041fc <_printf_common>:
 80041fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	4616      	mov	r6, r2
 8004202:	4699      	mov	r9, r3
 8004204:	688a      	ldr	r2, [r1, #8]
 8004206:	690b      	ldr	r3, [r1, #16]
 8004208:	4607      	mov	r7, r0
 800420a:	4293      	cmp	r3, r2
 800420c:	bfb8      	it	lt
 800420e:	4613      	movlt	r3, r2
 8004210:	6033      	str	r3, [r6, #0]
 8004212:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004216:	460c      	mov	r4, r1
 8004218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800421c:	b10a      	cbz	r2, 8004222 <_printf_common+0x26>
 800421e:	3301      	adds	r3, #1
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0699      	lsls	r1, r3, #26
 8004226:	bf42      	ittt	mi
 8004228:	6833      	ldrmi	r3, [r6, #0]
 800422a:	3302      	addmi	r3, #2
 800422c:	6033      	strmi	r3, [r6, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	f015 0506 	ands.w	r5, r5, #6
 8004234:	d106      	bne.n	8004244 <_printf_common+0x48>
 8004236:	f104 0a19 	add.w	sl, r4, #25
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	6832      	ldr	r2, [r6, #0]
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	42ab      	cmp	r3, r5
 8004242:	dc28      	bgt.n	8004296 <_printf_common+0x9a>
 8004244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004248:	1e13      	subs	r3, r2, #0
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	bf18      	it	ne
 800424e:	2301      	movne	r3, #1
 8004250:	0692      	lsls	r2, r2, #26
 8004252:	d42d      	bmi.n	80042b0 <_printf_common+0xb4>
 8004254:	4649      	mov	r1, r9
 8004256:	4638      	mov	r0, r7
 8004258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800425c:	47c0      	blx	r8
 800425e:	3001      	adds	r0, #1
 8004260:	d020      	beq.n	80042a4 <_printf_common+0xa8>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	68e5      	ldr	r5, [r4, #12]
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf18      	it	ne
 800426e:	2500      	movne	r5, #0
 8004270:	6832      	ldr	r2, [r6, #0]
 8004272:	f04f 0600 	mov.w	r6, #0
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	bf08      	it	eq
 800427a:	1aad      	subeq	r5, r5, r2
 800427c:	6922      	ldr	r2, [r4, #16]
 800427e:	bf08      	it	eq
 8004280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004284:	4293      	cmp	r3, r2
 8004286:	bfc4      	itt	gt
 8004288:	1a9b      	subgt	r3, r3, r2
 800428a:	18ed      	addgt	r5, r5, r3
 800428c:	341a      	adds	r4, #26
 800428e:	42b5      	cmp	r5, r6
 8004290:	d11a      	bne.n	80042c8 <_printf_common+0xcc>
 8004292:	2000      	movs	r0, #0
 8004294:	e008      	b.n	80042a8 <_printf_common+0xac>
 8004296:	2301      	movs	r3, #1
 8004298:	4652      	mov	r2, sl
 800429a:	4649      	mov	r1, r9
 800429c:	4638      	mov	r0, r7
 800429e:	47c0      	blx	r8
 80042a0:	3001      	adds	r0, #1
 80042a2:	d103      	bne.n	80042ac <_printf_common+0xb0>
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ac:	3501      	adds	r5, #1
 80042ae:	e7c4      	b.n	800423a <_printf_common+0x3e>
 80042b0:	2030      	movs	r0, #48	; 0x30
 80042b2:	18e1      	adds	r1, r4, r3
 80042b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042be:	4422      	add	r2, r4
 80042c0:	3302      	adds	r3, #2
 80042c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042c6:	e7c5      	b.n	8004254 <_printf_common+0x58>
 80042c8:	2301      	movs	r3, #1
 80042ca:	4622      	mov	r2, r4
 80042cc:	4649      	mov	r1, r9
 80042ce:	4638      	mov	r0, r7
 80042d0:	47c0      	blx	r8
 80042d2:	3001      	adds	r0, #1
 80042d4:	d0e6      	beq.n	80042a4 <_printf_common+0xa8>
 80042d6:	3601      	adds	r6, #1
 80042d8:	e7d9      	b.n	800428e <_printf_common+0x92>
	...

080042dc <_printf_i>:
 80042dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e0:	460c      	mov	r4, r1
 80042e2:	7e27      	ldrb	r7, [r4, #24]
 80042e4:	4691      	mov	r9, r2
 80042e6:	2f78      	cmp	r7, #120	; 0x78
 80042e8:	4680      	mov	r8, r0
 80042ea:	469a      	mov	sl, r3
 80042ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042f2:	d807      	bhi.n	8004304 <_printf_i+0x28>
 80042f4:	2f62      	cmp	r7, #98	; 0x62
 80042f6:	d80a      	bhi.n	800430e <_printf_i+0x32>
 80042f8:	2f00      	cmp	r7, #0
 80042fa:	f000 80d9 	beq.w	80044b0 <_printf_i+0x1d4>
 80042fe:	2f58      	cmp	r7, #88	; 0x58
 8004300:	f000 80a4 	beq.w	800444c <_printf_i+0x170>
 8004304:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800430c:	e03a      	b.n	8004384 <_printf_i+0xa8>
 800430e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004312:	2b15      	cmp	r3, #21
 8004314:	d8f6      	bhi.n	8004304 <_printf_i+0x28>
 8004316:	a001      	add	r0, pc, #4	; (adr r0, 800431c <_printf_i+0x40>)
 8004318:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800431c:	08004375 	.word	0x08004375
 8004320:	08004389 	.word	0x08004389
 8004324:	08004305 	.word	0x08004305
 8004328:	08004305 	.word	0x08004305
 800432c:	08004305 	.word	0x08004305
 8004330:	08004305 	.word	0x08004305
 8004334:	08004389 	.word	0x08004389
 8004338:	08004305 	.word	0x08004305
 800433c:	08004305 	.word	0x08004305
 8004340:	08004305 	.word	0x08004305
 8004344:	08004305 	.word	0x08004305
 8004348:	08004497 	.word	0x08004497
 800434c:	080043b9 	.word	0x080043b9
 8004350:	08004479 	.word	0x08004479
 8004354:	08004305 	.word	0x08004305
 8004358:	08004305 	.word	0x08004305
 800435c:	080044b9 	.word	0x080044b9
 8004360:	08004305 	.word	0x08004305
 8004364:	080043b9 	.word	0x080043b9
 8004368:	08004305 	.word	0x08004305
 800436c:	08004305 	.word	0x08004305
 8004370:	08004481 	.word	0x08004481
 8004374:	680b      	ldr	r3, [r1, #0]
 8004376:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	600a      	str	r2, [r1, #0]
 8004380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004384:	2301      	movs	r3, #1
 8004386:	e0a4      	b.n	80044d2 <_printf_i+0x1f6>
 8004388:	6825      	ldr	r5, [r4, #0]
 800438a:	6808      	ldr	r0, [r1, #0]
 800438c:	062e      	lsls	r6, r5, #24
 800438e:	f100 0304 	add.w	r3, r0, #4
 8004392:	d50a      	bpl.n	80043aa <_printf_i+0xce>
 8004394:	6805      	ldr	r5, [r0, #0]
 8004396:	600b      	str	r3, [r1, #0]
 8004398:	2d00      	cmp	r5, #0
 800439a:	da03      	bge.n	80043a4 <_printf_i+0xc8>
 800439c:	232d      	movs	r3, #45	; 0x2d
 800439e:	426d      	negs	r5, r5
 80043a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043a4:	230a      	movs	r3, #10
 80043a6:	485e      	ldr	r0, [pc, #376]	; (8004520 <_printf_i+0x244>)
 80043a8:	e019      	b.n	80043de <_printf_i+0x102>
 80043aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043ae:	6805      	ldr	r5, [r0, #0]
 80043b0:	600b      	str	r3, [r1, #0]
 80043b2:	bf18      	it	ne
 80043b4:	b22d      	sxthne	r5, r5
 80043b6:	e7ef      	b.n	8004398 <_printf_i+0xbc>
 80043b8:	680b      	ldr	r3, [r1, #0]
 80043ba:	6825      	ldr	r5, [r4, #0]
 80043bc:	1d18      	adds	r0, r3, #4
 80043be:	6008      	str	r0, [r1, #0]
 80043c0:	0628      	lsls	r0, r5, #24
 80043c2:	d501      	bpl.n	80043c8 <_printf_i+0xec>
 80043c4:	681d      	ldr	r5, [r3, #0]
 80043c6:	e002      	b.n	80043ce <_printf_i+0xf2>
 80043c8:	0669      	lsls	r1, r5, #25
 80043ca:	d5fb      	bpl.n	80043c4 <_printf_i+0xe8>
 80043cc:	881d      	ldrh	r5, [r3, #0]
 80043ce:	2f6f      	cmp	r7, #111	; 0x6f
 80043d0:	bf0c      	ite	eq
 80043d2:	2308      	moveq	r3, #8
 80043d4:	230a      	movne	r3, #10
 80043d6:	4852      	ldr	r0, [pc, #328]	; (8004520 <_printf_i+0x244>)
 80043d8:	2100      	movs	r1, #0
 80043da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043de:	6866      	ldr	r6, [r4, #4]
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	bfa8      	it	ge
 80043e4:	6821      	ldrge	r1, [r4, #0]
 80043e6:	60a6      	str	r6, [r4, #8]
 80043e8:	bfa4      	itt	ge
 80043ea:	f021 0104 	bicge.w	r1, r1, #4
 80043ee:	6021      	strge	r1, [r4, #0]
 80043f0:	b90d      	cbnz	r5, 80043f6 <_printf_i+0x11a>
 80043f2:	2e00      	cmp	r6, #0
 80043f4:	d04d      	beq.n	8004492 <_printf_i+0x1b6>
 80043f6:	4616      	mov	r6, r2
 80043f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043fc:	fb03 5711 	mls	r7, r3, r1, r5
 8004400:	5dc7      	ldrb	r7, [r0, r7]
 8004402:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004406:	462f      	mov	r7, r5
 8004408:	42bb      	cmp	r3, r7
 800440a:	460d      	mov	r5, r1
 800440c:	d9f4      	bls.n	80043f8 <_printf_i+0x11c>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d10b      	bne.n	800442a <_printf_i+0x14e>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	07df      	lsls	r7, r3, #31
 8004416:	d508      	bpl.n	800442a <_printf_i+0x14e>
 8004418:	6923      	ldr	r3, [r4, #16]
 800441a:	6861      	ldr	r1, [r4, #4]
 800441c:	4299      	cmp	r1, r3
 800441e:	bfde      	ittt	le
 8004420:	2330      	movle	r3, #48	; 0x30
 8004422:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004426:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800442a:	1b92      	subs	r2, r2, r6
 800442c:	6122      	str	r2, [r4, #16]
 800442e:	464b      	mov	r3, r9
 8004430:	4621      	mov	r1, r4
 8004432:	4640      	mov	r0, r8
 8004434:	f8cd a000 	str.w	sl, [sp]
 8004438:	aa03      	add	r2, sp, #12
 800443a:	f7ff fedf 	bl	80041fc <_printf_common>
 800443e:	3001      	adds	r0, #1
 8004440:	d14c      	bne.n	80044dc <_printf_i+0x200>
 8004442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004446:	b004      	add	sp, #16
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	4834      	ldr	r0, [pc, #208]	; (8004520 <_printf_i+0x244>)
 800444e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004452:	680e      	ldr	r6, [r1, #0]
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f856 5b04 	ldr.w	r5, [r6], #4
 800445a:	061f      	lsls	r7, r3, #24
 800445c:	600e      	str	r6, [r1, #0]
 800445e:	d514      	bpl.n	800448a <_printf_i+0x1ae>
 8004460:	07d9      	lsls	r1, r3, #31
 8004462:	bf44      	itt	mi
 8004464:	f043 0320 	orrmi.w	r3, r3, #32
 8004468:	6023      	strmi	r3, [r4, #0]
 800446a:	b91d      	cbnz	r5, 8004474 <_printf_i+0x198>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	f023 0320 	bic.w	r3, r3, #32
 8004472:	6023      	str	r3, [r4, #0]
 8004474:	2310      	movs	r3, #16
 8004476:	e7af      	b.n	80043d8 <_printf_i+0xfc>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f043 0320 	orr.w	r3, r3, #32
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	2378      	movs	r3, #120	; 0x78
 8004482:	4828      	ldr	r0, [pc, #160]	; (8004524 <_printf_i+0x248>)
 8004484:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004488:	e7e3      	b.n	8004452 <_printf_i+0x176>
 800448a:	065e      	lsls	r6, r3, #25
 800448c:	bf48      	it	mi
 800448e:	b2ad      	uxthmi	r5, r5
 8004490:	e7e6      	b.n	8004460 <_printf_i+0x184>
 8004492:	4616      	mov	r6, r2
 8004494:	e7bb      	b.n	800440e <_printf_i+0x132>
 8004496:	680b      	ldr	r3, [r1, #0]
 8004498:	6826      	ldr	r6, [r4, #0]
 800449a:	1d1d      	adds	r5, r3, #4
 800449c:	6960      	ldr	r0, [r4, #20]
 800449e:	600d      	str	r5, [r1, #0]
 80044a0:	0635      	lsls	r5, r6, #24
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	d501      	bpl.n	80044aa <_printf_i+0x1ce>
 80044a6:	6018      	str	r0, [r3, #0]
 80044a8:	e002      	b.n	80044b0 <_printf_i+0x1d4>
 80044aa:	0671      	lsls	r1, r6, #25
 80044ac:	d5fb      	bpl.n	80044a6 <_printf_i+0x1ca>
 80044ae:	8018      	strh	r0, [r3, #0]
 80044b0:	2300      	movs	r3, #0
 80044b2:	4616      	mov	r6, r2
 80044b4:	6123      	str	r3, [r4, #16]
 80044b6:	e7ba      	b.n	800442e <_printf_i+0x152>
 80044b8:	680b      	ldr	r3, [r1, #0]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	600a      	str	r2, [r1, #0]
 80044be:	681e      	ldr	r6, [r3, #0]
 80044c0:	2100      	movs	r1, #0
 80044c2:	4630      	mov	r0, r6
 80044c4:	6862      	ldr	r2, [r4, #4]
 80044c6:	f000 f82f 	bl	8004528 <memchr>
 80044ca:	b108      	cbz	r0, 80044d0 <_printf_i+0x1f4>
 80044cc:	1b80      	subs	r0, r0, r6
 80044ce:	6060      	str	r0, [r4, #4]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	6123      	str	r3, [r4, #16]
 80044d4:	2300      	movs	r3, #0
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044da:	e7a8      	b.n	800442e <_printf_i+0x152>
 80044dc:	4632      	mov	r2, r6
 80044de:	4649      	mov	r1, r9
 80044e0:	4640      	mov	r0, r8
 80044e2:	6923      	ldr	r3, [r4, #16]
 80044e4:	47d0      	blx	sl
 80044e6:	3001      	adds	r0, #1
 80044e8:	d0ab      	beq.n	8004442 <_printf_i+0x166>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	079b      	lsls	r3, r3, #30
 80044ee:	d413      	bmi.n	8004518 <_printf_i+0x23c>
 80044f0:	68e0      	ldr	r0, [r4, #12]
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	4298      	cmp	r0, r3
 80044f6:	bfb8      	it	lt
 80044f8:	4618      	movlt	r0, r3
 80044fa:	e7a4      	b.n	8004446 <_printf_i+0x16a>
 80044fc:	2301      	movs	r3, #1
 80044fe:	4632      	mov	r2, r6
 8004500:	4649      	mov	r1, r9
 8004502:	4640      	mov	r0, r8
 8004504:	47d0      	blx	sl
 8004506:	3001      	adds	r0, #1
 8004508:	d09b      	beq.n	8004442 <_printf_i+0x166>
 800450a:	3501      	adds	r5, #1
 800450c:	68e3      	ldr	r3, [r4, #12]
 800450e:	9903      	ldr	r1, [sp, #12]
 8004510:	1a5b      	subs	r3, r3, r1
 8004512:	42ab      	cmp	r3, r5
 8004514:	dcf2      	bgt.n	80044fc <_printf_i+0x220>
 8004516:	e7eb      	b.n	80044f0 <_printf_i+0x214>
 8004518:	2500      	movs	r5, #0
 800451a:	f104 0619 	add.w	r6, r4, #25
 800451e:	e7f5      	b.n	800450c <_printf_i+0x230>
 8004520:	080047dd 	.word	0x080047dd
 8004524:	080047ee 	.word	0x080047ee

08004528 <memchr>:
 8004528:	4603      	mov	r3, r0
 800452a:	b510      	push	{r4, lr}
 800452c:	b2c9      	uxtb	r1, r1
 800452e:	4402      	add	r2, r0
 8004530:	4293      	cmp	r3, r2
 8004532:	4618      	mov	r0, r3
 8004534:	d101      	bne.n	800453a <memchr+0x12>
 8004536:	2000      	movs	r0, #0
 8004538:	e003      	b.n	8004542 <memchr+0x1a>
 800453a:	7804      	ldrb	r4, [r0, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	428c      	cmp	r4, r1
 8004540:	d1f6      	bne.n	8004530 <memchr+0x8>
 8004542:	bd10      	pop	{r4, pc}

08004544 <memmove>:
 8004544:	4288      	cmp	r0, r1
 8004546:	b510      	push	{r4, lr}
 8004548:	eb01 0402 	add.w	r4, r1, r2
 800454c:	d902      	bls.n	8004554 <memmove+0x10>
 800454e:	4284      	cmp	r4, r0
 8004550:	4623      	mov	r3, r4
 8004552:	d807      	bhi.n	8004564 <memmove+0x20>
 8004554:	1e43      	subs	r3, r0, #1
 8004556:	42a1      	cmp	r1, r4
 8004558:	d008      	beq.n	800456c <memmove+0x28>
 800455a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800455e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004562:	e7f8      	b.n	8004556 <memmove+0x12>
 8004564:	4601      	mov	r1, r0
 8004566:	4402      	add	r2, r0
 8004568:	428a      	cmp	r2, r1
 800456a:	d100      	bne.n	800456e <memmove+0x2a>
 800456c:	bd10      	pop	{r4, pc}
 800456e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004576:	e7f7      	b.n	8004568 <memmove+0x24>

08004578 <_free_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4605      	mov	r5, r0
 800457c:	2900      	cmp	r1, #0
 800457e:	d043      	beq.n	8004608 <_free_r+0x90>
 8004580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004584:	1f0c      	subs	r4, r1, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	bfb8      	it	lt
 800458a:	18e4      	addlt	r4, r4, r3
 800458c:	f000 f8d0 	bl	8004730 <__malloc_lock>
 8004590:	4a1e      	ldr	r2, [pc, #120]	; (800460c <_free_r+0x94>)
 8004592:	6813      	ldr	r3, [r2, #0]
 8004594:	4610      	mov	r0, r2
 8004596:	b933      	cbnz	r3, 80045a6 <_free_r+0x2e>
 8004598:	6063      	str	r3, [r4, #4]
 800459a:	6014      	str	r4, [r2, #0]
 800459c:	4628      	mov	r0, r5
 800459e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045a2:	f000 b8cb 	b.w	800473c <__malloc_unlock>
 80045a6:	42a3      	cmp	r3, r4
 80045a8:	d90a      	bls.n	80045c0 <_free_r+0x48>
 80045aa:	6821      	ldr	r1, [r4, #0]
 80045ac:	1862      	adds	r2, r4, r1
 80045ae:	4293      	cmp	r3, r2
 80045b0:	bf01      	itttt	eq
 80045b2:	681a      	ldreq	r2, [r3, #0]
 80045b4:	685b      	ldreq	r3, [r3, #4]
 80045b6:	1852      	addeq	r2, r2, r1
 80045b8:	6022      	streq	r2, [r4, #0]
 80045ba:	6063      	str	r3, [r4, #4]
 80045bc:	6004      	str	r4, [r0, #0]
 80045be:	e7ed      	b.n	800459c <_free_r+0x24>
 80045c0:	461a      	mov	r2, r3
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	b10b      	cbz	r3, 80045ca <_free_r+0x52>
 80045c6:	42a3      	cmp	r3, r4
 80045c8:	d9fa      	bls.n	80045c0 <_free_r+0x48>
 80045ca:	6811      	ldr	r1, [r2, #0]
 80045cc:	1850      	adds	r0, r2, r1
 80045ce:	42a0      	cmp	r0, r4
 80045d0:	d10b      	bne.n	80045ea <_free_r+0x72>
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	4401      	add	r1, r0
 80045d6:	1850      	adds	r0, r2, r1
 80045d8:	4283      	cmp	r3, r0
 80045da:	6011      	str	r1, [r2, #0]
 80045dc:	d1de      	bne.n	800459c <_free_r+0x24>
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4401      	add	r1, r0
 80045e4:	6011      	str	r1, [r2, #0]
 80045e6:	6053      	str	r3, [r2, #4]
 80045e8:	e7d8      	b.n	800459c <_free_r+0x24>
 80045ea:	d902      	bls.n	80045f2 <_free_r+0x7a>
 80045ec:	230c      	movs	r3, #12
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	e7d4      	b.n	800459c <_free_r+0x24>
 80045f2:	6820      	ldr	r0, [r4, #0]
 80045f4:	1821      	adds	r1, r4, r0
 80045f6:	428b      	cmp	r3, r1
 80045f8:	bf01      	itttt	eq
 80045fa:	6819      	ldreq	r1, [r3, #0]
 80045fc:	685b      	ldreq	r3, [r3, #4]
 80045fe:	1809      	addeq	r1, r1, r0
 8004600:	6021      	streq	r1, [r4, #0]
 8004602:	6063      	str	r3, [r4, #4]
 8004604:	6054      	str	r4, [r2, #4]
 8004606:	e7c9      	b.n	800459c <_free_r+0x24>
 8004608:	bd38      	pop	{r3, r4, r5, pc}
 800460a:	bf00      	nop
 800460c:	2000021c 	.word	0x2000021c

08004610 <_malloc_r>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	1ccd      	adds	r5, r1, #3
 8004614:	f025 0503 	bic.w	r5, r5, #3
 8004618:	3508      	adds	r5, #8
 800461a:	2d0c      	cmp	r5, #12
 800461c:	bf38      	it	cc
 800461e:	250c      	movcc	r5, #12
 8004620:	2d00      	cmp	r5, #0
 8004622:	4606      	mov	r6, r0
 8004624:	db01      	blt.n	800462a <_malloc_r+0x1a>
 8004626:	42a9      	cmp	r1, r5
 8004628:	d903      	bls.n	8004632 <_malloc_r+0x22>
 800462a:	230c      	movs	r3, #12
 800462c:	6033      	str	r3, [r6, #0]
 800462e:	2000      	movs	r0, #0
 8004630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004632:	f000 f87d 	bl	8004730 <__malloc_lock>
 8004636:	4921      	ldr	r1, [pc, #132]	; (80046bc <_malloc_r+0xac>)
 8004638:	680a      	ldr	r2, [r1, #0]
 800463a:	4614      	mov	r4, r2
 800463c:	b99c      	cbnz	r4, 8004666 <_malloc_r+0x56>
 800463e:	4f20      	ldr	r7, [pc, #128]	; (80046c0 <_malloc_r+0xb0>)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	b923      	cbnz	r3, 800464e <_malloc_r+0x3e>
 8004644:	4621      	mov	r1, r4
 8004646:	4630      	mov	r0, r6
 8004648:	f000 f862 	bl	8004710 <_sbrk_r>
 800464c:	6038      	str	r0, [r7, #0]
 800464e:	4629      	mov	r1, r5
 8004650:	4630      	mov	r0, r6
 8004652:	f000 f85d 	bl	8004710 <_sbrk_r>
 8004656:	1c43      	adds	r3, r0, #1
 8004658:	d123      	bne.n	80046a2 <_malloc_r+0x92>
 800465a:	230c      	movs	r3, #12
 800465c:	4630      	mov	r0, r6
 800465e:	6033      	str	r3, [r6, #0]
 8004660:	f000 f86c 	bl	800473c <__malloc_unlock>
 8004664:	e7e3      	b.n	800462e <_malloc_r+0x1e>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	1b5b      	subs	r3, r3, r5
 800466a:	d417      	bmi.n	800469c <_malloc_r+0x8c>
 800466c:	2b0b      	cmp	r3, #11
 800466e:	d903      	bls.n	8004678 <_malloc_r+0x68>
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	441c      	add	r4, r3
 8004674:	6025      	str	r5, [r4, #0]
 8004676:	e004      	b.n	8004682 <_malloc_r+0x72>
 8004678:	6863      	ldr	r3, [r4, #4]
 800467a:	42a2      	cmp	r2, r4
 800467c:	bf0c      	ite	eq
 800467e:	600b      	streq	r3, [r1, #0]
 8004680:	6053      	strne	r3, [r2, #4]
 8004682:	4630      	mov	r0, r6
 8004684:	f000 f85a 	bl	800473c <__malloc_unlock>
 8004688:	f104 000b 	add.w	r0, r4, #11
 800468c:	1d23      	adds	r3, r4, #4
 800468e:	f020 0007 	bic.w	r0, r0, #7
 8004692:	1ac2      	subs	r2, r0, r3
 8004694:	d0cc      	beq.n	8004630 <_malloc_r+0x20>
 8004696:	1a1b      	subs	r3, r3, r0
 8004698:	50a3      	str	r3, [r4, r2]
 800469a:	e7c9      	b.n	8004630 <_malloc_r+0x20>
 800469c:	4622      	mov	r2, r4
 800469e:	6864      	ldr	r4, [r4, #4]
 80046a0:	e7cc      	b.n	800463c <_malloc_r+0x2c>
 80046a2:	1cc4      	adds	r4, r0, #3
 80046a4:	f024 0403 	bic.w	r4, r4, #3
 80046a8:	42a0      	cmp	r0, r4
 80046aa:	d0e3      	beq.n	8004674 <_malloc_r+0x64>
 80046ac:	1a21      	subs	r1, r4, r0
 80046ae:	4630      	mov	r0, r6
 80046b0:	f000 f82e 	bl	8004710 <_sbrk_r>
 80046b4:	3001      	adds	r0, #1
 80046b6:	d1dd      	bne.n	8004674 <_malloc_r+0x64>
 80046b8:	e7cf      	b.n	800465a <_malloc_r+0x4a>
 80046ba:	bf00      	nop
 80046bc:	2000021c 	.word	0x2000021c
 80046c0:	20000220 	.word	0x20000220

080046c4 <_realloc_r>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	4607      	mov	r7, r0
 80046c8:	4614      	mov	r4, r2
 80046ca:	460e      	mov	r6, r1
 80046cc:	b921      	cbnz	r1, 80046d8 <_realloc_r+0x14>
 80046ce:	4611      	mov	r1, r2
 80046d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046d4:	f7ff bf9c 	b.w	8004610 <_malloc_r>
 80046d8:	b922      	cbnz	r2, 80046e4 <_realloc_r+0x20>
 80046da:	f7ff ff4d 	bl	8004578 <_free_r>
 80046de:	4625      	mov	r5, r4
 80046e0:	4628      	mov	r0, r5
 80046e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e4:	f000 f830 	bl	8004748 <_malloc_usable_size_r>
 80046e8:	42a0      	cmp	r0, r4
 80046ea:	d20f      	bcs.n	800470c <_realloc_r+0x48>
 80046ec:	4621      	mov	r1, r4
 80046ee:	4638      	mov	r0, r7
 80046f0:	f7ff ff8e 	bl	8004610 <_malloc_r>
 80046f4:	4605      	mov	r5, r0
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d0f2      	beq.n	80046e0 <_realloc_r+0x1c>
 80046fa:	4631      	mov	r1, r6
 80046fc:	4622      	mov	r2, r4
 80046fe:	f7ff fbeb 	bl	8003ed8 <memcpy>
 8004702:	4631      	mov	r1, r6
 8004704:	4638      	mov	r0, r7
 8004706:	f7ff ff37 	bl	8004578 <_free_r>
 800470a:	e7e9      	b.n	80046e0 <_realloc_r+0x1c>
 800470c:	4635      	mov	r5, r6
 800470e:	e7e7      	b.n	80046e0 <_realloc_r+0x1c>

08004710 <_sbrk_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	2300      	movs	r3, #0
 8004714:	4d05      	ldr	r5, [pc, #20]	; (800472c <_sbrk_r+0x1c>)
 8004716:	4604      	mov	r4, r0
 8004718:	4608      	mov	r0, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	f7fc ff3e 	bl	800159c <_sbrk>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_sbrk_r+0x1a>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_sbrk_r+0x1a>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	20000228 	.word	0x20000228

08004730 <__malloc_lock>:
 8004730:	4801      	ldr	r0, [pc, #4]	; (8004738 <__malloc_lock+0x8>)
 8004732:	f000 b811 	b.w	8004758 <__retarget_lock_acquire_recursive>
 8004736:	bf00      	nop
 8004738:	20000230 	.word	0x20000230

0800473c <__malloc_unlock>:
 800473c:	4801      	ldr	r0, [pc, #4]	; (8004744 <__malloc_unlock+0x8>)
 800473e:	f000 b80c 	b.w	800475a <__retarget_lock_release_recursive>
 8004742:	bf00      	nop
 8004744:	20000230 	.word	0x20000230

08004748 <_malloc_usable_size_r>:
 8004748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800474c:	1f18      	subs	r0, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	bfbc      	itt	lt
 8004752:	580b      	ldrlt	r3, [r1, r0]
 8004754:	18c0      	addlt	r0, r0, r3
 8004756:	4770      	bx	lr

08004758 <__retarget_lock_acquire_recursive>:
 8004758:	4770      	bx	lr

0800475a <__retarget_lock_release_recursive>:
 800475a:	4770      	bx	lr

0800475c <_init>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr

08004768 <_fini>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr
