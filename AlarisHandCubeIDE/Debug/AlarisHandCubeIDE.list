
AlarisHandCubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000448c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004608  08004608  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004608  08004608  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004608  08004608  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08004680  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004680  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb40  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002465  00000000  00000000  0002fbd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00032040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00032d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b047  00000000  00000000  000339e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee63  00000000  00000000  0004ea2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091aa2  00000000  00000000  0005d892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef334  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  000ef388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004580 	.word	0x08004580

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004580 	.word	0x08004580

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000160:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8000164:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f001 f98d 	bl	8001484 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f9d7 	bl	800051c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 fd2b 	bl	8000bc8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000172:	f000 fd0b 	bl	8000b8c <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000176:	f000 fa3b 	bl	80005f0 <_ZL12MX_ADC1_Initv>
  MX_USART1_UART_Init();
 800017a:	f000 fcd9 	bl	8000b30 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 800017e:	f000 fadf 	bl	8000740 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000182:	f000 fba7 	bl	80008d4 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000186:	f000 fc3b 	bl	8000a00 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  //Motor order 1->6: pinky (1), ring (2), middle (3), index (4), thumb1 (5), thumb2 (6)
  Motor m1(htim1, TIM_CHANNEL_1, htim1, TIM_CHANNEL_2, 200, 900);
 800018a:	4ec6      	ldr	r6, [pc, #792]	; (80004a4 <main+0x348>)
 800018c:	f507 7858 	add.w	r8, r7, #864	; 0x360
 8000190:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000194:	9324      	str	r3, [sp, #144]	; 0x90
 8000196:	23c8      	movs	r3, #200	; 0xc8
 8000198:	9323      	str	r3, [sp, #140]	; 0x8c
 800019a:	2304      	movs	r3, #4
 800019c:	9322      	str	r3, [sp, #136]	; 0x88
 800019e:	4ac1      	ldr	r2, [pc, #772]	; (80004a4 <main+0x348>)
 80001a0:	ab10      	add	r3, sp, #64	; 0x40
 80001a2:	4611      	mov	r1, r2
 80001a4:	2248      	movs	r2, #72	; 0x48
 80001a6:	4618      	mov	r0, r3
 80001a8:	f003 fda8 	bl	8003cfc <memcpy>
 80001ac:	2300      	movs	r3, #0
 80001ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80001b0:	466d      	mov	r5, sp
 80001b2:	f106 040c 	add.w	r4, r6, #12
 80001b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80001c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80001ca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80001ce:	4640      	mov	r0, r8
 80001d0:	f000 fd57 	bl	8000c82 <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m2(htim1, TIM_CHANNEL_3, htim1, TIM_CHANNEL_4, 200, 900);
 80001d4:	4eb3      	ldr	r6, [pc, #716]	; (80004a4 <main+0x348>)
 80001d6:	f507 782d 	add.w	r8, r7, #692	; 0x2b4
 80001da:	f44f 7361 	mov.w	r3, #900	; 0x384
 80001de:	9324      	str	r3, [sp, #144]	; 0x90
 80001e0:	23c8      	movs	r3, #200	; 0xc8
 80001e2:	9323      	str	r3, [sp, #140]	; 0x8c
 80001e4:	230c      	movs	r3, #12
 80001e6:	9322      	str	r3, [sp, #136]	; 0x88
 80001e8:	4aae      	ldr	r2, [pc, #696]	; (80004a4 <main+0x348>)
 80001ea:	ab10      	add	r3, sp, #64	; 0x40
 80001ec:	4611      	mov	r1, r2
 80001ee:	2248      	movs	r2, #72	; 0x48
 80001f0:	4618      	mov	r0, r3
 80001f2:	f003 fd83 	bl	8003cfc <memcpy>
 80001f6:	2308      	movs	r3, #8
 80001f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80001fa:	466d      	mov	r5, sp
 80001fc:	f106 040c 	add.w	r4, r6, #12
 8000200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800020a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800020c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000210:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000214:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000218:	4640      	mov	r0, r8
 800021a:	f000 fd32 	bl	8000c82 <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m3(htim2, TIM_CHANNEL_1, htim2, TIM_CHANNEL_2, 200, 900);
 800021e:	4ea2      	ldr	r6, [pc, #648]	; (80004a8 <main+0x34c>)
 8000220:	f507 7802 	add.w	r8, r7, #520	; 0x208
 8000224:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000228:	9324      	str	r3, [sp, #144]	; 0x90
 800022a:	23c8      	movs	r3, #200	; 0xc8
 800022c:	9323      	str	r3, [sp, #140]	; 0x8c
 800022e:	2304      	movs	r3, #4
 8000230:	9322      	str	r3, [sp, #136]	; 0x88
 8000232:	4a9d      	ldr	r2, [pc, #628]	; (80004a8 <main+0x34c>)
 8000234:	ab10      	add	r3, sp, #64	; 0x40
 8000236:	4611      	mov	r1, r2
 8000238:	2248      	movs	r2, #72	; 0x48
 800023a:	4618      	mov	r0, r3
 800023c:	f003 fd5e 	bl	8003cfc <memcpy>
 8000240:	2300      	movs	r3, #0
 8000242:	930f      	str	r3, [sp, #60]	; 0x3c
 8000244:	466d      	mov	r5, sp
 8000246:	f106 040c 	add.w	r4, r6, #12
 800024a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800024c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800024e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000256:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800025a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800025e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000262:	4640      	mov	r0, r8
 8000264:	f000 fd0d 	bl	8000c82 <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m4(htim2, TIM_CHANNEL_3, htim2, TIM_CHANNEL_4, 200, 250);
 8000268:	4e8f      	ldr	r6, [pc, #572]	; (80004a8 <main+0x34c>)
 800026a:	f507 78ae 	add.w	r8, r7, #348	; 0x15c
 800026e:	23fa      	movs	r3, #250	; 0xfa
 8000270:	9324      	str	r3, [sp, #144]	; 0x90
 8000272:	23c8      	movs	r3, #200	; 0xc8
 8000274:	9323      	str	r3, [sp, #140]	; 0x8c
 8000276:	230c      	movs	r3, #12
 8000278:	9322      	str	r3, [sp, #136]	; 0x88
 800027a:	4a8b      	ldr	r2, [pc, #556]	; (80004a8 <main+0x34c>)
 800027c:	ab10      	add	r3, sp, #64	; 0x40
 800027e:	4611      	mov	r1, r2
 8000280:	2248      	movs	r2, #72	; 0x48
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fd3a 	bl	8003cfc <memcpy>
 8000288:	2308      	movs	r3, #8
 800028a:	930f      	str	r3, [sp, #60]	; 0x3c
 800028c:	466d      	mov	r5, sp
 800028e:	f106 040c 	add.w	r4, r6, #12
 8000292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800029a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800029c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800029e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80002a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80002a6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80002aa:	4640      	mov	r0, r8
 80002ac:	f000 fce9 	bl	8000c82 <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m5(htim3, TIM_CHANNEL_1, htim3, TIM_CHANNEL_2, 200, 250);
 80002b0:	4e7e      	ldr	r6, [pc, #504]	; (80004ac <main+0x350>)
 80002b2:	f107 08b0 	add.w	r8, r7, #176	; 0xb0
 80002b6:	23fa      	movs	r3, #250	; 0xfa
 80002b8:	9324      	str	r3, [sp, #144]	; 0x90
 80002ba:	23c8      	movs	r3, #200	; 0xc8
 80002bc:	9323      	str	r3, [sp, #140]	; 0x8c
 80002be:	2304      	movs	r3, #4
 80002c0:	9322      	str	r3, [sp, #136]	; 0x88
 80002c2:	4a7a      	ldr	r2, [pc, #488]	; (80004ac <main+0x350>)
 80002c4:	ab10      	add	r3, sp, #64	; 0x40
 80002c6:	4611      	mov	r1, r2
 80002c8:	2248      	movs	r2, #72	; 0x48
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 fd16 	bl	8003cfc <memcpy>
 80002d0:	2300      	movs	r3, #0
 80002d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80002d4:	466d      	mov	r5, sp
 80002d6:	f106 040c 	add.w	r4, r6, #12
 80002da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002e6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80002ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80002ee:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80002f2:	4640      	mov	r0, r8
 80002f4:	f000 fcc5 	bl	8000c82 <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  Motor m6(htim3, TIM_CHANNEL_3, htim3, TIM_CHANNEL_4, 200, 250);
 80002f8:	4e6c      	ldr	r6, [pc, #432]	; (80004ac <main+0x350>)
 80002fa:	f107 0804 	add.w	r8, r7, #4
 80002fe:	23fa      	movs	r3, #250	; 0xfa
 8000300:	9324      	str	r3, [sp, #144]	; 0x90
 8000302:	23c8      	movs	r3, #200	; 0xc8
 8000304:	9323      	str	r3, [sp, #140]	; 0x8c
 8000306:	230c      	movs	r3, #12
 8000308:	9322      	str	r3, [sp, #136]	; 0x88
 800030a:	4a68      	ldr	r2, [pc, #416]	; (80004ac <main+0x350>)
 800030c:	ab10      	add	r3, sp, #64	; 0x40
 800030e:	4611      	mov	r1, r2
 8000310:	2248      	movs	r2, #72	; 0x48
 8000312:	4618      	mov	r0, r3
 8000314:	f003 fcf2 	bl	8003cfc <memcpy>
 8000318:	2308      	movs	r3, #8
 800031a:	930f      	str	r3, [sp, #60]	; 0x3c
 800031c:	466d      	mov	r5, sp
 800031e:	f106 040c 	add.w	r4, r6, #12
 8000322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800032a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800032c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800032e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000332:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000336:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800033a:	4640      	mov	r0, r8
 800033c:	f000 fca1 	bl	8000c82 <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>
  /**
   * Starts ADC for all 6 joints and stores most current
   * values of joints in the given array (rawadc)
   * independently from the main loop.
   */
  HAL_ADC_Start_DMA(&hadc1, rawadc, 6);
 8000340:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000344:	2206      	movs	r2, #6
 8000346:	4619      	mov	r1, r3
 8000348:	4859      	ldr	r0, [pc, #356]	; (80004b0 <main+0x354>)
 800034a:	f001 f9f9 	bl	8001740 <HAL_ADC_Start_DMA>

  HAL_Delay(20);
 800034e:	2014      	movs	r0, #20
 8000350:	f001 f8fa 	bl	8001548 <HAL_Delay>
  m1.init(rawadc[0]);
 8000354:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000358:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800035c:	4611      	mov	r1, r2
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fcf7 	bl	8000d52 <_ZN5Motor4initEm>
  m2.init(rawadc[1]);
 8000364:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000368:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800036c:	4611      	mov	r1, r2
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fcef 	bl	8000d52 <_ZN5Motor4initEm>
  m3.init(rawadc[2]);
 8000374:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800037c:	4611      	mov	r1, r2
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fce7 	bl	8000d52 <_ZN5Motor4initEm>
  m4.init(rawadc[3]);
 8000384:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8000388:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fcdf 	bl	8000d52 <_ZN5Motor4initEm>
  m5.init(rawadc[4]);
 8000394:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8000398:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800039c:	4611      	mov	r1, r2
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 fcd7 	bl	8000d52 <_ZN5Motor4initEm>
  m6.init(rawadc[5]);
 80003a4:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4611      	mov	r1, r2
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fcd0 	bl	8000d52 <_ZN5Motor4initEm>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003b2:	2100      	movs	r1, #0
 80003b4:	483b      	ldr	r0, [pc, #236]	; (80004a4 <main+0x348>)
 80003b6:	f002 fe55 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003ba:	2104      	movs	r1, #4
 80003bc:	4839      	ldr	r0, [pc, #228]	; (80004a4 <main+0x348>)
 80003be:	f002 fe51 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80003c2:	2108      	movs	r1, #8
 80003c4:	4837      	ldr	r0, [pc, #220]	; (80004a4 <main+0x348>)
 80003c6:	f002 fe4d 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80003ca:	210c      	movs	r1, #12
 80003cc:	4835      	ldr	r0, [pc, #212]	; (80004a4 <main+0x348>)
 80003ce:	f002 fe49 	bl	8003064 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80003d2:	2100      	movs	r1, #0
 80003d4:	4834      	ldr	r0, [pc, #208]	; (80004a8 <main+0x34c>)
 80003d6:	f002 fe45 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003da:	2104      	movs	r1, #4
 80003dc:	4832      	ldr	r0, [pc, #200]	; (80004a8 <main+0x34c>)
 80003de:	f002 fe41 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80003e2:	2108      	movs	r1, #8
 80003e4:	4830      	ldr	r0, [pc, #192]	; (80004a8 <main+0x34c>)
 80003e6:	f002 fe3d 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80003ea:	210c      	movs	r1, #12
 80003ec:	482e      	ldr	r0, [pc, #184]	; (80004a8 <main+0x34c>)
 80003ee:	f002 fe39 	bl	8003064 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003f2:	2100      	movs	r1, #0
 80003f4:	482d      	ldr	r0, [pc, #180]	; (80004ac <main+0x350>)
 80003f6:	f002 fe35 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003fa:	2104      	movs	r1, #4
 80003fc:	482b      	ldr	r0, [pc, #172]	; (80004ac <main+0x350>)
 80003fe:	f002 fe31 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000402:	2108      	movs	r1, #8
 8000404:	4829      	ldr	r0, [pc, #164]	; (80004ac <main+0x350>)
 8000406:	f002 fe2d 	bl	8003064 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800040a:	210c      	movs	r1, #12
 800040c:	4827      	ldr	r0, [pc, #156]	; (80004ac <main+0x350>)
 800040e:	f002 fe29 	bl	8003064 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_ConfigChannel(htim, sConfig, Channel)
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int goal = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
//	  m1.tick(rawadc[0]);

//	  m2.setGoalPosCents(100);
//	  m2.tick(rawadc[1]);

	  m3.setGoalPosCents(goal);
 8000418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800041c:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fc88 	bl	8000d36 <_ZN5Motor15setGoalPosCentsEi>
	  m3.tick(rawadc[2]);
 8000426:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800042a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800042e:	4611      	mov	r1, r2
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fcd0 	bl	8000dd6 <_ZN5Motor4tickEm>

	  if(m3.getCurrentPosCents(rawadc[2]) > 98 && m3.getCurrentPosCents(rawadc[2]) < 102){
 8000436:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800043a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fc5b 	bl	8000cfc <_ZN5Motor18getCurrentPosCentsEm>
 8000446:	4603      	mov	r3, r0
 8000448:	2b62      	cmp	r3, #98	; 0x62
 800044a:	dd0c      	ble.n	8000466 <main+0x30a>
 800044c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000454:	4611      	mov	r1, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fc50 	bl	8000cfc <_ZN5Motor18getCurrentPosCentsEm>
 800045c:	4603      	mov	r3, r0
 800045e:	2b65      	cmp	r3, #101	; 0x65
 8000460:	dc01      	bgt.n	8000466 <main+0x30a>
 8000462:	2301      	movs	r3, #1
 8000464:	e000      	b.n	8000468 <main+0x30c>
 8000466:	2300      	movs	r3, #0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <main+0x316>
		  goal = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
	  }

	  if(m3.getCurrentPosCents(rawadc[2]) > -2 && m3.getCurrentPosCents(rawadc[2]) < 2){
 8000472:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f000 fc3d 	bl	8000cfc <_ZN5Motor18getCurrentPosCentsEm>
 8000482:	4603      	mov	r3, r0
 8000484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000488:	db14      	blt.n	80004b4 <main+0x358>
 800048a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 800048e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000492:	4611      	mov	r1, r2
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fc31 	bl	8000cfc <_ZN5Motor18getCurrentPosCentsEm>
 800049a:	4603      	mov	r3, r0
 800049c:	2b01      	cmp	r3, #1
 800049e:	dc09      	bgt.n	80004b4 <main+0x358>
 80004a0:	2301      	movs	r3, #1
 80004a2:	e008      	b.n	80004b6 <main+0x35a>
 80004a4:	20000100 	.word	0x20000100
 80004a8:	20000148 	.word	0x20000148
 80004ac:	20000190 	.word	0x20000190
 80004b0:	2000008c 	.word	0x2000008c
 80004b4:	2300      	movs	r3, #0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <main+0x364>
		  goal = 100;
 80004ba:	2364      	movs	r3, #100	; 0x64
 80004bc:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
	  }

	  uint32_t millis = HAL_GetTick();
 80004c0:	f001 f838 	bl	8001534 <HAL_GetTick>
 80004c4:	f8c7 0488 	str.w	r0, [r7, #1160]	; 0x488

	  sprintf(msg, "%d\t%4" PRIu32 "\t%4" PRIu32 "\t%d\r\n", goal, millis,rawadc[2], m3.getCurrentPosCents(rawadc[2]));
 80004c8:	f8d7 4414 	ldr.w	r4, [r7, #1044]	; 0x414
 80004cc:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80004d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80004d4:	4611      	mov	r1, r2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fc10 	bl	8000cfc <_ZN5Motor18getCurrentPosCentsEm>
 80004dc:	4603      	mov	r3, r0
 80004de:	f207 4024 	addw	r0, r7, #1060	; 0x424
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	9400      	str	r4, [sp, #0]
 80004e6:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80004ea:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 80004ee:	4909      	ldr	r1, [pc, #36]	; (8000514 <main+0x3b8>)
 80004f0:	f003 fc1a 	bl	8003d28 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004f4:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe27 	bl	800014c <strlen>
 80004fe:	4603      	mov	r3, r0
 8000500:	b29a      	uxth	r2, r3
 8000502:	f207 4124 	addw	r1, r7, #1060	; 0x424
 8000506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <main+0x3bc>)
 800050c:	f003 fa62 	bl	80039d4 <HAL_UART_Transmit>
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
//	  HAL_Delay(200);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000510:	e782      	b.n	8000418 <main+0x2bc>
 8000512:	bf00      	nop
 8000514:	08004598 	.word	0x08004598
 8000518:	200001d8 	.word	0x200001d8

0800051c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	2228      	movs	r2, #40	; 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fbf4 	bl	8003d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000568:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f856 	bl	8002624 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	bf14      	ite	ne
 800057e:	2301      	movne	r3, #1
 8000580:	2300      	moveq	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000588:	f000 fb76 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000590:	2302      	movs	r3, #2
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2102      	movs	r1, #2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fabb 	bl	8002b24 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	bf14      	ite	ne
 80005b4:	2301      	movne	r3, #1
 80005b6:	2300      	moveq	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80005be:	f000 fb5b 	bl	8000c78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005c2:	2302      	movs	r3, #2
 80005c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fc42 	bl	8002e58 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf14      	ite	ne
 80005da:	2301      	movne	r3, #1
 80005dc:	2300      	moveq	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80005e4:	f000 fb48 	bl	8000c78 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000600:	4b4d      	ldr	r3, [pc, #308]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 8000602:	4a4e      	ldr	r2, [pc, #312]	; (800073c <_ZL12MX_ADC1_Initv+0x14c>)
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000606:	4b4c      	ldr	r3, [pc, #304]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 8000608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800060e:	4b4a      	ldr	r3, [pc, #296]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 8000610:	2201      	movs	r2, #1
 8000612:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000614:	4b48      	ldr	r3, [pc, #288]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 8000616:	2200      	movs	r2, #0
 8000618:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061a:	4b47      	ldr	r3, [pc, #284]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 800061c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000620:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b45      	ldr	r3, [pc, #276]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000628:	4b43      	ldr	r3, [pc, #268]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 800062a:	2206      	movs	r2, #6
 800062c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062e:	4842      	ldr	r0, [pc, #264]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 8000630:	f000 ffae 	bl	8001590 <HAL_ADC_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	bf14      	ite	ne
 800063a:	2301      	movne	r3, #1
 800063c:	2300      	moveq	r3, #0
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8000644:	f000 fb18 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000648:	2302      	movs	r3, #2
 800064a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064c:	2301      	movs	r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4619      	mov	r1, r3
 8000658:	4837      	ldr	r0, [pc, #220]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 800065a:	f001 f96b 	bl	8001934 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	bf14      	ite	ne
 8000664:	2301      	movne	r3, #1
 8000666:	2300      	moveq	r3, #0
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 800066e:	f000 fb03 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000672:	2303      	movs	r3, #3
 8000674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000676:	2302      	movs	r3, #2
 8000678:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	482e      	ldr	r0, [pc, #184]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 8000680:	f001 f958 	bl	8001934 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8000694:	f000 faf0 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000698:	2304      	movs	r3, #4
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800069c:	2303      	movs	r3, #3
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	4824      	ldr	r0, [pc, #144]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 80006a6:	f001 f945 	bl	8001934 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf14      	ite	ne
 80006b0:	2301      	movne	r3, #1
 80006b2:	2300      	moveq	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 80006ba:	f000 fadd 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006be:	2305      	movs	r3, #5
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 80006cc:	f001 f932 	bl	8001934 <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <_ZL12MX_ADC1_Initv+0xf4>
  {
    Error_Handler();
 80006e0:	f000 faca 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006e4:	2306      	movs	r3, #6
 80006e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006e8:	2305      	movs	r3, #5
 80006ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4811      	ldr	r0, [pc, #68]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 80006f2:	f001 f91f 	bl	8001934 <HAL_ADC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf14      	ite	ne
 80006fc:	2301      	movne	r3, #1
 80006fe:	2300      	moveq	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_ZL12MX_ADC1_Initv+0x11a>
  {
    Error_Handler();
 8000706:	f000 fab7 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800070a:	2307      	movs	r3, #7
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800070e:	2306      	movs	r3, #6
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4808      	ldr	r0, [pc, #32]	; (8000738 <_ZL12MX_ADC1_Initv+0x148>)
 8000718:	f001 f90c 	bl	8001934 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf14      	ite	ne
 8000722:	2301      	movne	r3, #1
 8000724:	2300      	moveq	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <_ZL12MX_ADC1_Initv+0x140>
  {
    Error_Handler();
 800072c:	f000 faa4 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000008c 	.word	0x2000008c
 800073c:	40012400 	.word	0x40012400

08000740 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b092      	sub	sp, #72	; 0x48
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2220      	movs	r2, #32
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 fad4 	bl	8003d18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000770:	4b56      	ldr	r3, [pc, #344]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000772:	4a57      	ldr	r2, [pc, #348]	; (80008d0 <_ZL12MX_TIM1_Initv+0x190>)
 8000774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000776:	4b55      	ldr	r3, [pc, #340]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000778:	2240      	movs	r2, #64	; 0x40
 800077a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b53      	ldr	r3, [pc, #332]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000782:	4b52      	ldr	r3, [pc, #328]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000784:	22ff      	movs	r2, #255	; 0xff
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b50      	ldr	r3, [pc, #320]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800078e:	4b4f      	ldr	r3, [pc, #316]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000794:	4b4d      	ldr	r3, [pc, #308]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079a:	484c      	ldr	r0, [pc, #304]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 800079c:	f002 fc12 	bl	8002fc4 <HAL_TIM_PWM_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	bf14      	ite	ne
 80007a6:	2301      	movne	r3, #1
 80007a8:	2300      	moveq	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 80007b0:	f000 fa62 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007c0:	4619      	mov	r1, r3
 80007c2:	4842      	ldr	r0, [pc, #264]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 80007c4:	f003 f810 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 80007d8:	f000 fa4e 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007dc:	2360      	movs	r3, #96	; 0x60
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	2200      	movs	r2, #0
 80007fe:	4619      	mov	r1, r3
 8000800:	4832      	ldr	r0, [pc, #200]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000802:	f002 fd2f 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8000816:	f000 fa2f 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	2204      	movs	r2, #4
 8000820:	4619      	mov	r1, r3
 8000822:	482a      	ldr	r0, [pc, #168]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000824:	f002 fd1e 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <_ZL12MX_TIM1_Initv+0xfc>
  {
    Error_Handler();
 8000838:	f000 fa1e 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	2208      	movs	r2, #8
 8000842:	4619      	mov	r1, r3
 8000844:	4821      	ldr	r0, [pc, #132]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000846:	f002 fd0d 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf14      	ite	ne
 8000850:	2301      	movne	r3, #1
 8000852:	2300      	moveq	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <_ZL12MX_TIM1_Initv+0x11e>
  {
    Error_Handler();
 800085a:	f000 fa0d 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	220c      	movs	r2, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4819      	ldr	r0, [pc, #100]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 8000868:	f002 fcfc 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf14      	ite	ne
 8000872:	2301      	movne	r3, #1
 8000874:	2300      	moveq	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZL12MX_TIM1_Initv+0x140>
  {
    Error_Handler();
 800087c:	f000 f9fc 	bl	8000c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 80008a4:	f002 fff8 	bl	8003898 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf14      	ite	ne
 80008ae:	2301      	movne	r3, #1
 80008b0:	2300      	moveq	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <_ZL12MX_TIM1_Initv+0x17c>
  {
    Error_Handler();
 80008b8:	f000 f9de 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <_ZL12MX_TIM1_Initv+0x18c>)
 80008be:	f000 fc41 	bl	8001144 <HAL_TIM_MspPostInit>

}
 80008c2:	bf00      	nop
 80008c4:	3748      	adds	r7, #72	; 0x48
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000100 	.word	0x20000100
 80008d0:	40012c00 	.word	0x40012c00

080008d4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 80008f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 80008fe:	4b3f      	ldr	r3, [pc, #252]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 8000900:	2240      	movs	r2, #64	; 0x40
 8000902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800090a:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b39      	ldr	r3, [pc, #228]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800091c:	4837      	ldr	r0, [pc, #220]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 800091e:	f002 fb51 	bl	8002fc4 <HAL_TIM_PWM_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	bf14      	ite	ne
 8000928:	2301      	movne	r3, #1
 800092a:	2300      	moveq	r3, #0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000932:	f000 f9a1 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	4619      	mov	r1, r3
 8000944:	482d      	ldr	r0, [pc, #180]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 8000946:	f002 ff4f 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	bf14      	ite	ne
 8000950:	2301      	movne	r3, #1
 8000952:	2300      	moveq	r3, #0
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 800095a:	f000 f98d 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095e:	2360      	movs	r3, #96	; 0x60
 8000960:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	4619      	mov	r1, r3
 8000974:	4821      	ldr	r0, [pc, #132]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 8000976:	f002 fc75 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 800098a:	f000 f975 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2204      	movs	r2, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4819      	ldr	r0, [pc, #100]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 8000996:	f002 fc65 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80009aa:	f000 f965 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2208      	movs	r2, #8
 80009b2:	4619      	mov	r1, r3
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 80009b6:	f002 fc55 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 80009ca:	f000 f955 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	220c      	movs	r2, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 80009d6:	f002 fc45 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf14      	ite	ne
 80009e0:	2301      	movne	r3, #1
 80009e2:	2300      	moveq	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <_ZL12MX_TIM2_Initv+0x11a>
  {
    Error_Handler();
 80009ea:	f000 f945 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <_ZL12MX_TIM2_Initv+0x128>)
 80009f0:	f000 fba8 	bl	8001144 <HAL_TIM_MspPostInit>

}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000148 	.word	0x20000148

08000a00 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000a24:	4a41      	ldr	r2, [pc, #260]	; (8000b2c <_ZL12MX_TIM3_Initv+0x12c>)
 8000a26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000a28:	4b3f      	ldr	r3, [pc, #252]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000a2a:	2240      	movs	r2, #64	; 0x40
 8000a2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000a34:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000a36:	22ff      	movs	r2, #255	; 0xff
 8000a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a46:	4838      	ldr	r0, [pc, #224]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000a48:	f002 fabc 	bl	8002fc4 <HAL_TIM_PWM_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf14      	ite	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	2300      	moveq	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8000a5c:	f000 f90c 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	482e      	ldr	r0, [pc, #184]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000a70:	f002 feba 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8000a84:	f000 f8f8 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a88:	2360      	movs	r3, #96	; 0x60
 8000a8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4822      	ldr	r0, [pc, #136]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000aa0:	f002 fbe0 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <_ZL12MX_TIM3_Initv+0xb8>
  {
    Error_Handler();
 8000ab4:	f000 f8e0 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2204      	movs	r2, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	481a      	ldr	r0, [pc, #104]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000ac0:	f002 fbd0 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000ad4:	f000 f8d0 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2208      	movs	r2, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000ae0:	f002 fbc0 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <_ZL12MX_TIM3_Initv+0xf8>
  {
    Error_Handler();
 8000af4:	f000 f8c0 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	220c      	movs	r2, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	480a      	ldr	r0, [pc, #40]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000b00:	f002 fbb0 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <_ZL12MX_TIM3_Initv+0x118>
  {
    Error_Handler();
 8000b14:	f000 f8b0 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <_ZL12MX_TIM3_Initv+0x128>)
 8000b1a:	f000 fb13 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000190 	.word	0x20000190
 8000b2c:	40000400 	.word	0x40000400

08000b30 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b68:	f002 fee7 	bl	800393a <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf14      	ite	ne
 8000b72:	2301      	movne	r3, #1
 8000b74:	2300      	moveq	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000b7c:	f000 f87c 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200001d8 	.word	0x200001d8
 8000b88:	40013800 	.word	0x40013800

08000b8c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <_ZL11MX_DMA_Initv+0x38>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <_ZL11MX_DMA_Initv+0x38>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <_ZL11MX_DMA_Initv+0x38>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	200b      	movs	r0, #11
 8000bb0:	f001 f981 	bl	8001eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bb4:	200b      	movs	r0, #11
 8000bb6:	f001 f99a 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0310 	and.w	r3, r3, #16
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000bfa:	f043 0320 	orr.w	r3, r3, #32
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0320 	and.w	r3, r3, #32
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <_ZL12MX_GPIO_Initv+0xac>)
 8000c44:	f001 fcd6 	bl	80025f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <_ZL12MX_GPIO_Initv+0xac>)
 8000c62:	f001 fb4d 	bl	8002300 <HAL_GPIO_Init>

}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40011000 	.word	0x40011000

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>

08000c82 <_ZN5MotorC1E17TIM_HandleTypeDeftS0_tii>:
#include "motor.h"
#include "stm32f103x6.h"
#include "main.h"

// Date constructor
Motor::Motor(TIM_HandleTypeDef port_A, uint16_t pin_A, TIM_HandleTypeDef port_B, uint16_t pin_B, int min_pos, int max_pos)
 8000c82:	b084      	sub	sp, #16
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	f107 0014 	add.w	r0, r7, #20
 8000c90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
{
    portA = port_A;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2248      	movs	r2, #72	; 0x48
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f003 f82c 	bl	8003cfc <memcpy>
    pinA  = pin_A;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8000caa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    portB = port_B;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	334c      	adds	r3, #76	; 0x4c
 8000cb2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000cb6:	2248      	movs	r2, #72	; 0x48
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 f81f 	bl	8003cfc <memcpy>
    pinB  = pin_B;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8000cc4:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
//    portADC = port_adc;
//    pinADC  = pin_adc;
    minp  = min_pos;
 8000cc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    maxp  = max_pos;
 8000cd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    deltaRaw = int(max_pos) - int(min_pos);
 8000cdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ce4:	1ad2      	subs	r2, r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr

08000cfc <_ZN5Motor18getCurrentPosCentsEm>:

/**
 * ALL THE SETS AND GETS HERE
 * */

int Motor::getCurrentPosCents(uint32_t raw_adc_val){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
//    currentPosCents = map(this->getCurrentPos(), minp, maxp, 0, 100);
	currentPosCents = 100 * (int(raw_adc_val) - int(minp)) / deltaRaw;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8000d0e:	1a9b      	subs	r3, r3, r2
 8000d10:	2264      	movs	r2, #100	; 0x64
 8000d12:	fb02 f203 	mul.w	r2, r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000d1c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return currentPosCents;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <_ZN5Motor15setGoalPosCentsEi>:

void Motor::setGoalPosCents(int goal){
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	goalPosCents = goal;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <_ZN5Motor4initEm>:

void Motor::init(uint32_t init){
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
	this->getCurrentPosCents(init);
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffcc 	bl	8000cfc <_ZN5Motor18getCurrentPosCentsEm>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_Z6setPWM17TIM_HandleTypeDefmtt>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b088      	sub	sp, #32
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000d78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm TIM_OC_InitTypeDef sConfigOC;
 8000d7c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000d7e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000d82:	f002 fa0b 	bl	800319c <HAL_TIM_PWM_Stop>
timer.Init.Period = period; // set the period duration HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8000d86:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	619a      	str	r2, [r3, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9e:	2360      	movs	r3, #96	; 0x60
 8000da0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = pulse;              // set the pulse duration
 8000da2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000db4:	4619      	mov	r1, r3
 8000db6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000dba:	f002 fa53 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&timer, channel);   // start pwm generation
 8000dbe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000dc0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000dc4:	f002 f94e 	bl	8003064 <HAL_TIM_PWM_Start>
}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dd2:	b004      	add	sp, #16
 8000dd4:	4770      	bx	lr

08000dd6 <_ZN5Motor4tickEm>:

void Motor::tick(uint32_t curr){
 8000dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd8:	b097      	sub	sp, #92	; 0x5c
 8000dda:	af12      	add	r7, sp, #72	; 0x48
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
	/**
	 * PID goes here
	 */
	int given = 100 * (int(curr) - int(minp)) / deltaRaw;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	2264      	movs	r2, #100	; 0x64
 8000dec:	fb02 f203 	mul.w	r2, r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000df6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dfa:	60fb      	str	r3, [r7, #12]

	int local_delta = given - goalPosCents;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	60bb      	str	r3, [r7, #8]

	if(given > goalPosCents - 2 && given < goalPosCents + 2){
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	db3e      	blt.n	8000e94 <_ZN5Motor4tickEm+0xbe>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dc37      	bgt.n	8000e94 <_ZN5Motor4tickEm+0xbe>
//		HAL_GPIO_WritePin(portA, pinA, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(portB, pinB, GPIO_PIN_RESET);
		setPWM(portA, pinA, 255, 0);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687e      	ldr	r6, [r7, #4]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9310      	str	r3, [sp, #64]	; 0x40
 8000e32:	23ff      	movs	r3, #255	; 0xff
 8000e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e36:	920e      	str	r2, [sp, #56]	; 0x38
 8000e38:	466d      	mov	r5, sp
 8000e3a:	f106 0410 	add.w	r4, r6, #16
 8000e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e56:	f7ff ff89 	bl	8000d6c <_Z6setPWM17TIM_HandleTypeDefmtt>
		setPWM(portB, pinB, 255, 0);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8000e60:	461a      	mov	r2, r3
 8000e62:	687e      	ldr	r6, [r7, #4]
 8000e64:	2300      	movs	r3, #0
 8000e66:	9310      	str	r3, [sp, #64]	; 0x40
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e6c:	920e      	str	r2, [sp, #56]	; 0x38
 8000e6e:	466d      	mov	r5, sp
 8000e70:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8000e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e84:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e88:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8000e8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8e:	f7ff ff6d 	bl	8000d6c <_Z6setPWM17TIM_HandleTypeDefmtt>
//		HAL_GPIO_WritePin(portA, pinA, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(portB, pinB, GPIO_PIN_SET);
		setPWM(portA, pinA, 255, 0);
		setPWM(portB, pinB, 255, 255);
	}
}
 8000e92:	e074      	b.n	8000f7e <_ZN5Motor4tickEm+0x1a8>
	}else	if(given > goalPosCents){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dd37      	ble.n	8000f10 <_ZN5Motor4tickEm+0x13a>
		setPWM(portA, pinA, 255, 255);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687e      	ldr	r6, [r7, #4]
 8000eaa:	23ff      	movs	r3, #255	; 0xff
 8000eac:	9310      	str	r3, [sp, #64]	; 0x40
 8000eae:	23ff      	movs	r3, #255	; 0xff
 8000eb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8000eb2:	920e      	str	r2, [sp, #56]	; 0x38
 8000eb4:	466d      	mov	r5, sp
 8000eb6:	f106 0410 	add.w	r4, r6, #16
 8000eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eca:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ece:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ed2:	f7ff ff4b 	bl	8000d6c <_Z6setPWM17TIM_HandleTypeDefmtt>
		setPWM(portB, pinB, 255, 0);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8000edc:	461a      	mov	r2, r3
 8000ede:	687e      	ldr	r6, [r7, #4]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9310      	str	r3, [sp, #64]	; 0x40
 8000ee4:	23ff      	movs	r3, #255	; 0xff
 8000ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ee8:	920e      	str	r2, [sp, #56]	; 0x38
 8000eea:	466d      	mov	r5, sp
 8000eec:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8000ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000efc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f04:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8000f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0a:	f7ff ff2f 	bl	8000d6c <_Z6setPWM17TIM_HandleTypeDefmtt>
}
 8000f0e:	e036      	b.n	8000f7e <_ZN5Motor4tickEm+0x1a8>
		setPWM(portA, pinA, 255, 0);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8000f16:	461a      	mov	r2, r3
 8000f18:	687e      	ldr	r6, [r7, #4]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9310      	str	r3, [sp, #64]	; 0x40
 8000f1e:	23ff      	movs	r3, #255	; 0xff
 8000f20:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f22:	920e      	str	r2, [sp, #56]	; 0x38
 8000f24:	466d      	mov	r5, sp
 8000f26:	f106 0410 	add.w	r4, r6, #16
 8000f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f42:	f7ff ff13 	bl	8000d6c <_Z6setPWM17TIM_HandleTypeDefmtt>
		setPWM(portB, pinB, 255, 255);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	687e      	ldr	r6, [r7, #4]
 8000f50:	23ff      	movs	r3, #255	; 0xff
 8000f52:	9310      	str	r3, [sp, #64]	; 0x40
 8000f54:	23ff      	movs	r3, #255	; 0xff
 8000f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f58:	920e      	str	r2, [sp, #56]	; 0x38
 8000f5a:	466d      	mov	r5, sp
 8000f5c:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8000f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f70:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f74:	f106 034c 	add.w	r3, r6, #76	; 0x4c
 8000f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f7a:	f7ff fef7 	bl	8000d6c <_Z6setPWM17TIM_HandleTypeDefmtt>
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	61d3      	str	r3, [r2, #28]
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_MspInit+0x5c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_MspInit+0x60>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_MspInit+0x60>)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000

08000fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <HAL_ADC_MspInit+0xbc>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d149      	bne.n	80010a0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a26      	ldr	r2, [pc, #152]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a20      	ldr	r2, [pc, #128]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_ADC_MspInit+0xc0>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = pot1_Pin|pot2_Pin|pot3_Pin|pot4_Pin
 800103c:	23fc      	movs	r3, #252	; 0xfc
 800103e:	613b      	str	r3, [r7, #16]
                          |pot5_Pin|pot6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	4819      	ldr	r0, [pc, #100]	; (80010b0 <HAL_ADC_MspInit+0xc4>)
 800104c:	f001 f958 	bl	8002300 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 8001052:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_ADC_MspInit+0xcc>)
 8001054:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 800106a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 8001072:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001076:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 800107a:	2220      	movs	r2, #32
 800107c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 8001086:	f000 ff4d 	bl	8001f24 <HAL_DMA_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001090:	f7ff fdf2 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 8001098:	621a      	str	r2, [r3, #32]
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_ADC_MspInit+0xc8>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40012400 	.word	0x40012400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	200000bc 	.word	0x200000bc
 80010b8:	40020008 	.word	0x40020008

080010bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_TIM_PWM_MspInit+0x7c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10c      	bne.n	80010e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 80010d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010e6:	e022      	b.n	800112e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d10c      	bne.n	800110c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a11      	ldr	r2, [pc, #68]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
}
 800110a:	e010      	b.n	800112e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_TIM_PWM_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10b      	bne.n	800112e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_TIM_PWM_MspInit+0x80>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
}
 800112e:	bf00      	nop
 8001130:	371c      	adds	r7, #28
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40012c00 	.word	0x40012c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40000400 	.word	0x40000400

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_TIM_MspPostInit+0x14c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d119      	bne.n	8001198 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b48      	ldr	r3, [pc, #288]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = M1A_Pin|M1B_Pin|M2A_Pin|M2B_Pin;
 800117c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2302      	movs	r3, #2
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	4619      	mov	r1, r3
 8001190:	4841      	ldr	r0, [pc, #260]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 8001192:	f001 f8b5 	bl	8002300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001196:	e077      	b.n	8001288 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a0:	d143      	bne.n	800122a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	4a3b      	ldr	r2, [pc, #236]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6193      	str	r3, [r2, #24]
 80011ae:	4b39      	ldr	r3, [pc, #228]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4b36      	ldr	r3, [pc, #216]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a35      	ldr	r2, [pc, #212]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3A_Pin|M3B_Pin;
 80011d2:	2303      	movs	r3, #3
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2302      	movs	r3, #2
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	4619      	mov	r1, r3
 80011e4:	482c      	ldr	r0, [pc, #176]	; (8001298 <HAL_TIM_MspPostInit+0x154>)
 80011e6:	f001 f88b 	bl	8002300 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M4A_Pin|M4B_Pin;
 80011ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2302      	movs	r3, #2
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	4619      	mov	r1, r3
 80011fe:	4827      	ldr	r0, [pc, #156]	; (800129c <HAL_TIM_MspPostInit+0x158>)
 8001200:	f001 f87e 	bl	8002300 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_TIM_MspPostInit+0x15c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
 8001212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001214:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <HAL_TIM_MspPostInit+0x15c>)
 8001224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001226:	6053      	str	r3, [r2, #4]
}
 8001228:	e02e      	b.n	8001288 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM3)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <HAL_TIM_MspPostInit+0x160>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d129      	bne.n	8001288 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 800123a:	f043 0308 	orr.w	r3, r3, #8
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_TIM_MspPostInit+0x150>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M6A_Pin|M6B_Pin|M5A_Pin|M5B_Pin;
 800124c:	2333      	movs	r3, #51	; 0x33
 800124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2302      	movs	r3, #2
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4619      	mov	r1, r3
 800125e:	480f      	ldr	r0, [pc, #60]	; (800129c <HAL_TIM_MspPostInit+0x158>)
 8001260:	f001 f84e 	bl	8002300 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_TIM_MspPostInit+0x15c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800126a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001274:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_TIM_MspPostInit+0x15c>)
 8001284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001286:	6053      	str	r3, [r2, #4]
}
 8001288:	bf00      	nop
 800128a:	3730      	adds	r7, #48	; 0x30
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40012c00 	.word	0x40012c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	40010000 	.word	0x40010000
 80012a4:	40000400 	.word	0x40000400

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <HAL_UART_MspInit+0xa4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d13d      	bne.n	8001344 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_UART_MspInit+0xa8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a20      	ldr	r2, [pc, #128]	; (8001350 <HAL_UART_MspInit+0xa8>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_UART_MspInit+0xa8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_UART_MspInit+0xa8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <HAL_UART_MspInit+0xa8>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_UART_MspInit+0xa8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f8:	2340      	movs	r3, #64	; 0x40
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <HAL_UART_MspInit+0xac>)
 800130c:	f000 fff8 	bl	8002300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <HAL_UART_MspInit+0xac>)
 8001324:	f000 ffec 	bl	8002300 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_UART_MspInit+0xb0>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_UART_MspInit+0xb0>)
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40013800 	.word	0x40013800
 8001350:	40021000 	.word	0x40021000
 8001354:	40010c00 	.word	0x40010c00
 8001358:	40010000 	.word	0x40010000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 f8b5 	bl	8001510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <DMA1_Channel1_IRQHandler+0x10>)
 80013b2:	f000 fe71 	bl	8002098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000bc 	.word	0x200000bc

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <_sbrk+0x5c>)
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <_sbrk+0x60>)
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <_sbrk+0x64>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <_sbrk+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d207      	bcs.n	8001400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f0:	f002 fc5a 	bl	8003ca8 <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fe:	e009      	b.n	8001414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20002800 	.word	0x20002800
 8001420:	00000400 	.word	0x00000400
 8001424:	20000218 	.word	0x20000218
 8001428:	20000238 	.word	0x20000238

0800142c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001438:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800143a:	e003      	b.n	8001444 <LoopCopyDataInit>

0800143c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800143e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001440:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001442:	3104      	adds	r1, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001448:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800144c:	d3f6      	bcc.n	800143c <CopyDataInit>
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001450:	e002      	b.n	8001458 <LoopFillZerobss>

08001452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001454:	f842 3b04 	str.w	r3, [r2], #4

08001458 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800145a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800145c:	d3f9      	bcc.n	8001452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800145e:	f7ff ffe5 	bl	800142c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f002 fc27 	bl	8003cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001466:	f7fe fe79 	bl	800015c <main>
  bx lr
 800146a:	4770      	bx	lr
  ldr r3, =_sidata
 800146c:	08004610 	.word	0x08004610
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001474:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001478:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800147c:	20000238 	.word	0x20000238

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_Init+0x28>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_Init+0x28>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 fd03 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149a:	2000      	movs	r0, #0
 800149c:	f000 f808 	bl	80014b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a0:	f7ff fd72 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40022000 	.word	0x40022000

080014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x54>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_InitTick+0x58>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fd1b 	bl	8001f0a <HAL_SYSTICK_Config>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e00e      	b.n	80014fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d80a      	bhi.n	80014fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ec:	f000 fce3 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_InitTick+0x5c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000
 8001508:	20000008 	.word	0x20000008
 800150c:	20000004 	.word	0x20000004

08001510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x1c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_IncTick+0x20>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	4a03      	ldr	r2, [pc, #12]	; (8001530 <HAL_IncTick+0x20>)
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	20000008 	.word	0x20000008
 8001530:	20000224 	.word	0x20000224

08001534 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b02      	ldr	r3, [pc, #8]	; (8001544 <HAL_GetTick+0x10>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	20000224 	.word	0x20000224

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff fff0 	bl	8001534 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffe0 	bl	8001534 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0be      	b.n	8001730 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fd0c 	bl	8000fec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 faf7 	bl	8001bc8 <ADC_ConversionStop_Disable>
 80015da:	4603      	mov	r3, r0
 80015dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 8099 	bne.w	800171e <HAL_ADC_Init+0x18e>
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 8095 	bne.w	800171e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015fc:	f023 0302 	bic.w	r3, r3, #2
 8001600:	f043 0202 	orr.w	r2, r3, #2
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001610:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7b1b      	ldrb	r3, [r3, #12]
 8001616:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001618:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	4313      	orrs	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001628:	d003      	beq.n	8001632 <HAL_ADC_Init+0xa2>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <HAL_ADC_Init+0xa8>
 8001632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001636:	e000      	b.n	800163a <HAL_ADC_Init+0xaa>
 8001638:	2300      	movs	r3, #0
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7d1b      	ldrb	r3, [r3, #20]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d119      	bne.n	800167c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7b1b      	ldrb	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	3b01      	subs	r3, #1
 8001656:	035a      	lsls	r2, r3, #13
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	e00b      	b.n	800167c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	f043 0220 	orr.w	r2, r3, #32
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	4b28      	ldr	r3, [pc, #160]	; (8001738 <HAL_ADC_Init+0x1a8>)
 8001698:	4013      	ands	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_Init+0x126>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d104      	bne.n	80016c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	051b      	lsls	r3, r3, #20
 80016be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_ADC_Init+0x1ac>)
 80016dc:	4013      	ands	r3, r2
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10b      	bne.n	80016fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	f023 0303 	bic.w	r3, r3, #3
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016fa:	e018      	b.n	800172e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f023 0312 	bic.w	r3, r3, #18
 8001704:	f043 0210 	orr.w	r2, r3, #16
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800171c:	e007      	b.n	800172e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	f043 0210 	orr.w	r2, r3, #16
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800172e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	ffe1f7fd 	.word	0xffe1f7fd
 800173c:	ff1f0efe 	.word	0xff1f0efe

08001740 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a64      	ldr	r2, [pc, #400]	; (80018e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d004      	beq.n	8001764 <HAL_ADC_Start_DMA+0x24>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a63      	ldr	r2, [pc, #396]	; (80018ec <HAL_ADC_Start_DMA+0x1ac>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d106      	bne.n	8001772 <HAL_ADC_Start_DMA+0x32>
 8001764:	4b60      	ldr	r3, [pc, #384]	; (80018e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 80b3 	bne.w	80018d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ADC_Start_DMA+0x40>
 800177c:	2302      	movs	r3, #2
 800177e:	e0ae      	b.n	80018de <HAL_ADC_Start_DMA+0x19e>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f9cb 	bl	8001b24 <ADC_Enable>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 809a 	bne.w	80018ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a4e      	ldr	r2, [pc, #312]	; (80018ec <HAL_ADC_Start_DMA+0x1ac>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d105      	bne.n	80017c4 <HAL_ADC_Start_DMA+0x84>
 80017b8:	4b4b      	ldr	r3, [pc, #300]	; (80018e8 <HAL_ADC_Start_DMA+0x1a8>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d115      	bne.n	80017f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d026      	beq.n	800182c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017ee:	e01d      	b.n	800182c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a39      	ldr	r2, [pc, #228]	; (80018e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d004      	beq.n	8001810 <HAL_ADC_Start_DMA+0xd0>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a38      	ldr	r2, [pc, #224]	; (80018ec <HAL_ADC_Start_DMA+0x1ac>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d10d      	bne.n	800182c <HAL_ADC_Start_DMA+0xec>
 8001810:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_ADC_Start_DMA+0x1a8>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001824:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f023 0206 	bic.w	r2, r3, #6
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
 8001844:	e002      	b.n	800184c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_ADC_Start_DMA+0x1b0>)
 800185a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4a24      	ldr	r2, [pc, #144]	; (80018f4 <HAL_ADC_Start_DMA+0x1b4>)
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <HAL_ADC_Start_DMA+0x1b8>)
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0202 	mvn.w	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001884:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a18      	ldr	r0, [r3, #32]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	334c      	adds	r3, #76	; 0x4c
 8001890:	4619      	mov	r1, r3
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f000 fb9f 	bl	8001fd8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018a8:	d108      	bne.n	80018bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80018ba:	e00f      	b.n	80018dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80018cc:	e006      	b.n	80018dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80018d6:	e001      	b.n	80018dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40012400 	.word	0x40012400
 80018ec:	40012800 	.word	0x40012800
 80018f0:	08001c3d 	.word	0x08001c3d
 80018f4:	08001cb9 	.word	0x08001cb9
 80018f8:	08001cd5 	.word	0x08001cd5

080018fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
	...

08001934 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x20>
 8001950:	2302      	movs	r3, #2
 8001952:	e0dc      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x1da>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b06      	cmp	r3, #6
 8001962:	d81c      	bhi.n	800199e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3b05      	subs	r3, #5
 8001976:	221f      	movs	r2, #31
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	4019      	ands	r1, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b05      	subs	r3, #5
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
 800199c:	e03c      	b.n	8001a18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d81c      	bhi.n	80019e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3b23      	subs	r3, #35	; 0x23
 80019b8:	221f      	movs	r2, #31
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	4019      	ands	r1, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	3b23      	subs	r3, #35	; 0x23
 80019d2:	fa00 f203 	lsl.w	r2, r0, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	631a      	str	r2, [r3, #48]	; 0x30
 80019de:	e01b      	b.n	8001a18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	3b41      	subs	r3, #65	; 0x41
 80019f2:	221f      	movs	r2, #31
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4019      	ands	r1, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b41      	subs	r3, #65	; 0x41
 8001a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	d91c      	bls.n	8001a5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68d9      	ldr	r1, [r3, #12]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b1e      	subs	r3, #30
 8001a32:	2207      	movs	r2, #7
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4019      	ands	r1, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6898      	ldr	r0, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b1e      	subs	r3, #30
 8001a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	e019      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6919      	ldr	r1, [r3, #16]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4019      	ands	r1, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6898      	ldr	r0, [r3, #8]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	fa00 f203 	lsl.w	r2, r0, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d003      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a9a:	2b11      	cmp	r3, #17
 8001a9c:	d132      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <HAL_ADC_ConfigChannel+0x1e4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d125      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d126      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ac4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b10      	cmp	r3, #16
 8001acc:	d11a      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	0c9a      	lsrs	r2, r3, #18
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae4:	e002      	b.n	8001aec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f9      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x1b2>
 8001af2:	e007      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f043 0220 	orr.w	r2, r3, #32
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40012400 	.word	0x40012400
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	431bde83 	.word	0x431bde83

08001b24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d039      	beq.n	8001bb6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <ADC_Enable+0x9c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <ADC_Enable+0xa0>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	0c9b      	lsrs	r3, r3, #18
 8001b5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b60:	e002      	b.n	8001b68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f9      	bne.n	8001b62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b6e:	f7ff fce1 	bl	8001534 <HAL_GetTick>
 8001b72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b74:	e018      	b.n	8001ba8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b76:	f7ff fcdd 	bl	8001534 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d911      	bls.n	8001ba8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f043 0210 	orr.w	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e007      	b.n	8001bb8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d1df      	bne.n	8001b76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83

08001bc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d127      	bne.n	8001c32 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bf2:	f7ff fc9f 	bl	8001534 <HAL_GetTick>
 8001bf6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bf8:	e014      	b.n	8001c24 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bfa:	f7ff fc9b 	bl	8001534 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d90d      	bls.n	8001c24 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	f043 0210 	orr.w	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e007      	b.n	8001c34 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d0e3      	beq.n	8001bfa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d127      	bne.n	8001ca6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c6c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c70:	d115      	bne.n	8001c9e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d111      	bne.n	8001c9e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f7ff fe2c 	bl	80018fc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ca4:	e004      	b.n	8001cb0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	4798      	blx	r3
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f7ff fe21 	bl	800190e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	f043 0204 	orr.w	r2, r3, #4
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff fe10 	bl	8001920 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4906      	ldr	r1, [pc, #24]	; (8001da0 <__NVIC_EnableIRQ+0x34>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e80:	f7ff ff90 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff2d 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff42 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff90 	bl	8001df8 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5f 	bl	8001da4 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff35 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e043      	b.n	8001fc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_DMA_Init+0xa8>)
 8001f42:	4413      	add	r3, r2
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <HAL_DMA_Init+0xac>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	091b      	lsrs	r3, r3, #4
 8001f4c:	009a      	lsls	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_DMA_Init+0xb0>)
 8001f56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	bffdfff8 	.word	0xbffdfff8
 8001fd0:	cccccccd 	.word	0xcccccccd
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_DMA_Start_IT+0x20>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e04a      	b.n	800208e <HAL_DMA_Start_IT+0xb6>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002006:	2b01      	cmp	r3, #1
 8002008:	d13a      	bne.n	8002080 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f938 	bl	80022a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 020e 	orr.w	r2, r2, #14
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e00f      	b.n	800206e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0204 	bic.w	r2, r2, #4
 800205c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 020a 	orr.w	r2, r2, #10
 800206c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e005      	b.n	800208c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002088:	2302      	movs	r3, #2
 800208a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800208c:	7dfb      	ldrb	r3, [r7, #23]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2204      	movs	r2, #4
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d04f      	beq.n	8002160 <HAL_DMA_IRQHandler+0xc8>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d04a      	beq.n	8002160 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0204 	bic.w	r2, r2, #4
 80020e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a66      	ldr	r2, [pc, #408]	; (8002288 <HAL_DMA_IRQHandler+0x1f0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d029      	beq.n	8002146 <HAL_DMA_IRQHandler+0xae>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a65      	ldr	r2, [pc, #404]	; (800228c <HAL_DMA_IRQHandler+0x1f4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_IRQHandler+0xaa>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a63      	ldr	r2, [pc, #396]	; (8002290 <HAL_DMA_IRQHandler+0x1f8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01a      	beq.n	800213c <HAL_DMA_IRQHandler+0xa4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a62      	ldr	r2, [pc, #392]	; (8002294 <HAL_DMA_IRQHandler+0x1fc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d012      	beq.n	8002136 <HAL_DMA_IRQHandler+0x9e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a60      	ldr	r2, [pc, #384]	; (8002298 <HAL_DMA_IRQHandler+0x200>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00a      	beq.n	8002130 <HAL_DMA_IRQHandler+0x98>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a5f      	ldr	r2, [pc, #380]	; (800229c <HAL_DMA_IRQHandler+0x204>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d102      	bne.n	800212a <HAL_DMA_IRQHandler+0x92>
 8002124:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002128:	e00e      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 800212a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800212e:	e00b      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 8002130:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002134:	e008      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 8002136:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800213a:	e005      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 800213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002140:	e002      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	e000      	b.n	8002148 <HAL_DMA_IRQHandler+0xb0>
 8002146:	2304      	movs	r3, #4
 8002148:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <HAL_DMA_IRQHandler+0x208>)
 800214a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 8094 	beq.w	800227e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800215e:	e08e      	b.n	800227e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2202      	movs	r2, #2
 8002166:	409a      	lsls	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d056      	beq.n	800221e <HAL_DMA_IRQHandler+0x186>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d051      	beq.n	800221e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020a 	bic.w	r2, r2, #10
 8002196:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a38      	ldr	r2, [pc, #224]	; (8002288 <HAL_DMA_IRQHandler+0x1f0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d029      	beq.n	80021fe <HAL_DMA_IRQHandler+0x166>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a37      	ldr	r2, [pc, #220]	; (800228c <HAL_DMA_IRQHandler+0x1f4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d022      	beq.n	80021fa <HAL_DMA_IRQHandler+0x162>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a35      	ldr	r2, [pc, #212]	; (8002290 <HAL_DMA_IRQHandler+0x1f8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01a      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x15c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a34      	ldr	r2, [pc, #208]	; (8002294 <HAL_DMA_IRQHandler+0x1fc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d012      	beq.n	80021ee <HAL_DMA_IRQHandler+0x156>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a32      	ldr	r2, [pc, #200]	; (8002298 <HAL_DMA_IRQHandler+0x200>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00a      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x150>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_DMA_IRQHandler+0x204>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d102      	bne.n	80021e2 <HAL_DMA_IRQHandler+0x14a>
 80021dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021e0:	e00e      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e6:	e00b      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	e008      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f2:	e005      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f8:	e002      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021fa:	2320      	movs	r3, #32
 80021fc:	e000      	b.n	8002200 <HAL_DMA_IRQHandler+0x168>
 80021fe:	2302      	movs	r3, #2
 8002200:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <HAL_DMA_IRQHandler+0x208>)
 8002202:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d034      	beq.n	800227e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800221c:	e02f      	b.n	800227e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2208      	movs	r2, #8
 8002224:	409a      	lsls	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_DMA_IRQHandler+0x1e8>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 020e 	bic.w	r2, r2, #14
 8002246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3
    }
  }
  return;
 800227e:	bf00      	nop
 8002280:	bf00      	nop
}
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40020008 	.word	0x40020008
 800228c:	4002001c 	.word	0x4002001c
 8002290:	40020030 	.word	0x40020030
 8002294:	40020044 	.word	0x40020044
 8002298:	40020058 	.word	0x40020058
 800229c:	4002006c 	.word	0x4002006c
 80022a0:	40020000 	.word	0x40020000

080022a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d108      	bne.n	80022e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022e2:	e007      	b.n	80022f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b08b      	sub	sp, #44	; 0x2c
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	e148      	b.n	80025a6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002314:	2201      	movs	r2, #1
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8137 	bne.w	80025a0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4aa3      	ldr	r2, [pc, #652]	; (80025c4 <HAL_GPIO_Init+0x2c4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d05e      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 800233c:	4aa1      	ldr	r2, [pc, #644]	; (80025c4 <HAL_GPIO_Init+0x2c4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d875      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002342:	4aa1      	ldr	r2, [pc, #644]	; (80025c8 <HAL_GPIO_Init+0x2c8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d058      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002348:	4a9f      	ldr	r2, [pc, #636]	; (80025c8 <HAL_GPIO_Init+0x2c8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d86f      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800234e:	4a9f      	ldr	r2, [pc, #636]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d052      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002354:	4a9d      	ldr	r2, [pc, #628]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d869      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800235a:	4a9d      	ldr	r2, [pc, #628]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04c      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002360:	4a9b      	ldr	r2, [pc, #620]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d863      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002366:	4a9b      	ldr	r2, [pc, #620]	; (80025d4 <HAL_GPIO_Init+0x2d4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d046      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 800236c:	4a99      	ldr	r2, [pc, #612]	; (80025d4 <HAL_GPIO_Init+0x2d4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d85d      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002372:	2b12      	cmp	r3, #18
 8002374:	d82a      	bhi.n	80023cc <HAL_GPIO_Init+0xcc>
 8002376:	2b12      	cmp	r3, #18
 8002378:	d859      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800237a:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <HAL_GPIO_Init+0x80>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	080023fb 	.word	0x080023fb
 8002384:	080023d5 	.word	0x080023d5
 8002388:	080023e7 	.word	0x080023e7
 800238c:	08002429 	.word	0x08002429
 8002390:	0800242f 	.word	0x0800242f
 8002394:	0800242f 	.word	0x0800242f
 8002398:	0800242f 	.word	0x0800242f
 800239c:	0800242f 	.word	0x0800242f
 80023a0:	0800242f 	.word	0x0800242f
 80023a4:	0800242f 	.word	0x0800242f
 80023a8:	0800242f 	.word	0x0800242f
 80023ac:	0800242f 	.word	0x0800242f
 80023b0:	0800242f 	.word	0x0800242f
 80023b4:	0800242f 	.word	0x0800242f
 80023b8:	0800242f 	.word	0x0800242f
 80023bc:	0800242f 	.word	0x0800242f
 80023c0:	0800242f 	.word	0x0800242f
 80023c4:	080023dd 	.word	0x080023dd
 80023c8:	080023f1 	.word	0x080023f1
 80023cc:	4a82      	ldr	r2, [pc, #520]	; (80025d8 <HAL_GPIO_Init+0x2d8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023d2:	e02c      	b.n	800242e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	623b      	str	r3, [r7, #32]
          break;
 80023da:	e029      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	3304      	adds	r3, #4
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e024      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	3308      	adds	r3, #8
 80023ec:	623b      	str	r3, [r7, #32]
          break;
 80023ee:	e01f      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	330c      	adds	r3, #12
 80023f6:	623b      	str	r3, [r7, #32]
          break;
 80023f8:	e01a      	b.n	8002430 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002402:	2304      	movs	r3, #4
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e013      	b.n	8002430 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002410:	2308      	movs	r3, #8
 8002412:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	611a      	str	r2, [r3, #16]
          break;
 800241a:	e009      	b.n	8002430 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800241c:	2308      	movs	r3, #8
 800241e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	615a      	str	r2, [r3, #20]
          break;
 8002426:	e003      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
          break;
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x130>
          break;
 800242e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d801      	bhi.n	800243a <HAL_GPIO_Init+0x13a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	e001      	b.n	800243e <HAL_GPIO_Init+0x13e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2bff      	cmp	r3, #255	; 0xff
 8002444:	d802      	bhi.n	800244c <HAL_GPIO_Init+0x14c>
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	e002      	b.n	8002452 <HAL_GPIO_Init+0x152>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	3b08      	subs	r3, #8
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	210f      	movs	r1, #15
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	401a      	ands	r2, r3
 8002464:	6a39      	ldr	r1, [r7, #32]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	431a      	orrs	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8090 	beq.w	80025a0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002480:	4b56      	ldr	r3, [pc, #344]	; (80025dc <HAL_GPIO_Init+0x2dc>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a55      	ldr	r2, [pc, #340]	; (80025dc <HAL_GPIO_Init+0x2dc>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_GPIO_Init+0x2dc>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002498:	4a51      	ldr	r2, [pc, #324]	; (80025e0 <HAL_GPIO_Init+0x2e0>)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a49      	ldr	r2, [pc, #292]	; (80025e4 <HAL_GPIO_Init+0x2e4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00d      	beq.n	80024e0 <HAL_GPIO_Init+0x1e0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a48      	ldr	r2, [pc, #288]	; (80025e8 <HAL_GPIO_Init+0x2e8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0x1dc>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a47      	ldr	r2, [pc, #284]	; (80025ec <HAL_GPIO_Init+0x2ec>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_GPIO_Init+0x1d8>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e004      	b.n	80024e2 <HAL_GPIO_Init+0x1e2>
 80024d8:	2303      	movs	r3, #3
 80024da:	e002      	b.n	80024e2 <HAL_GPIO_Init+0x1e2>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_GPIO_Init+0x1e2>
 80024e0:	2300      	movs	r3, #0
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	f002 0203 	and.w	r2, r2, #3
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	4093      	lsls	r3, r2
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024f2:	493b      	ldr	r1, [pc, #236]	; (80025e0 <HAL_GPIO_Init+0x2e0>)
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4937      	ldr	r1, [pc, #220]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800251a:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	43db      	mvns	r3, r3
 8002522:	4933      	ldr	r1, [pc, #204]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 8002524:	4013      	ands	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002534:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	492d      	ldr	r1, [pc, #180]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	e006      	b.n	8002550 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002542:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	43db      	mvns	r3, r3
 800254a:	4929      	ldr	r1, [pc, #164]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 800254c:	4013      	ands	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d006      	beq.n	800256a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	4923      	ldr	r1, [pc, #140]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800256a:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	43db      	mvns	r3, r3
 8002572:	491f      	ldr	r1, [pc, #124]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 8002574:	4013      	ands	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4919      	ldr	r1, [pc, #100]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	4915      	ldr	r1, [pc, #84]	; (80025f0 <HAL_GPIO_Init+0x2f0>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	3301      	adds	r3, #1
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f aeaf 	bne.w	8002314 <HAL_GPIO_Init+0x14>
  }
}
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	372c      	adds	r7, #44	; 0x2c
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	10320000 	.word	0x10320000
 80025c8:	10310000 	.word	0x10310000
 80025cc:	10220000 	.word	0x10220000
 80025d0:	10210000 	.word	0x10210000
 80025d4:	10120000 	.word	0x10120000
 80025d8:	10110000 	.word	0x10110000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010000 	.word	0x40010000
 80025e4:	40010800 	.word	0x40010800
 80025e8:	40010c00 	.word	0x40010c00
 80025ec:	40011000 	.word	0x40011000
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
 8002600:	4613      	mov	r3, r2
 8002602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002604:	787b      	ldrb	r3, [r7, #1]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002610:	e003      	b.n	800261a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	041a      	lsls	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e26c      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8087 	beq.w	8002752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002644:	4b92      	ldr	r3, [pc, #584]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b04      	cmp	r3, #4
 800264e:	d00c      	beq.n	800266a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002650:	4b8f      	ldr	r3, [pc, #572]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d112      	bne.n	8002682 <HAL_RCC_OscConfig+0x5e>
 800265c:	4b8c      	ldr	r3, [pc, #560]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002668:	d10b      	bne.n	8002682 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	4b89      	ldr	r3, [pc, #548]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d06c      	beq.n	8002750 <HAL_RCC_OscConfig+0x12c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d168      	bne.n	8002750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e246      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x76>
 800268c:	4b80      	ldr	r3, [pc, #512]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a7f      	ldr	r2, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e02e      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a2:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0xbc>
 80026c6:	4b72      	ldr	r3, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a71      	ldr	r2, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6e      	ldr	r2, [pc, #440]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xd4>
 80026e0:	4b6b      	ldr	r3, [pc, #428]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6a      	ldr	r2, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a67      	ldr	r2, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7fe ff18 	bl	8001534 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe ff14 	bl	8001534 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1fa      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b5d      	ldr	r3, [pc, #372]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xe4>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe ff04 	bl	8001534 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe ff00 	bl	8001534 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e1e6      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x10c>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d063      	beq.n	8002826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800275e:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800276a:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b08      	cmp	r3, #8
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x18c>
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x176>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1ba      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4939      	ldr	r1, [pc, #228]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_RCC_OscConfig+0x270>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe feb9 	bl	8001534 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c6:	f7fe feb5 	bl	8001534 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e19b      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4927      	ldr	r1, [pc, #156]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_RCC_OscConfig+0x270>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fe98 	bl	8001534 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002808:	f7fe fe94 	bl	8001534 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e17a      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d03a      	beq.n	80028a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d019      	beq.n	800286e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_RCC_OscConfig+0x274>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002840:	f7fe fe78 	bl	8001534 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fe74 	bl	8001534 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e15a      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_RCC_OscConfig+0x26c>)
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002866:	2001      	movs	r0, #1
 8002868:	f000 fad8 	bl	8002e1c <RCC_Delay>
 800286c:	e01c      	b.n	80028a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_OscConfig+0x274>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe fe5e 	bl	8001534 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287a:	e00f      	b.n	800289c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe fe5a 	bl	8001534 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d908      	bls.n	800289c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e140      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	42420000 	.word	0x42420000
 8002898:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b9e      	ldr	r3, [pc, #632]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e9      	bne.n	800287c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a6 	beq.w	8002a02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b97      	ldr	r3, [pc, #604]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b94      	ldr	r3, [pc, #592]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	4a93      	ldr	r2, [pc, #588]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d0:	61d3      	str	r3, [r2, #28]
 80028d2:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028de:	2301      	movs	r3, #1
 80028e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4b8e      	ldr	r3, [pc, #568]	; (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d118      	bne.n	8002920 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ee:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a8a      	ldr	r2, [pc, #552]	; (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fe1b 	bl	8001534 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7fe fe17 	bl	8001534 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0fd      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	4b81      	ldr	r3, [pc, #516]	; (8002b1c <HAL_RCC_OscConfig+0x4f8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d106      	bne.n	8002936 <HAL_RCC_OscConfig+0x312>
 8002928:	4b7b      	ldr	r3, [pc, #492]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4a7a      	ldr	r2, [pc, #488]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6213      	str	r3, [r2, #32]
 8002934:	e02d      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10c      	bne.n	8002958 <HAL_RCC_OscConfig+0x334>
 800293e:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a75      	ldr	r2, [pc, #468]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	4b73      	ldr	r3, [pc, #460]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a72      	ldr	r2, [pc, #456]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6213      	str	r3, [r2, #32]
 8002956:	e01c      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d10c      	bne.n	800297a <HAL_RCC_OscConfig+0x356>
 8002960:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a6c      	ldr	r2, [pc, #432]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4a69      	ldr	r2, [pc, #420]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6213      	str	r3, [r2, #32]
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0x36e>
 800297a:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a63      	ldr	r2, [pc, #396]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d015      	beq.n	80029c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7fe fdcb 	bl	8001534 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fe fdc7 	bl	8001534 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0ab      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b8:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ee      	beq.n	80029a2 <HAL_RCC_OscConfig+0x37e>
 80029c4:	e014      	b.n	80029f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fdb5 	bl	8001534 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fdb1 	bl	8001534 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e095      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ee      	bne.n	80029ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	4b48      	ldr	r3, [pc, #288]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4a47      	ldr	r2, [pc, #284]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 80029fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8081 	beq.w	8002b0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0c:	4b42      	ldr	r3, [pc, #264]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d061      	beq.n	8002adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d146      	bne.n	8002aae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a20:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_OscConfig+0x4fc>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe fd85 	bl	8001534 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe fd81 	bl	8001534 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e067      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a40:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d108      	bne.n	8002a68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	492d      	ldr	r1, [pc, #180]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a68:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a19      	ldr	r1, [r3, #32]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	4927      	ldr	r1, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x4fc>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fd55 	bl	8001534 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe fd51 	bl	8001534 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e037      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x46a>
 8002aac:	e02f      	b.n	8002b0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aae:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <HAL_RCC_OscConfig+0x4fc>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fd3e 	bl	8001534 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fd3a 	bl	8001534 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e020      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x498>
 8002ada:	e018      	b.n	8002b0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42420060 	.word	0x42420060

08002b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0d0      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4965      	ldr	r1, [pc, #404]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d040      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d115      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e073      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06b      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4936      	ldr	r1, [pc, #216]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7fe fc8e 	bl	8001534 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7fe fc8a 	bl	8001534 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e053      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d210      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 0207 	bic.w	r2, r3, #7
 8002c5a:	4922      	ldr	r1, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f821 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fbec 	bl	80014b0 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	080045bc 	.word	0x080045bc
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000004 	.word	0x20000004

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b490      	push	{r4, r7}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d00:	1d3c      	adds	r4, r7, #4
 8002d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d08:	f240 2301 	movw	r3, #513	; 0x201
 8002d0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x40>
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d003      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x46>
 8002d36:	e02d      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3a:	623b      	str	r3, [r7, #32]
      break;
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	0c9b      	lsrs	r3, r3, #18
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c5b      	lsrs	r3, r3, #17
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d76:	fb02 f203 	mul.w	r2, r2, r3
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	e004      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d88:	fb02 f303 	mul.w	r3, r2, r3
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	623b      	str	r3, [r7, #32]
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d96:	623b      	str	r3, [r7, #32]
      break;
 8002d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc90      	pop	{r4, r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	080045ac 	.word	0x080045ac
 8002dac:	40021000 	.word	0x40021000
 8002db0:	007a1200 	.word	0x007a1200
 8002db4:	003d0900 	.word	0x003d0900

08002db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	20000000 	.word	0x20000000

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	f7ff fff2 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	080045cc 	.word	0x080045cc

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0adb      	lsrs	r3, r3, #11
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	080045cc 	.word	0x080045cc

08002e1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <RCC_Delay+0x34>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <RCC_Delay+0x38>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0a5b      	lsrs	r3, r3, #9
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e38:	bf00      	nop
  }
  while (Delay --);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1e5a      	subs	r2, r3, #1
 8002e3e:	60fa      	str	r2, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f9      	bne.n	8002e38 <RCC_Delay+0x1c>
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	20000000 	.word	0x20000000
 8002e54:	10624dd3 	.word	0x10624dd3

08002e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d07d      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e78:	4b4f      	ldr	r3, [pc, #316]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10d      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e84:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	61d3      	str	r3, [r2, #28]
 8002e90:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d118      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eac:	4b43      	ldr	r3, [pc, #268]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a42      	ldr	r2, [pc, #264]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fb3c 	bl	8001534 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec0:	f7fe fb38 	bl	8001534 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e06d      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02e      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d027      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002efc:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f12:	4a29      	ldr	r2, [pc, #164]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d014      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe fb07 	bl	8001534 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe fb03 	bl	8001534 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e036      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ee      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4917      	ldr	r1, [pc, #92]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d105      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	490b      	ldr	r1, [pc, #44]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4904      	ldr	r1, [pc, #16]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	42420440 	.word	0x42420440

08002fc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e041      	b.n	800305a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe f866 	bl	80010bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 f9ec 	bl	80033e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_TIM_PWM_Start+0x24>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e022      	b.n	80030ce <HAL_TIM_PWM_Start+0x6a>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b04      	cmp	r3, #4
 800308c:	d109      	bne.n	80030a2 <HAL_TIM_PWM_Start+0x3e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	e015      	b.n	80030ce <HAL_TIM_PWM_Start+0x6a>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d109      	bne.n	80030bc <HAL_TIM_PWM_Start+0x58>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e008      	b.n	80030ce <HAL_TIM_PWM_Start+0x6a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e059      	b.n	800318a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x82>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e4:	e013      	b.n	800310e <HAL_TIM_PWM_Start+0xaa>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start+0x92>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f4:	e00b      	b.n	800310e <HAL_TIM_PWM_Start+0xaa>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_PWM_Start+0xa2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003104:	e003      	b.n	800310e <HAL_TIM_PWM_Start+0xaa>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	6839      	ldr	r1, [r7, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fb42 	bl	80037a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1c      	ldr	r2, [pc, #112]	; (8003194 <HAL_TIM_PWM_Start+0x130>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d107      	bne.n	8003136 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_TIM_PWM_Start+0x130>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_TIM_PWM_Start+0xf0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d004      	beq.n	8003154 <HAL_TIM_PWM_Start+0xf0>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a12      	ldr	r2, [pc, #72]	; (8003198 <HAL_TIM_PWM_Start+0x134>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d010      	beq.n	8003188 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e007      	b.n	8003188 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400

0800319c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 faf6 	bl	80037a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <HAL_TIM_PWM_Stop+0xc4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d117      	bne.n	80031ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_TIM_PWM_Stop+0x52>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	f240 4344 	movw	r3, #1092	; 0x444
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d107      	bne.n	80031ee <HAL_TIM_PWM_Stop+0x52>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10f      	bne.n	800321e <HAL_TIM_PWM_Stop+0x82>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	f240 4344 	movw	r3, #1092	; 0x444
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d107      	bne.n	800321e <HAL_TIM_PWM_Stop+0x82>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Stop+0x92>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322c:	e013      	b.n	8003256 <HAL_TIM_PWM_Stop+0xba>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Stop+0xa2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800323c:	e00b      	b.n	8003256 <HAL_TIM_PWM_Stop+0xba>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d104      	bne.n	800324e <HAL_TIM_PWM_Stop+0xb2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324c:	e003      	b.n	8003256 <HAL_TIM_PWM_Stop+0xba>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40012c00 	.word	0x40012c00

08003264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800327a:	2302      	movs	r3, #2
 800327c:	e0ac      	b.n	80033d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	f200 809f 	bhi.w	80033cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800328e:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032c9 	.word	0x080032c9
 8003298:	080033cd 	.word	0x080033cd
 800329c:	080033cd 	.word	0x080033cd
 80032a0:	080033cd 	.word	0x080033cd
 80032a4:	08003309 	.word	0x08003309
 80032a8:	080033cd 	.word	0x080033cd
 80032ac:	080033cd 	.word	0x080033cd
 80032b0:	080033cd 	.word	0x080033cd
 80032b4:	0800334b 	.word	0x0800334b
 80032b8:	080033cd 	.word	0x080033cd
 80032bc:	080033cd 	.word	0x080033cd
 80032c0:	080033cd 	.word	0x080033cd
 80032c4:	0800338b 	.word	0x0800338b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f8de 	bl	8003490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0208 	orr.w	r2, r2, #8
 80032e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0204 	bic.w	r2, r2, #4
 80032f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6999      	ldr	r1, [r3, #24]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	619a      	str	r2, [r3, #24]
      break;
 8003306:	e062      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f924 	bl	800355c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6999      	ldr	r1, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	021a      	lsls	r2, r3, #8
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	619a      	str	r2, [r3, #24]
      break;
 8003348:	e041      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f96d 	bl	8003630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0208 	orr.w	r2, r2, #8
 8003364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0204 	bic.w	r2, r2, #4
 8003374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69d9      	ldr	r1, [r3, #28]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	61da      	str	r2, [r3, #28]
      break;
 8003388:	e021      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f9b7 	bl	8003704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69da      	ldr	r2, [r3, #28]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	021a      	lsls	r2, r3, #8
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	61da      	str	r2, [r3, #28]
      break;
 80033ca:	e000      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80033cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a25      	ldr	r2, [pc, #148]	; (8003488 <TIM_Base_SetConfig+0xa8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_Base_SetConfig+0x28>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0x28>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a22      	ldr	r2, [pc, #136]	; (800348c <TIM_Base_SetConfig+0xac>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <TIM_Base_SetConfig+0xa8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0x52>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0x52>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a17      	ldr	r2, [pc, #92]	; (800348c <TIM_Base_SetConfig+0xac>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <TIM_Base_SetConfig+0xa8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400

08003490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0303 	bic.w	r3, r3, #3
 80034c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f023 0302 	bic.w	r3, r3, #2
 80034d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <TIM_OC1_SetConfig+0xc8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10c      	bne.n	8003506 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0308 	bic.w	r3, r3, #8
 80034f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a13      	ldr	r2, [pc, #76]	; (8003558 <TIM_OC1_SetConfig+0xc8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d111      	bne.n	8003532 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800351c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00

0800355c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0210 	bic.w	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0320 	bic.w	r3, r3, #32
 80035a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <TIM_OC2_SetConfig+0xd0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10d      	bne.n	80035d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a14      	ldr	r2, [pc, #80]	; (800362c <TIM_OC2_SetConfig+0xd0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d113      	bne.n	8003608 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40012c00 	.word	0x40012c00

08003630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <TIM_OC3_SetConfig+0xd0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10d      	bne.n	80036aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a14      	ldr	r2, [pc, #80]	; (8003700 <TIM_OC3_SetConfig+0xd0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00

08003704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800374e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	031b      	lsls	r3, r3, #12
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0f      	ldr	r2, [pc, #60]	; (800379c <TIM_OC4_SetConfig+0x98>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d109      	bne.n	8003778 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00

080037a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	2201      	movs	r2, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	401a      	ands	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1a      	ldr	r2, [r3, #32]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	621a      	str	r2, [r3, #32]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e041      	b.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a14      	ldr	r2, [pc, #80]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d004      	beq.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a10      	ldr	r2, [pc, #64]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d10c      	bne.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	4313      	orrs	r3, r2
 8003868:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40000400 	.word	0x40000400

08003898 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e03d      	b.n	8003930 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e03f      	b.n	80039cc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7fd fca1 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2224      	movs	r2, #36	; 0x24
 800396a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f904 	bl	8003b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003992:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d17c      	bne.n	8003aee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_UART_Transmit+0x2c>
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e075      	b.n	8003af0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Transmit+0x3e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e06e      	b.n	8003af0 <HAL_UART_Transmit+0x11c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2221      	movs	r2, #33	; 0x21
 8003a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a28:	f7fd fd84 	bl	8001534 <HAL_GetTick>
 8003a2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d108      	bne.n	8003a56 <HAL_UART_Transmit+0x82>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e003      	b.n	8003a5e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a66:	e02a      	b.n	8003abe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f840 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e036      	b.n	8003af0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a96:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e007      	b.n	8003ab0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	781a      	ldrb	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3301      	adds	r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1cf      	bne.n	8003a68 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2140      	movs	r1, #64	; 0x40
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f810 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e006      	b.n	8003af0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b08:	e02c      	b.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b10:	d028      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b18:	f7fd fd0c 	bl	8001534 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d21d      	bcs.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e00f      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d0c3      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bc6:	f023 030c 	bic.w	r3, r3, #12
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2c      	ldr	r2, [pc, #176]	; (8003ca0 <UART_SetConfig+0x114>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7ff f8fe 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	e002      	b.n	8003c02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7ff f8e6 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8003c00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	009a      	lsls	r2, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	0119      	lsls	r1, r3, #4
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009a      	lsls	r2, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2064      	movs	r0, #100	; 0x64
 8003c42:	fb00 f303 	mul.w	r3, r0, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	3332      	adds	r3, #50	; 0x32
 8003c4c:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c58:	4419      	add	r1, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009a      	lsls	r2, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c72:	fba3 0302 	umull	r0, r3, r3, r2
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	2064      	movs	r0, #100	; 0x64
 8003c7a:	fb00 f303 	mul.w	r3, r0, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	3332      	adds	r3, #50	; 0x32
 8003c84:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <UART_SetConfig+0x118>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	f003 020f 	and.w	r2, r3, #15
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	440a      	add	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	51eb851f 	.word	0x51eb851f

08003ca8 <__errno>:
 8003ca8:	4b01      	ldr	r3, [pc, #4]	; (8003cb0 <__errno+0x8>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	2000000c 	.word	0x2000000c

08003cb4 <__libc_init_array>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	2600      	movs	r6, #0
 8003cb8:	4d0c      	ldr	r5, [pc, #48]	; (8003cec <__libc_init_array+0x38>)
 8003cba:	4c0d      	ldr	r4, [pc, #52]	; (8003cf0 <__libc_init_array+0x3c>)
 8003cbc:	1b64      	subs	r4, r4, r5
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	42a6      	cmp	r6, r4
 8003cc2:	d109      	bne.n	8003cd8 <__libc_init_array+0x24>
 8003cc4:	f000 fc5c 	bl	8004580 <_init>
 8003cc8:	2600      	movs	r6, #0
 8003cca:	4d0a      	ldr	r5, [pc, #40]	; (8003cf4 <__libc_init_array+0x40>)
 8003ccc:	4c0a      	ldr	r4, [pc, #40]	; (8003cf8 <__libc_init_array+0x44>)
 8003cce:	1b64      	subs	r4, r4, r5
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	42a6      	cmp	r6, r4
 8003cd4:	d105      	bne.n	8003ce2 <__libc_init_array+0x2e>
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cdc:	4798      	blx	r3
 8003cde:	3601      	adds	r6, #1
 8003ce0:	e7ee      	b.n	8003cc0 <__libc_init_array+0xc>
 8003ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce6:	4798      	blx	r3
 8003ce8:	3601      	adds	r6, #1
 8003cea:	e7f2      	b.n	8003cd2 <__libc_init_array+0x1e>
 8003cec:	08004608 	.word	0x08004608
 8003cf0:	08004608 	.word	0x08004608
 8003cf4:	08004608 	.word	0x08004608
 8003cf8:	0800460c 	.word	0x0800460c

08003cfc <memcpy>:
 8003cfc:	440a      	add	r2, r1
 8003cfe:	4291      	cmp	r1, r2
 8003d00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d04:	d100      	bne.n	8003d08 <memcpy+0xc>
 8003d06:	4770      	bx	lr
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d0e:	4291      	cmp	r1, r2
 8003d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d14:	d1f9      	bne.n	8003d0a <memcpy+0xe>
 8003d16:	bd10      	pop	{r4, pc}

08003d18 <memset>:
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4402      	add	r2, r0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d100      	bne.n	8003d22 <memset+0xa>
 8003d20:	4770      	bx	lr
 8003d22:	f803 1b01 	strb.w	r1, [r3], #1
 8003d26:	e7f9      	b.n	8003d1c <memset+0x4>

08003d28 <siprintf>:
 8003d28:	b40e      	push	{r1, r2, r3}
 8003d2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d2e:	b500      	push	{lr}
 8003d30:	b09c      	sub	sp, #112	; 0x70
 8003d32:	ab1d      	add	r3, sp, #116	; 0x74
 8003d34:	9002      	str	r0, [sp, #8]
 8003d36:	9006      	str	r0, [sp, #24]
 8003d38:	9107      	str	r1, [sp, #28]
 8003d3a:	9104      	str	r1, [sp, #16]
 8003d3c:	4808      	ldr	r0, [pc, #32]	; (8003d60 <siprintf+0x38>)
 8003d3e:	4909      	ldr	r1, [pc, #36]	; (8003d64 <siprintf+0x3c>)
 8003d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d44:	9105      	str	r1, [sp, #20]
 8003d46:	6800      	ldr	r0, [r0, #0]
 8003d48:	a902      	add	r1, sp, #8
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	f000 f868 	bl	8003e20 <_svfiprintf_r>
 8003d50:	2200      	movs	r2, #0
 8003d52:	9b02      	ldr	r3, [sp, #8]
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	b01c      	add	sp, #112	; 0x70
 8003d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d5c:	b003      	add	sp, #12
 8003d5e:	4770      	bx	lr
 8003d60:	2000000c 	.word	0x2000000c
 8003d64:	ffff0208 	.word	0xffff0208

08003d68 <__ssputs_r>:
 8003d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d6c:	688e      	ldr	r6, [r1, #8]
 8003d6e:	4682      	mov	sl, r0
 8003d70:	429e      	cmp	r6, r3
 8003d72:	460c      	mov	r4, r1
 8003d74:	4690      	mov	r8, r2
 8003d76:	461f      	mov	r7, r3
 8003d78:	d838      	bhi.n	8003dec <__ssputs_r+0x84>
 8003d7a:	898a      	ldrh	r2, [r1, #12]
 8003d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d80:	d032      	beq.n	8003de8 <__ssputs_r+0x80>
 8003d82:	6825      	ldr	r5, [r4, #0]
 8003d84:	6909      	ldr	r1, [r1, #16]
 8003d86:	3301      	adds	r3, #1
 8003d88:	eba5 0901 	sub.w	r9, r5, r1
 8003d8c:	6965      	ldr	r5, [r4, #20]
 8003d8e:	444b      	add	r3, r9
 8003d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d98:	106d      	asrs	r5, r5, #1
 8003d9a:	429d      	cmp	r5, r3
 8003d9c:	bf38      	it	cc
 8003d9e:	461d      	movcc	r5, r3
 8003da0:	0553      	lsls	r3, r2, #21
 8003da2:	d531      	bpl.n	8003e08 <__ssputs_r+0xa0>
 8003da4:	4629      	mov	r1, r5
 8003da6:	f000 fb45 	bl	8004434 <_malloc_r>
 8003daa:	4606      	mov	r6, r0
 8003dac:	b950      	cbnz	r0, 8003dc4 <__ssputs_r+0x5c>
 8003dae:	230c      	movs	r3, #12
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003db4:	f8ca 3000 	str.w	r3, [sl]
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	6921      	ldr	r1, [r4, #16]
 8003dc8:	f7ff ff98 	bl	8003cfc <memcpy>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd6:	81a3      	strh	r3, [r4, #12]
 8003dd8:	6126      	str	r6, [r4, #16]
 8003dda:	444e      	add	r6, r9
 8003ddc:	6026      	str	r6, [r4, #0]
 8003dde:	463e      	mov	r6, r7
 8003de0:	6165      	str	r5, [r4, #20]
 8003de2:	eba5 0509 	sub.w	r5, r5, r9
 8003de6:	60a5      	str	r5, [r4, #8]
 8003de8:	42be      	cmp	r6, r7
 8003dea:	d900      	bls.n	8003dee <__ssputs_r+0x86>
 8003dec:	463e      	mov	r6, r7
 8003dee:	4632      	mov	r2, r6
 8003df0:	4641      	mov	r1, r8
 8003df2:	6820      	ldr	r0, [r4, #0]
 8003df4:	f000 fab8 	bl	8004368 <memmove>
 8003df8:	68a3      	ldr	r3, [r4, #8]
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	1b9b      	subs	r3, r3, r6
 8003dfe:	4432      	add	r2, r6
 8003e00:	2000      	movs	r0, #0
 8003e02:	60a3      	str	r3, [r4, #8]
 8003e04:	6022      	str	r2, [r4, #0]
 8003e06:	e7db      	b.n	8003dc0 <__ssputs_r+0x58>
 8003e08:	462a      	mov	r2, r5
 8003e0a:	f000 fb6d 	bl	80044e8 <_realloc_r>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d1e1      	bne.n	8003dd8 <__ssputs_r+0x70>
 8003e14:	4650      	mov	r0, sl
 8003e16:	6921      	ldr	r1, [r4, #16]
 8003e18:	f000 fac0 	bl	800439c <_free_r>
 8003e1c:	e7c7      	b.n	8003dae <__ssputs_r+0x46>
	...

08003e20 <_svfiprintf_r>:
 8003e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e24:	4698      	mov	r8, r3
 8003e26:	898b      	ldrh	r3, [r1, #12]
 8003e28:	4607      	mov	r7, r0
 8003e2a:	061b      	lsls	r3, r3, #24
 8003e2c:	460d      	mov	r5, r1
 8003e2e:	4614      	mov	r4, r2
 8003e30:	b09d      	sub	sp, #116	; 0x74
 8003e32:	d50e      	bpl.n	8003e52 <_svfiprintf_r+0x32>
 8003e34:	690b      	ldr	r3, [r1, #16]
 8003e36:	b963      	cbnz	r3, 8003e52 <_svfiprintf_r+0x32>
 8003e38:	2140      	movs	r1, #64	; 0x40
 8003e3a:	f000 fafb 	bl	8004434 <_malloc_r>
 8003e3e:	6028      	str	r0, [r5, #0]
 8003e40:	6128      	str	r0, [r5, #16]
 8003e42:	b920      	cbnz	r0, 8003e4e <_svfiprintf_r+0x2e>
 8003e44:	230c      	movs	r3, #12
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e4c:	e0d1      	b.n	8003ff2 <_svfiprintf_r+0x1d2>
 8003e4e:	2340      	movs	r3, #64	; 0x40
 8003e50:	616b      	str	r3, [r5, #20]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9309      	str	r3, [sp, #36]	; 0x24
 8003e56:	2320      	movs	r3, #32
 8003e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e5c:	2330      	movs	r3, #48	; 0x30
 8003e5e:	f04f 0901 	mov.w	r9, #1
 8003e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800400c <_svfiprintf_r+0x1ec>
 8003e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e6e:	4623      	mov	r3, r4
 8003e70:	469a      	mov	sl, r3
 8003e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e76:	b10a      	cbz	r2, 8003e7c <_svfiprintf_r+0x5c>
 8003e78:	2a25      	cmp	r2, #37	; 0x25
 8003e7a:	d1f9      	bne.n	8003e70 <_svfiprintf_r+0x50>
 8003e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e80:	d00b      	beq.n	8003e9a <_svfiprintf_r+0x7a>
 8003e82:	465b      	mov	r3, fp
 8003e84:	4622      	mov	r2, r4
 8003e86:	4629      	mov	r1, r5
 8003e88:	4638      	mov	r0, r7
 8003e8a:	f7ff ff6d 	bl	8003d68 <__ssputs_r>
 8003e8e:	3001      	adds	r0, #1
 8003e90:	f000 80aa 	beq.w	8003fe8 <_svfiprintf_r+0x1c8>
 8003e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e96:	445a      	add	r2, fp
 8003e98:	9209      	str	r2, [sp, #36]	; 0x24
 8003e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80a2 	beq.w	8003fe8 <_svfiprintf_r+0x1c8>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eae:	f10a 0a01 	add.w	sl, sl, #1
 8003eb2:	9304      	str	r3, [sp, #16]
 8003eb4:	9307      	str	r3, [sp, #28]
 8003eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eba:	931a      	str	r3, [sp, #104]	; 0x68
 8003ebc:	4654      	mov	r4, sl
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec4:	4851      	ldr	r0, [pc, #324]	; (800400c <_svfiprintf_r+0x1ec>)
 8003ec6:	f000 fa41 	bl	800434c <memchr>
 8003eca:	9a04      	ldr	r2, [sp, #16]
 8003ecc:	b9d8      	cbnz	r0, 8003f06 <_svfiprintf_r+0xe6>
 8003ece:	06d0      	lsls	r0, r2, #27
 8003ed0:	bf44      	itt	mi
 8003ed2:	2320      	movmi	r3, #32
 8003ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ed8:	0711      	lsls	r1, r2, #28
 8003eda:	bf44      	itt	mi
 8003edc:	232b      	movmi	r3, #43	; 0x2b
 8003ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee8:	d015      	beq.n	8003f16 <_svfiprintf_r+0xf6>
 8003eea:	4654      	mov	r4, sl
 8003eec:	2000      	movs	r0, #0
 8003eee:	f04f 0c0a 	mov.w	ip, #10
 8003ef2:	9a07      	ldr	r2, [sp, #28]
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003efa:	3b30      	subs	r3, #48	; 0x30
 8003efc:	2b09      	cmp	r3, #9
 8003efe:	d94e      	bls.n	8003f9e <_svfiprintf_r+0x17e>
 8003f00:	b1b0      	cbz	r0, 8003f30 <_svfiprintf_r+0x110>
 8003f02:	9207      	str	r2, [sp, #28]
 8003f04:	e014      	b.n	8003f30 <_svfiprintf_r+0x110>
 8003f06:	eba0 0308 	sub.w	r3, r0, r8
 8003f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	46a2      	mov	sl, r4
 8003f12:	9304      	str	r3, [sp, #16]
 8003f14:	e7d2      	b.n	8003ebc <_svfiprintf_r+0x9c>
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	1d19      	adds	r1, r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	9103      	str	r1, [sp, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bfbb      	ittet	lt
 8003f22:	425b      	neglt	r3, r3
 8003f24:	f042 0202 	orrlt.w	r2, r2, #2
 8003f28:	9307      	strge	r3, [sp, #28]
 8003f2a:	9307      	strlt	r3, [sp, #28]
 8003f2c:	bfb8      	it	lt
 8003f2e:	9204      	strlt	r2, [sp, #16]
 8003f30:	7823      	ldrb	r3, [r4, #0]
 8003f32:	2b2e      	cmp	r3, #46	; 0x2e
 8003f34:	d10c      	bne.n	8003f50 <_svfiprintf_r+0x130>
 8003f36:	7863      	ldrb	r3, [r4, #1]
 8003f38:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3a:	d135      	bne.n	8003fa8 <_svfiprintf_r+0x188>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	3402      	adds	r4, #2
 8003f40:	1d1a      	adds	r2, r3, #4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	9203      	str	r2, [sp, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bfb8      	it	lt
 8003f4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f4e:	9305      	str	r3, [sp, #20]
 8003f50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800401c <_svfiprintf_r+0x1fc>
 8003f54:	2203      	movs	r2, #3
 8003f56:	4650      	mov	r0, sl
 8003f58:	7821      	ldrb	r1, [r4, #0]
 8003f5a:	f000 f9f7 	bl	800434c <memchr>
 8003f5e:	b140      	cbz	r0, 8003f72 <_svfiprintf_r+0x152>
 8003f60:	2340      	movs	r3, #64	; 0x40
 8003f62:	eba0 000a 	sub.w	r0, r0, sl
 8003f66:	fa03 f000 	lsl.w	r0, r3, r0
 8003f6a:	9b04      	ldr	r3, [sp, #16]
 8003f6c:	3401      	adds	r4, #1
 8003f6e:	4303      	orrs	r3, r0
 8003f70:	9304      	str	r3, [sp, #16]
 8003f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f76:	2206      	movs	r2, #6
 8003f78:	4825      	ldr	r0, [pc, #148]	; (8004010 <_svfiprintf_r+0x1f0>)
 8003f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f7e:	f000 f9e5 	bl	800434c <memchr>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d038      	beq.n	8003ff8 <_svfiprintf_r+0x1d8>
 8003f86:	4b23      	ldr	r3, [pc, #140]	; (8004014 <_svfiprintf_r+0x1f4>)
 8003f88:	bb1b      	cbnz	r3, 8003fd2 <_svfiprintf_r+0x1b2>
 8003f8a:	9b03      	ldr	r3, [sp, #12]
 8003f8c:	3307      	adds	r3, #7
 8003f8e:	f023 0307 	bic.w	r3, r3, #7
 8003f92:	3308      	adds	r3, #8
 8003f94:	9303      	str	r3, [sp, #12]
 8003f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f98:	4433      	add	r3, r6
 8003f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9c:	e767      	b.n	8003e6e <_svfiprintf_r+0x4e>
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fa6:	e7a5      	b.n	8003ef4 <_svfiprintf_r+0xd4>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f04f 0c0a 	mov.w	ip, #10
 8003fae:	4619      	mov	r1, r3
 8003fb0:	3401      	adds	r4, #1
 8003fb2:	9305      	str	r3, [sp, #20]
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fba:	3a30      	subs	r2, #48	; 0x30
 8003fbc:	2a09      	cmp	r2, #9
 8003fbe:	d903      	bls.n	8003fc8 <_svfiprintf_r+0x1a8>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0c5      	beq.n	8003f50 <_svfiprintf_r+0x130>
 8003fc4:	9105      	str	r1, [sp, #20]
 8003fc6:	e7c3      	b.n	8003f50 <_svfiprintf_r+0x130>
 8003fc8:	4604      	mov	r4, r0
 8003fca:	2301      	movs	r3, #1
 8003fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fd0:	e7f0      	b.n	8003fb4 <_svfiprintf_r+0x194>
 8003fd2:	ab03      	add	r3, sp, #12
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	462a      	mov	r2, r5
 8003fd8:	4638      	mov	r0, r7
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <_svfiprintf_r+0x1f8>)
 8003fdc:	a904      	add	r1, sp, #16
 8003fde:	f3af 8000 	nop.w
 8003fe2:	1c42      	adds	r2, r0, #1
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	d1d6      	bne.n	8003f96 <_svfiprintf_r+0x176>
 8003fe8:	89ab      	ldrh	r3, [r5, #12]
 8003fea:	065b      	lsls	r3, r3, #25
 8003fec:	f53f af2c 	bmi.w	8003e48 <_svfiprintf_r+0x28>
 8003ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ff2:	b01d      	add	sp, #116	; 0x74
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	462a      	mov	r2, r5
 8003ffe:	4638      	mov	r0, r7
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <_svfiprintf_r+0x1f8>)
 8004002:	a904      	add	r1, sp, #16
 8004004:	f000 f87c 	bl	8004100 <_printf_i>
 8004008:	e7eb      	b.n	8003fe2 <_svfiprintf_r+0x1c2>
 800400a:	bf00      	nop
 800400c:	080045d4 	.word	0x080045d4
 8004010:	080045de 	.word	0x080045de
 8004014:	00000000 	.word	0x00000000
 8004018:	08003d69 	.word	0x08003d69
 800401c:	080045da 	.word	0x080045da

08004020 <_printf_common>:
 8004020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	4616      	mov	r6, r2
 8004026:	4699      	mov	r9, r3
 8004028:	688a      	ldr	r2, [r1, #8]
 800402a:	690b      	ldr	r3, [r1, #16]
 800402c:	4607      	mov	r7, r0
 800402e:	4293      	cmp	r3, r2
 8004030:	bfb8      	it	lt
 8004032:	4613      	movlt	r3, r2
 8004034:	6033      	str	r3, [r6, #0]
 8004036:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800403a:	460c      	mov	r4, r1
 800403c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004040:	b10a      	cbz	r2, 8004046 <_printf_common+0x26>
 8004042:	3301      	adds	r3, #1
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	0699      	lsls	r1, r3, #26
 800404a:	bf42      	ittt	mi
 800404c:	6833      	ldrmi	r3, [r6, #0]
 800404e:	3302      	addmi	r3, #2
 8004050:	6033      	strmi	r3, [r6, #0]
 8004052:	6825      	ldr	r5, [r4, #0]
 8004054:	f015 0506 	ands.w	r5, r5, #6
 8004058:	d106      	bne.n	8004068 <_printf_common+0x48>
 800405a:	f104 0a19 	add.w	sl, r4, #25
 800405e:	68e3      	ldr	r3, [r4, #12]
 8004060:	6832      	ldr	r2, [r6, #0]
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	42ab      	cmp	r3, r5
 8004066:	dc28      	bgt.n	80040ba <_printf_common+0x9a>
 8004068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800406c:	1e13      	subs	r3, r2, #0
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	bf18      	it	ne
 8004072:	2301      	movne	r3, #1
 8004074:	0692      	lsls	r2, r2, #26
 8004076:	d42d      	bmi.n	80040d4 <_printf_common+0xb4>
 8004078:	4649      	mov	r1, r9
 800407a:	4638      	mov	r0, r7
 800407c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004080:	47c0      	blx	r8
 8004082:	3001      	adds	r0, #1
 8004084:	d020      	beq.n	80040c8 <_printf_common+0xa8>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	68e5      	ldr	r5, [r4, #12]
 800408a:	f003 0306 	and.w	r3, r3, #6
 800408e:	2b04      	cmp	r3, #4
 8004090:	bf18      	it	ne
 8004092:	2500      	movne	r5, #0
 8004094:	6832      	ldr	r2, [r6, #0]
 8004096:	f04f 0600 	mov.w	r6, #0
 800409a:	68a3      	ldr	r3, [r4, #8]
 800409c:	bf08      	it	eq
 800409e:	1aad      	subeq	r5, r5, r2
 80040a0:	6922      	ldr	r2, [r4, #16]
 80040a2:	bf08      	it	eq
 80040a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040a8:	4293      	cmp	r3, r2
 80040aa:	bfc4      	itt	gt
 80040ac:	1a9b      	subgt	r3, r3, r2
 80040ae:	18ed      	addgt	r5, r5, r3
 80040b0:	341a      	adds	r4, #26
 80040b2:	42b5      	cmp	r5, r6
 80040b4:	d11a      	bne.n	80040ec <_printf_common+0xcc>
 80040b6:	2000      	movs	r0, #0
 80040b8:	e008      	b.n	80040cc <_printf_common+0xac>
 80040ba:	2301      	movs	r3, #1
 80040bc:	4652      	mov	r2, sl
 80040be:	4649      	mov	r1, r9
 80040c0:	4638      	mov	r0, r7
 80040c2:	47c0      	blx	r8
 80040c4:	3001      	adds	r0, #1
 80040c6:	d103      	bne.n	80040d0 <_printf_common+0xb0>
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d0:	3501      	adds	r5, #1
 80040d2:	e7c4      	b.n	800405e <_printf_common+0x3e>
 80040d4:	2030      	movs	r0, #48	; 0x30
 80040d6:	18e1      	adds	r1, r4, r3
 80040d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040e2:	4422      	add	r2, r4
 80040e4:	3302      	adds	r3, #2
 80040e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ea:	e7c5      	b.n	8004078 <_printf_common+0x58>
 80040ec:	2301      	movs	r3, #1
 80040ee:	4622      	mov	r2, r4
 80040f0:	4649      	mov	r1, r9
 80040f2:	4638      	mov	r0, r7
 80040f4:	47c0      	blx	r8
 80040f6:	3001      	adds	r0, #1
 80040f8:	d0e6      	beq.n	80040c8 <_printf_common+0xa8>
 80040fa:	3601      	adds	r6, #1
 80040fc:	e7d9      	b.n	80040b2 <_printf_common+0x92>
	...

08004100 <_printf_i>:
 8004100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004104:	460c      	mov	r4, r1
 8004106:	7e27      	ldrb	r7, [r4, #24]
 8004108:	4691      	mov	r9, r2
 800410a:	2f78      	cmp	r7, #120	; 0x78
 800410c:	4680      	mov	r8, r0
 800410e:	469a      	mov	sl, r3
 8004110:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004116:	d807      	bhi.n	8004128 <_printf_i+0x28>
 8004118:	2f62      	cmp	r7, #98	; 0x62
 800411a:	d80a      	bhi.n	8004132 <_printf_i+0x32>
 800411c:	2f00      	cmp	r7, #0
 800411e:	f000 80d9 	beq.w	80042d4 <_printf_i+0x1d4>
 8004122:	2f58      	cmp	r7, #88	; 0x58
 8004124:	f000 80a4 	beq.w	8004270 <_printf_i+0x170>
 8004128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800412c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004130:	e03a      	b.n	80041a8 <_printf_i+0xa8>
 8004132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004136:	2b15      	cmp	r3, #21
 8004138:	d8f6      	bhi.n	8004128 <_printf_i+0x28>
 800413a:	a001      	add	r0, pc, #4	; (adr r0, 8004140 <_printf_i+0x40>)
 800413c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004140:	08004199 	.word	0x08004199
 8004144:	080041ad 	.word	0x080041ad
 8004148:	08004129 	.word	0x08004129
 800414c:	08004129 	.word	0x08004129
 8004150:	08004129 	.word	0x08004129
 8004154:	08004129 	.word	0x08004129
 8004158:	080041ad 	.word	0x080041ad
 800415c:	08004129 	.word	0x08004129
 8004160:	08004129 	.word	0x08004129
 8004164:	08004129 	.word	0x08004129
 8004168:	08004129 	.word	0x08004129
 800416c:	080042bb 	.word	0x080042bb
 8004170:	080041dd 	.word	0x080041dd
 8004174:	0800429d 	.word	0x0800429d
 8004178:	08004129 	.word	0x08004129
 800417c:	08004129 	.word	0x08004129
 8004180:	080042dd 	.word	0x080042dd
 8004184:	08004129 	.word	0x08004129
 8004188:	080041dd 	.word	0x080041dd
 800418c:	08004129 	.word	0x08004129
 8004190:	08004129 	.word	0x08004129
 8004194:	080042a5 	.word	0x080042a5
 8004198:	680b      	ldr	r3, [r1, #0]
 800419a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800419e:	1d1a      	adds	r2, r3, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	600a      	str	r2, [r1, #0]
 80041a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0a4      	b.n	80042f6 <_printf_i+0x1f6>
 80041ac:	6825      	ldr	r5, [r4, #0]
 80041ae:	6808      	ldr	r0, [r1, #0]
 80041b0:	062e      	lsls	r6, r5, #24
 80041b2:	f100 0304 	add.w	r3, r0, #4
 80041b6:	d50a      	bpl.n	80041ce <_printf_i+0xce>
 80041b8:	6805      	ldr	r5, [r0, #0]
 80041ba:	600b      	str	r3, [r1, #0]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	da03      	bge.n	80041c8 <_printf_i+0xc8>
 80041c0:	232d      	movs	r3, #45	; 0x2d
 80041c2:	426d      	negs	r5, r5
 80041c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c8:	230a      	movs	r3, #10
 80041ca:	485e      	ldr	r0, [pc, #376]	; (8004344 <_printf_i+0x244>)
 80041cc:	e019      	b.n	8004202 <_printf_i+0x102>
 80041ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041d2:	6805      	ldr	r5, [r0, #0]
 80041d4:	600b      	str	r3, [r1, #0]
 80041d6:	bf18      	it	ne
 80041d8:	b22d      	sxthne	r5, r5
 80041da:	e7ef      	b.n	80041bc <_printf_i+0xbc>
 80041dc:	680b      	ldr	r3, [r1, #0]
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	1d18      	adds	r0, r3, #4
 80041e2:	6008      	str	r0, [r1, #0]
 80041e4:	0628      	lsls	r0, r5, #24
 80041e6:	d501      	bpl.n	80041ec <_printf_i+0xec>
 80041e8:	681d      	ldr	r5, [r3, #0]
 80041ea:	e002      	b.n	80041f2 <_printf_i+0xf2>
 80041ec:	0669      	lsls	r1, r5, #25
 80041ee:	d5fb      	bpl.n	80041e8 <_printf_i+0xe8>
 80041f0:	881d      	ldrh	r5, [r3, #0]
 80041f2:	2f6f      	cmp	r7, #111	; 0x6f
 80041f4:	bf0c      	ite	eq
 80041f6:	2308      	moveq	r3, #8
 80041f8:	230a      	movne	r3, #10
 80041fa:	4852      	ldr	r0, [pc, #328]	; (8004344 <_printf_i+0x244>)
 80041fc:	2100      	movs	r1, #0
 80041fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004202:	6866      	ldr	r6, [r4, #4]
 8004204:	2e00      	cmp	r6, #0
 8004206:	bfa8      	it	ge
 8004208:	6821      	ldrge	r1, [r4, #0]
 800420a:	60a6      	str	r6, [r4, #8]
 800420c:	bfa4      	itt	ge
 800420e:	f021 0104 	bicge.w	r1, r1, #4
 8004212:	6021      	strge	r1, [r4, #0]
 8004214:	b90d      	cbnz	r5, 800421a <_printf_i+0x11a>
 8004216:	2e00      	cmp	r6, #0
 8004218:	d04d      	beq.n	80042b6 <_printf_i+0x1b6>
 800421a:	4616      	mov	r6, r2
 800421c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004220:	fb03 5711 	mls	r7, r3, r1, r5
 8004224:	5dc7      	ldrb	r7, [r0, r7]
 8004226:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800422a:	462f      	mov	r7, r5
 800422c:	42bb      	cmp	r3, r7
 800422e:	460d      	mov	r5, r1
 8004230:	d9f4      	bls.n	800421c <_printf_i+0x11c>
 8004232:	2b08      	cmp	r3, #8
 8004234:	d10b      	bne.n	800424e <_printf_i+0x14e>
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	07df      	lsls	r7, r3, #31
 800423a:	d508      	bpl.n	800424e <_printf_i+0x14e>
 800423c:	6923      	ldr	r3, [r4, #16]
 800423e:	6861      	ldr	r1, [r4, #4]
 8004240:	4299      	cmp	r1, r3
 8004242:	bfde      	ittt	le
 8004244:	2330      	movle	r3, #48	; 0x30
 8004246:	f806 3c01 	strble.w	r3, [r6, #-1]
 800424a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800424e:	1b92      	subs	r2, r2, r6
 8004250:	6122      	str	r2, [r4, #16]
 8004252:	464b      	mov	r3, r9
 8004254:	4621      	mov	r1, r4
 8004256:	4640      	mov	r0, r8
 8004258:	f8cd a000 	str.w	sl, [sp]
 800425c:	aa03      	add	r2, sp, #12
 800425e:	f7ff fedf 	bl	8004020 <_printf_common>
 8004262:	3001      	adds	r0, #1
 8004264:	d14c      	bne.n	8004300 <_printf_i+0x200>
 8004266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800426a:	b004      	add	sp, #16
 800426c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004270:	4834      	ldr	r0, [pc, #208]	; (8004344 <_printf_i+0x244>)
 8004272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004276:	680e      	ldr	r6, [r1, #0]
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	f856 5b04 	ldr.w	r5, [r6], #4
 800427e:	061f      	lsls	r7, r3, #24
 8004280:	600e      	str	r6, [r1, #0]
 8004282:	d514      	bpl.n	80042ae <_printf_i+0x1ae>
 8004284:	07d9      	lsls	r1, r3, #31
 8004286:	bf44      	itt	mi
 8004288:	f043 0320 	orrmi.w	r3, r3, #32
 800428c:	6023      	strmi	r3, [r4, #0]
 800428e:	b91d      	cbnz	r5, 8004298 <_printf_i+0x198>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	f023 0320 	bic.w	r3, r3, #32
 8004296:	6023      	str	r3, [r4, #0]
 8004298:	2310      	movs	r3, #16
 800429a:	e7af      	b.n	80041fc <_printf_i+0xfc>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	f043 0320 	orr.w	r3, r3, #32
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	2378      	movs	r3, #120	; 0x78
 80042a6:	4828      	ldr	r0, [pc, #160]	; (8004348 <_printf_i+0x248>)
 80042a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ac:	e7e3      	b.n	8004276 <_printf_i+0x176>
 80042ae:	065e      	lsls	r6, r3, #25
 80042b0:	bf48      	it	mi
 80042b2:	b2ad      	uxthmi	r5, r5
 80042b4:	e7e6      	b.n	8004284 <_printf_i+0x184>
 80042b6:	4616      	mov	r6, r2
 80042b8:	e7bb      	b.n	8004232 <_printf_i+0x132>
 80042ba:	680b      	ldr	r3, [r1, #0]
 80042bc:	6826      	ldr	r6, [r4, #0]
 80042be:	1d1d      	adds	r5, r3, #4
 80042c0:	6960      	ldr	r0, [r4, #20]
 80042c2:	600d      	str	r5, [r1, #0]
 80042c4:	0635      	lsls	r5, r6, #24
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	d501      	bpl.n	80042ce <_printf_i+0x1ce>
 80042ca:	6018      	str	r0, [r3, #0]
 80042cc:	e002      	b.n	80042d4 <_printf_i+0x1d4>
 80042ce:	0671      	lsls	r1, r6, #25
 80042d0:	d5fb      	bpl.n	80042ca <_printf_i+0x1ca>
 80042d2:	8018      	strh	r0, [r3, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	4616      	mov	r6, r2
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	e7ba      	b.n	8004252 <_printf_i+0x152>
 80042dc:	680b      	ldr	r3, [r1, #0]
 80042de:	1d1a      	adds	r2, r3, #4
 80042e0:	600a      	str	r2, [r1, #0]
 80042e2:	681e      	ldr	r6, [r3, #0]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4630      	mov	r0, r6
 80042e8:	6862      	ldr	r2, [r4, #4]
 80042ea:	f000 f82f 	bl	800434c <memchr>
 80042ee:	b108      	cbz	r0, 80042f4 <_printf_i+0x1f4>
 80042f0:	1b80      	subs	r0, r0, r6
 80042f2:	6060      	str	r0, [r4, #4]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2300      	movs	r3, #0
 80042fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042fe:	e7a8      	b.n	8004252 <_printf_i+0x152>
 8004300:	4632      	mov	r2, r6
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	47d0      	blx	sl
 800430a:	3001      	adds	r0, #1
 800430c:	d0ab      	beq.n	8004266 <_printf_i+0x166>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	079b      	lsls	r3, r3, #30
 8004312:	d413      	bmi.n	800433c <_printf_i+0x23c>
 8004314:	68e0      	ldr	r0, [r4, #12]
 8004316:	9b03      	ldr	r3, [sp, #12]
 8004318:	4298      	cmp	r0, r3
 800431a:	bfb8      	it	lt
 800431c:	4618      	movlt	r0, r3
 800431e:	e7a4      	b.n	800426a <_printf_i+0x16a>
 8004320:	2301      	movs	r3, #1
 8004322:	4632      	mov	r2, r6
 8004324:	4649      	mov	r1, r9
 8004326:	4640      	mov	r0, r8
 8004328:	47d0      	blx	sl
 800432a:	3001      	adds	r0, #1
 800432c:	d09b      	beq.n	8004266 <_printf_i+0x166>
 800432e:	3501      	adds	r5, #1
 8004330:	68e3      	ldr	r3, [r4, #12]
 8004332:	9903      	ldr	r1, [sp, #12]
 8004334:	1a5b      	subs	r3, r3, r1
 8004336:	42ab      	cmp	r3, r5
 8004338:	dcf2      	bgt.n	8004320 <_printf_i+0x220>
 800433a:	e7eb      	b.n	8004314 <_printf_i+0x214>
 800433c:	2500      	movs	r5, #0
 800433e:	f104 0619 	add.w	r6, r4, #25
 8004342:	e7f5      	b.n	8004330 <_printf_i+0x230>
 8004344:	080045e5 	.word	0x080045e5
 8004348:	080045f6 	.word	0x080045f6

0800434c <memchr>:
 800434c:	4603      	mov	r3, r0
 800434e:	b510      	push	{r4, lr}
 8004350:	b2c9      	uxtb	r1, r1
 8004352:	4402      	add	r2, r0
 8004354:	4293      	cmp	r3, r2
 8004356:	4618      	mov	r0, r3
 8004358:	d101      	bne.n	800435e <memchr+0x12>
 800435a:	2000      	movs	r0, #0
 800435c:	e003      	b.n	8004366 <memchr+0x1a>
 800435e:	7804      	ldrb	r4, [r0, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	428c      	cmp	r4, r1
 8004364:	d1f6      	bne.n	8004354 <memchr+0x8>
 8004366:	bd10      	pop	{r4, pc}

08004368 <memmove>:
 8004368:	4288      	cmp	r0, r1
 800436a:	b510      	push	{r4, lr}
 800436c:	eb01 0402 	add.w	r4, r1, r2
 8004370:	d902      	bls.n	8004378 <memmove+0x10>
 8004372:	4284      	cmp	r4, r0
 8004374:	4623      	mov	r3, r4
 8004376:	d807      	bhi.n	8004388 <memmove+0x20>
 8004378:	1e43      	subs	r3, r0, #1
 800437a:	42a1      	cmp	r1, r4
 800437c:	d008      	beq.n	8004390 <memmove+0x28>
 800437e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004386:	e7f8      	b.n	800437a <memmove+0x12>
 8004388:	4601      	mov	r1, r0
 800438a:	4402      	add	r2, r0
 800438c:	428a      	cmp	r2, r1
 800438e:	d100      	bne.n	8004392 <memmove+0x2a>
 8004390:	bd10      	pop	{r4, pc}
 8004392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800439a:	e7f7      	b.n	800438c <memmove+0x24>

0800439c <_free_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	4605      	mov	r5, r0
 80043a0:	2900      	cmp	r1, #0
 80043a2:	d043      	beq.n	800442c <_free_r+0x90>
 80043a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043a8:	1f0c      	subs	r4, r1, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bfb8      	it	lt
 80043ae:	18e4      	addlt	r4, r4, r3
 80043b0:	f000 f8d0 	bl	8004554 <__malloc_lock>
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <_free_r+0x94>)
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	4610      	mov	r0, r2
 80043ba:	b933      	cbnz	r3, 80043ca <_free_r+0x2e>
 80043bc:	6063      	str	r3, [r4, #4]
 80043be:	6014      	str	r4, [r2, #0]
 80043c0:	4628      	mov	r0, r5
 80043c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043c6:	f000 b8cb 	b.w	8004560 <__malloc_unlock>
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	d90a      	bls.n	80043e4 <_free_r+0x48>
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	1862      	adds	r2, r4, r1
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bf01      	itttt	eq
 80043d6:	681a      	ldreq	r2, [r3, #0]
 80043d8:	685b      	ldreq	r3, [r3, #4]
 80043da:	1852      	addeq	r2, r2, r1
 80043dc:	6022      	streq	r2, [r4, #0]
 80043de:	6063      	str	r3, [r4, #4]
 80043e0:	6004      	str	r4, [r0, #0]
 80043e2:	e7ed      	b.n	80043c0 <_free_r+0x24>
 80043e4:	461a      	mov	r2, r3
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b10b      	cbz	r3, 80043ee <_free_r+0x52>
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	d9fa      	bls.n	80043e4 <_free_r+0x48>
 80043ee:	6811      	ldr	r1, [r2, #0]
 80043f0:	1850      	adds	r0, r2, r1
 80043f2:	42a0      	cmp	r0, r4
 80043f4:	d10b      	bne.n	800440e <_free_r+0x72>
 80043f6:	6820      	ldr	r0, [r4, #0]
 80043f8:	4401      	add	r1, r0
 80043fa:	1850      	adds	r0, r2, r1
 80043fc:	4283      	cmp	r3, r0
 80043fe:	6011      	str	r1, [r2, #0]
 8004400:	d1de      	bne.n	80043c0 <_free_r+0x24>
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4401      	add	r1, r0
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	6053      	str	r3, [r2, #4]
 800440c:	e7d8      	b.n	80043c0 <_free_r+0x24>
 800440e:	d902      	bls.n	8004416 <_free_r+0x7a>
 8004410:	230c      	movs	r3, #12
 8004412:	602b      	str	r3, [r5, #0]
 8004414:	e7d4      	b.n	80043c0 <_free_r+0x24>
 8004416:	6820      	ldr	r0, [r4, #0]
 8004418:	1821      	adds	r1, r4, r0
 800441a:	428b      	cmp	r3, r1
 800441c:	bf01      	itttt	eq
 800441e:	6819      	ldreq	r1, [r3, #0]
 8004420:	685b      	ldreq	r3, [r3, #4]
 8004422:	1809      	addeq	r1, r1, r0
 8004424:	6021      	streq	r1, [r4, #0]
 8004426:	6063      	str	r3, [r4, #4]
 8004428:	6054      	str	r4, [r2, #4]
 800442a:	e7c9      	b.n	80043c0 <_free_r+0x24>
 800442c:	bd38      	pop	{r3, r4, r5, pc}
 800442e:	bf00      	nop
 8004430:	2000021c 	.word	0x2000021c

08004434 <_malloc_r>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	1ccd      	adds	r5, r1, #3
 8004438:	f025 0503 	bic.w	r5, r5, #3
 800443c:	3508      	adds	r5, #8
 800443e:	2d0c      	cmp	r5, #12
 8004440:	bf38      	it	cc
 8004442:	250c      	movcc	r5, #12
 8004444:	2d00      	cmp	r5, #0
 8004446:	4606      	mov	r6, r0
 8004448:	db01      	blt.n	800444e <_malloc_r+0x1a>
 800444a:	42a9      	cmp	r1, r5
 800444c:	d903      	bls.n	8004456 <_malloc_r+0x22>
 800444e:	230c      	movs	r3, #12
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	2000      	movs	r0, #0
 8004454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004456:	f000 f87d 	bl	8004554 <__malloc_lock>
 800445a:	4921      	ldr	r1, [pc, #132]	; (80044e0 <_malloc_r+0xac>)
 800445c:	680a      	ldr	r2, [r1, #0]
 800445e:	4614      	mov	r4, r2
 8004460:	b99c      	cbnz	r4, 800448a <_malloc_r+0x56>
 8004462:	4f20      	ldr	r7, [pc, #128]	; (80044e4 <_malloc_r+0xb0>)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	b923      	cbnz	r3, 8004472 <_malloc_r+0x3e>
 8004468:	4621      	mov	r1, r4
 800446a:	4630      	mov	r0, r6
 800446c:	f000 f862 	bl	8004534 <_sbrk_r>
 8004470:	6038      	str	r0, [r7, #0]
 8004472:	4629      	mov	r1, r5
 8004474:	4630      	mov	r0, r6
 8004476:	f000 f85d 	bl	8004534 <_sbrk_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d123      	bne.n	80044c6 <_malloc_r+0x92>
 800447e:	230c      	movs	r3, #12
 8004480:	4630      	mov	r0, r6
 8004482:	6033      	str	r3, [r6, #0]
 8004484:	f000 f86c 	bl	8004560 <__malloc_unlock>
 8004488:	e7e3      	b.n	8004452 <_malloc_r+0x1e>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	1b5b      	subs	r3, r3, r5
 800448e:	d417      	bmi.n	80044c0 <_malloc_r+0x8c>
 8004490:	2b0b      	cmp	r3, #11
 8004492:	d903      	bls.n	800449c <_malloc_r+0x68>
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	441c      	add	r4, r3
 8004498:	6025      	str	r5, [r4, #0]
 800449a:	e004      	b.n	80044a6 <_malloc_r+0x72>
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	42a2      	cmp	r2, r4
 80044a0:	bf0c      	ite	eq
 80044a2:	600b      	streq	r3, [r1, #0]
 80044a4:	6053      	strne	r3, [r2, #4]
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 f85a 	bl	8004560 <__malloc_unlock>
 80044ac:	f104 000b 	add.w	r0, r4, #11
 80044b0:	1d23      	adds	r3, r4, #4
 80044b2:	f020 0007 	bic.w	r0, r0, #7
 80044b6:	1ac2      	subs	r2, r0, r3
 80044b8:	d0cc      	beq.n	8004454 <_malloc_r+0x20>
 80044ba:	1a1b      	subs	r3, r3, r0
 80044bc:	50a3      	str	r3, [r4, r2]
 80044be:	e7c9      	b.n	8004454 <_malloc_r+0x20>
 80044c0:	4622      	mov	r2, r4
 80044c2:	6864      	ldr	r4, [r4, #4]
 80044c4:	e7cc      	b.n	8004460 <_malloc_r+0x2c>
 80044c6:	1cc4      	adds	r4, r0, #3
 80044c8:	f024 0403 	bic.w	r4, r4, #3
 80044cc:	42a0      	cmp	r0, r4
 80044ce:	d0e3      	beq.n	8004498 <_malloc_r+0x64>
 80044d0:	1a21      	subs	r1, r4, r0
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 f82e 	bl	8004534 <_sbrk_r>
 80044d8:	3001      	adds	r0, #1
 80044da:	d1dd      	bne.n	8004498 <_malloc_r+0x64>
 80044dc:	e7cf      	b.n	800447e <_malloc_r+0x4a>
 80044de:	bf00      	nop
 80044e0:	2000021c 	.word	0x2000021c
 80044e4:	20000220 	.word	0x20000220

080044e8 <_realloc_r>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	4607      	mov	r7, r0
 80044ec:	4614      	mov	r4, r2
 80044ee:	460e      	mov	r6, r1
 80044f0:	b921      	cbnz	r1, 80044fc <_realloc_r+0x14>
 80044f2:	4611      	mov	r1, r2
 80044f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044f8:	f7ff bf9c 	b.w	8004434 <_malloc_r>
 80044fc:	b922      	cbnz	r2, 8004508 <_realloc_r+0x20>
 80044fe:	f7ff ff4d 	bl	800439c <_free_r>
 8004502:	4625      	mov	r5, r4
 8004504:	4628      	mov	r0, r5
 8004506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004508:	f000 f830 	bl	800456c <_malloc_usable_size_r>
 800450c:	42a0      	cmp	r0, r4
 800450e:	d20f      	bcs.n	8004530 <_realloc_r+0x48>
 8004510:	4621      	mov	r1, r4
 8004512:	4638      	mov	r0, r7
 8004514:	f7ff ff8e 	bl	8004434 <_malloc_r>
 8004518:	4605      	mov	r5, r0
 800451a:	2800      	cmp	r0, #0
 800451c:	d0f2      	beq.n	8004504 <_realloc_r+0x1c>
 800451e:	4631      	mov	r1, r6
 8004520:	4622      	mov	r2, r4
 8004522:	f7ff fbeb 	bl	8003cfc <memcpy>
 8004526:	4631      	mov	r1, r6
 8004528:	4638      	mov	r0, r7
 800452a:	f7ff ff37 	bl	800439c <_free_r>
 800452e:	e7e9      	b.n	8004504 <_realloc_r+0x1c>
 8004530:	4635      	mov	r5, r6
 8004532:	e7e7      	b.n	8004504 <_realloc_r+0x1c>

08004534 <_sbrk_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	2300      	movs	r3, #0
 8004538:	4d05      	ldr	r5, [pc, #20]	; (8004550 <_sbrk_r+0x1c>)
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc ff3e 	bl	80013c0 <_sbrk>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_sbrk_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_sbrk_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	20000228 	.word	0x20000228

08004554 <__malloc_lock>:
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <__malloc_lock+0x8>)
 8004556:	f000 b811 	b.w	800457c <__retarget_lock_acquire_recursive>
 800455a:	bf00      	nop
 800455c:	20000230 	.word	0x20000230

08004560 <__malloc_unlock>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__malloc_unlock+0x8>)
 8004562:	f000 b80c 	b.w	800457e <__retarget_lock_release_recursive>
 8004566:	bf00      	nop
 8004568:	20000230 	.word	0x20000230

0800456c <_malloc_usable_size_r>:
 800456c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004570:	1f18      	subs	r0, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	bfbc      	itt	lt
 8004576:	580b      	ldrlt	r3, [r1, r0]
 8004578:	18c0      	addlt	r0, r0, r3
 800457a:	4770      	bx	lr

0800457c <__retarget_lock_acquire_recursive>:
 800457c:	4770      	bx	lr

0800457e <__retarget_lock_release_recursive>:
 800457e:	4770      	bx	lr

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
